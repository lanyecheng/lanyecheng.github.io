<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>多态性</title>
    <link href="/2024/08/17/9578b4f.html"/>
    <url>/2024/08/17/9578b4f.html</url>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>多态性是面向对象编程的又一个重要特征，它是指在父类中定义的属性和方法被子类继承之后，可以具有不同的数据类型或表现出不同的行为，这使得同一个属性或方法在父类及其各个子类中具有不同的含义。</p><p>对面向对象来说，多态分为编译时多态和运行时多态。其中编译时多态是静态的，主要是指方法的重载，它是根据参数列表的不同来区分不同的方法。通过编译之后会变成两个不同的方法，在运行时谈不上多态。<br />而运行时多态是动态的，它是通过动态绑定来实现的，也就是大家通常所说的多态性。</p><p><a href="https://www.cnblogs.com/taiziyenezha/p/15135100.html">以下部分内容摘自这位博主，写的非常好，推荐</a></p><p><a href="http://c.biancheng.net/java/">Java</a> 实现多态有 3 个必要条件：继承、重写和向上转型。只有满足这 3 个条件，开发人员才能够在同一个继承结构中使用统一的逻辑实现代码处理不同的对象，从而执行不同的行为。</p><ul><li>继承：在多态中必须存在有继承关系的子类和父类。</li><li>重写：子类对父类中某些方法进行重新定义，在调用这些方法时就会调用子类的方法。</li><li>向上转型：在多态中需要将子类的引用赋给父类对象，只有这样该引用才既能可以调用父类的方法，又能调用子类的方法</li></ul><p><strong>多态的格式：</strong></p><blockquote><p>父类类型 变量名 &#x3D; new 子类类型(); </p><p>变量名.方法名();</p></blockquote><h2 id="举例说明"><a href="#举例说明" class="headerlink" title="举例说明"></a>举例说明</h2><p>当使用多态方式调用方法是，首先检查父类中是否有该方法，如果没有，则编译错误，如果有，执行的是子类重写后的方法。如果子类没有重写该方法，就会调用父类的该方法。总结：<strong>编译看左边，运行看右边</strong></p><p>定义动物父类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.base.learn;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 先定义一个父类 ---&gt; 动物类</span><br><span class="hljs-comment"> * 动物都有吃的行为属性</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;动物它们都会吃东西！！！&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>定义猫咪子类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.base.learn;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 定义猫咪继承动物类</span><br><span class="hljs-comment"> * 随之重写里面的吃的行为，因为猫咪也有吃的行为，但是猫咪喜欢吃罐头</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;小猫咪都喜欢吃罐头！&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>定义狗子类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.base.learn;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 定义狗子类继承动物类</span><br><span class="hljs-comment"> * 随之重写里面的吃行为，因为狗也有吃的行为，但是狗喜欢啃骨头</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;小狗爱吃骨头！&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>定义测试类，测试多态性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.base.learn;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 多态形式，创建猫类对象</span><br>        <span class="hljs-type">Animal</span> <span class="hljs-variable">animal</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();<br>        <span class="hljs-comment">// 调用的是 Cat 的 eat</span><br>        animal.eat();<br><br>        <span class="hljs-comment">// 多态形式，创建狗类对象</span><br>        <span class="hljs-type">Animal</span> <span class="hljs-variable">animal12</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>();<br>        <span class="hljs-comment">// 调用的是 Dog 的 eat</span><br>        animal12.eat();<br>    &#125;<br>&#125;<br><span class="hljs-comment">//小猫咪都喜欢吃罐头！</span><br><span class="hljs-comment">//小狗爱吃骨头！</span><br></code></pre></td></tr></table></figure><p>可以看出我们可以使用多态性得到不同动物的一个吃的行为属性</p><h2 id="多态的好处"><a href="#多态的好处" class="headerlink" title="多态的好处"></a>多态的好处</h2><p>提高了代码的拓展性，使用父类类型作为方法形参，传递子类对象给方法，进行方法的调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.base.learn;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        animalEat(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>());<br>        animalEat(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>());<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">animalEat</span><span class="hljs-params">(Animal animal)</span> &#123;<br>        animal.eat();<br>    &#125;<br>&#125;<br><span class="hljs-comment">//小猫咪都喜欢吃罐头！</span><br><span class="hljs-comment">//小狗爱吃骨头！</span><br></code></pre></td></tr></table></figure><p>可以看出由于多态性，我们的 animalEat 方法的形参是 Animal 类型参数，父类型接受子类对象，进而执行子类对象的方法。</p><h2 id="多态的弊端"><a href="#多态的弊端" class="headerlink" title="多态的弊端"></a>多态的弊端</h2><p>无法访问子类独有的功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.base.learn;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 定义猫咪继承动物类</span><br><span class="hljs-comment"> * 随之重写里面的吃的行为，因为猫咪也有吃的行为，但是猫咪喜欢吃罐头</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;小猫咪都喜欢吃罐头！&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">playBall</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;小猫咪都喜欢小球！&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.base.learn;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo3</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Animal</span> <span class="hljs-variable">animal</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();<br>        animal.eat();<br>        <span class="hljs-comment">// 多态的弊端，无法访问子类独有的方法</span><br>        <span class="hljs-comment">// animal.playBall(); //编译报错，编译看左边，Animal没有这个方法</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到动物类和猫咪类有个共同的方法 eat，但是猫咪多了一个 playBall 方法。而对于动物对象来说，它本身动物类没有 playBall 方法，所以编译报错</p><h1 id="引用类型转换："><a href="#引用类型转换：" class="headerlink" title="引用类型转换："></a>引用类型转换：</h1><h2 id="引用类型转换"><a href="#引用类型转换" class="headerlink" title="引用类型转换"></a>引用类型转换</h2><ul><li><p>从上面的多态的弊端的案例中，我们可以看到，我们使用动物对象时无法直接访问到猫类中的玩球球方法，这也就是我们之前说的<strong>编译看左边，运行看右边。</strong></p></li><li><p>而在我们使用多态方式调用方法时，首先检查会左边的父类中是否有该方法，如果没有，则编译错误。也就代表着，父类<strong>无法调用</strong>子类独有的方法。</p></li><li><p>所以说，如果编译都错误，更别说运行了。这也是多态给我们带来的一点<strong>小困扰</strong>，而我们如果想要调用子类特有的方法，必须做向下转型。</p></li></ul><h2 id="向上转型（自动转换）"><a href="#向上转型（自动转换）" class="headerlink" title="向上转型（自动转换）"></a>向上转型（自动转换）</h2><p>对于向下转型，我们先来讲解下向上转型的概念吧。</p><p><strong>向上转型</strong>：</p><p><img src="/../img/%E5%A4%9A%E6%80%81%E6%80%A7/image.png"></p><p>多态本身是子类向父类向上转换（自动转换）的过程，这个过程是默认的。当父类引用指向一个子类对象时，便是向上转型。</p><p>对于父类和子类的关系来说，具体来看图说话：</p><p><img src="/../img/%E5%A4%9A%E6%80%81%E6%80%A7/image-1.png"></p><p>父类相对与子类来说是大范围的类型，Animal 是动物类，是父类。而 Cat 是猫咪类，是子类。<br />所以对于父类 Animal 来说，它的范围是比较大的，它包含一切动物，包括猫咪类和小狗类。</p><p>所以对于子类类型这种范围小的，我们可以直接自动转型给父类类型的变量。</p><p>使用格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">父类类型 变量名 = <span class="hljs-keyword">new</span> 子类类型();<br><br>如：<span class="hljs-type">Animal</span> <span class="hljs-variable">animal</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();<br><br>相当于有：<br><span class="hljs-type">Animal</span> <span class="hljs-variable">animal</span> <span class="hljs-operator">=</span> (Animal) <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();   <br></code></pre></td></tr></table></figure><p>相当于自动帮我们了一个隐形的转换为动物类的一个过程，因为动物本身就包含了猫咪。</p><h2 id="向下转型（强制转换）"><a href="#向下转型（强制转换）" class="headerlink" title="向下转型（强制转换）"></a>向下转型（强制转换）</h2><p>向上转型可以知道它是子类自动转换为父类的一个过程，所以我们现在再来看看向下转型的定义：</p><p><strong>向下转型</strong>：</p><p><img src="/../img/%E5%A4%9A%E6%80%81%E6%80%A7/image-2.png"></p><p>向下转型就是由父类向子类向下转换的过程，这个过程是强制的。一个需要将父类对象转为子类对象，可以使用强制类型转换的格式，这便是向下转型。</p><p>为什么这种就必须自己强制加上一个类型转换过程呢？</p><p>对于父类和子类的关系来说，我们接着看图说话：</p><p><img src="/../img/%E5%A4%9A%E6%80%81%E6%80%A7/image-3.png"></p><p>对于猫咪类的话，它在动物类中只是其中的一部分吧，而对于动物类来说，它有许多其他子类动物如狗，牛，猪等等。</p><p>所以对于动物父类想要向下转型的时候， 它此时不知道指向那个子类，因为不确定呀，所以就必须自己加上强制的类型转换的一个过程。</p><p>使用格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">子类类型 变量名 = (子类类型) 父类变量名;<br>如:<br><span class="hljs-type">Animal</span> <span class="hljs-variable">animal</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();<br><span class="hljs-type">Cat</span> <span class="hljs-variable">cat</span> <span class="hljs-operator">=</span> (Cat) animal;<br>cat.playBall();<span class="hljs-comment">// 此时我们就可以使用猫咪的特有方法啦 </span><br></code></pre></td></tr></table></figure><p>所以对于多态的弊端，无法使用子类特有的参数，我们也解决啦，可以通过向下转型的方法，从而将类型强制转换为某个子类对象后，再去调用子类的特有方法！</p><h2 id="转型的异常"><a href="#转型的异常" class="headerlink" title="转型的异常"></a>转型的异常</h2><p>虽然我们可以使用向下转型使得我们可以使用子类的独有方法，但是转型的过程中，一不小心就会遇到这样的问题了，来，我们来看看下面的代码：<br />定义狗类中额外的独有遛狗方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.base.learn;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 定义狗子类继承动物类</span><br><span class="hljs-comment"> * 随之重写里面的吃行为，因为狗也有吃的行为，但是狗喜欢啃骨头</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;小狗爱吃骨头！&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">walk</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;遛狗！&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.base.learn;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 自动向上转型</span><br>        <span class="hljs-type">Animal</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();<br>        a.eat(); <span class="hljs-comment">// 调用的是 Cat 的 eat</span><br><br>        <span class="hljs-comment">// 向下转型</span><br>        <span class="hljs-type">Dog</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> (Dog) a;<br>        d.walk(); <span class="hljs-comment">// 调用 Dog 的 walk 方法，运行报错</span><br>    &#125;<br>&#125;<br><span class="hljs-comment">// 小猫咪都喜欢吃罐头！</span><br><span class="hljs-comment">// Exception in thread &quot;main&quot; java.lang.ClassCastException: com.base.learn.Cat cannot be cast to com.base.learn.Dog</span><br><span class="hljs-comment">// at com.base.learn.Demo4.main(Demo4.java:10)</span><br></code></pre></td></tr></table></figure><p>我们可以看到，虽然我们的代码通过编译，但是终究在运行时，还是出错了，抛出了 <code>ClassCastException</code> 类型转换的异常。</p><p>其实我们可以知道，我们在上面的时候，创建了 Cat 类型对象，而在向下转型时，将其强行转换为了 Dog 类型，所以程序在运行时，就会抛出类型转换的异常！</p><h2 id="instanceof-关键字"><a href="#instanceof-关键字" class="headerlink" title="instanceof 关键字"></a>instanceof 关键字</h2><ul><li>Java为我们提供一个关键字 <code>instanceof</code> ，它可以帮助我们避免了 <code>ClassCastException</code> 类型转换异常的发生。</li><li><code>instanceof</code> 是 Java 中的一个关键字，用来测试一个对象是否是某个类的实例，或者是该类的子类的实例。</li></ul><p>其语法如下：</p><blockquote><p>object instanceof ClassName</p></blockquote><ul><li><code>object</code> 是需要进行类型检查的对象。</li><li><code>ClassName</code> 是要进行比较的类或接口。</li></ul><p>如果 <code>object</code> 是 <code>ClassName</code> 类或其子类的实例，<code>instanceof</code> 返回 <code>true</code>，否则返回 <code>false</code>。</p><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.base.learn;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo5</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 自动向上转型</span><br>        <span class="hljs-type">Animal</span> <span class="hljs-variable">animal</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();<br>        animal.eat(); <span class="hljs-comment">// 调用的是 Cat 的 eat</span><br><br>        <span class="hljs-comment">// 向下转型</span><br>        <span class="hljs-keyword">if</span> (animal <span class="hljs-keyword">instanceof</span> Cat) &#123;<br>            <span class="hljs-type">Cat</span> <span class="hljs-variable">cat</span> <span class="hljs-operator">=</span> (Cat) animal;<br>            cat.playBall(); <span class="hljs-comment">// 调用的是 Cat 的 playBall</span><br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (animal <span class="hljs-keyword">instanceof</span> Dog) &#123;<br>            <span class="hljs-type">Dog</span> <span class="hljs-variable">dog</span> <span class="hljs-operator">=</span> (Dog) animal;<br>            dog.walk(); <span class="hljs-comment">// 调用的是 Dog 的 walk</span><br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 小猫咪都喜欢吃罐头！</span><br><span class="hljs-comment">// 小猫咪都喜欢小球！</span><br></code></pre></td></tr></table></figure><p>可以发现，它可以帮助我们在做类型转换前，判断该类型是否属于该类型或者子类类型，如果是，我们就可以强转啦！</p><h2 id="视频教程总结"><a href="#视频教程总结" class="headerlink" title="视频教程总结"></a>视频教程总结</h2><p>1.理解多态性:可以理解为一个事物的多种态性</p><p>2.何为多态性:</p><ul><li>对象的多态性:父类的引用指向子类的对象(或子类的对象赋值给父类的引用)</li></ul><p>3.多态的使用：虚拟方法调用</p><ul><li>有了对象多态性以后，我们在编译期，只能调用父类声明的方法，但在执行期实际执行的是子类重写父类的方法</li><li>简称：编译时，看左边；运行时，看右边。</li><li>若编译时类型和运行时类型不一致，就出现了对象的多态性(Polymorphism)</li><li>多态情况下：<ul><li>“看左边”：看的是父类的引用（父类中不具备子类特有的方法）</li><li>“看右边”：看的是子类的对象（实际运行的是子类重写父类的方法）</li></ul></li></ul><p>4.多态性的使用前提：</p><ul><li>① 类的继承关系</li><li>② 方法的重写</li></ul><p>5.对象的多态性:只适用于方法，不适用于属性(编译和运行都看左边)</p><p><strong>练习1</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.base.learn;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 小练习来说明下多态性</span><br><span class="hljs-comment"> * 1.若子类重写了父类方法，就意味着子类里定义的方法彻底覆盖了父类里的同名方法，系统将不可能把父类里的方法转移到子类中。</span><br><span class="hljs-comment"> * 2.对于实例变量则不存在这样的现象，即使子类里定义了与父类完全相同的实例变量，这个实例变量依然不可能覆盖父类中定义的实例变量</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo6</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Sub s= <span class="hljs-keyword">new</span> <span class="hljs-title class_">Sub</span>();<br>        System.out.println(s.count); <span class="hljs-comment">// 20</span><br>        s.display(); <span class="hljs-comment">// 20</span><br><br>        <span class="hljs-type">Base</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> s;<br>        <span class="hljs-comment">//==:对于引用数据类型来讲，比较的是两个引用数据类型变量的地址值是否一样。</span><br>        System.out.println(b == s);<span class="hljs-comment">// true</span><br>        System.out.println(b.count); <span class="hljs-comment">// 10</span><br>        b.display(); <span class="hljs-comment">// 20</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base</span> &#123;<br>    <span class="hljs-type">int</span> count= <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">display</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-built_in">this</span>.count);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Sub</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Base</span> &#123;<br>    <span class="hljs-type">int</span> count= <span class="hljs-number">20</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">display</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-built_in">this</span>.count);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>练习2</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.base.learn;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo7</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Base1</span> <span class="hljs-variable">base</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Sub1</span>();<br>        base.add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>); <span class="hljs-comment">// sub_1，编译看左，运行看右</span><br><br>        <span class="hljs-type">Sub1</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> (Sub1) base;<br>        <span class="hljs-comment">// 确定多个参数的，优先调用</span><br>        s.add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>); <span class="hljs-comment">// sub_2</span><br>    &#125;<br><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span>... arr)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;base&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Sub1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Base1</span> &#123;<br><br>    <span class="hljs-comment">// int... arr 、 int[] arr，算是一样，重写了父类的方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span>[] arr)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;sub_1&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> c)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;sub_2&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.base.learn;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  定义三个类，父类GeometricObject代表几何形状，子类Circle代表圆形，MyRectangle代表矩形</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GeometricObject</span> &#123;<br>    <span class="hljs-keyword">protected</span> String color;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">double</span> weight;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">GeometricObject</span><span class="hljs-params">(String color, <span class="hljs-type">double</span> weight)</span> &#123;<br>        <span class="hljs-built_in">this</span>.color = color;<br>        <span class="hljs-built_in">this</span>.weight = weight;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getColor</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> color;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setColor</span><span class="hljs-params">(String color)</span> &#123;<br>        <span class="hljs-built_in">this</span>.color = color;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getWeight</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> weight;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setWeight</span><span class="hljs-params">(<span class="hljs-type">double</span> weight)</span> &#123;<br>        <span class="hljs-built_in">this</span>.weight = weight;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">findArea</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0.0</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.base.learn;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Circle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">GeometricObject</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> radius;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Circle</span><span class="hljs-params">(String color, <span class="hljs-type">double</span> weight, <span class="hljs-type">double</span> radius)</span> &#123;<br>        <span class="hljs-built_in">super</span>(color, weight);<br>        <span class="hljs-built_in">this</span>.radius = radius;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getRadius</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> radius;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setRadius</span><span class="hljs-params">(<span class="hljs-type">double</span> radius)</span> &#123;<br>        <span class="hljs-built_in">this</span>.radius = radius;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">findArea</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">3.14</span> * radius * radius;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.base.learn;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRectangle</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">GeometricObject</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> width;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> height;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyRectangle</span><span class="hljs-params">(String color, <span class="hljs-type">double</span> weight, <span class="hljs-type">double</span> width, <span class="hljs-type">double</span> height)</span> &#123;<br>        <span class="hljs-built_in">super</span>(color, weight);<br>        <span class="hljs-built_in">this</span>.width = width;<br>        <span class="hljs-built_in">this</span>.height = height;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getWidth</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> width;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setWidth</span><span class="hljs-params">(<span class="hljs-type">double</span> width)</span> &#123;<br>        <span class="hljs-built_in">this</span>.width = width;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getHeight</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> height;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setHeight</span><span class="hljs-params">(<span class="hljs-type">double</span> height)</span> &#123;<br>        <span class="hljs-built_in">this</span>.height = height;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">findArea</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> width * height;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.base.learn;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 义一个测试类 GeometricTest，编写 equalsArea 方法测试两个对象的面积是否相等（注意方法的参数类型，利用动态绑定技术），</span><br><span class="hljs-comment"> * 编写 displayGeometricObject 方法显示对象的面积（注意方法的参数类型，利用动态绑定技术）。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GeometricTest</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">GeometricTest</span> <span class="hljs-variable">test</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GeometricTest</span>();<br><br>        <span class="hljs-type">Circle</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Circle</span>(<span class="hljs-string">&quot;white&quot;</span>, <span class="hljs-number">1.0</span>, <span class="hljs-number">2.3</span>);<br>        test.displayGeometricObject(c1); <span class="hljs-comment">// 面积为：16.610599999999998</span><br><br>        <span class="hljs-type">Circle</span> <span class="hljs-variable">c2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Circle</span>(<span class="hljs-string">&quot;white&quot;</span>, <span class="hljs-number">1.0</span>, <span class="hljs-number">3.3</span>);<br>        test.displayGeometricObject(c2); <span class="hljs-comment">// 面积为：34.1946</span><br><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">isEqual</span> <span class="hljs-operator">=</span> test.equalsAres(c1, c2);<br>        System.out.println(isEqual); <span class="hljs-comment">// false</span><br><br>        <span class="hljs-type">MyRectangle</span> <span class="hljs-variable">rect</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRectangle</span>(<span class="hljs-string">&quot;red&quot;</span>, <span class="hljs-number">1.0</span>, <span class="hljs-number">2.1</span>, <span class="hljs-number">3.4</span>);<br>        test.displayGeometricObject(rect); <span class="hljs-comment">// 面积为：7.14</span><br><br>    &#125;<br><br>    <span class="hljs-comment">// 对象的面积</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">displayGeometricObject</span><span class="hljs-params">(GeometricObject o)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;面积为：&quot;</span> + o.findArea());<br>    &#125;<br><br>    <span class="hljs-comment">// 测试两个对象的面积是否相等</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equalsAres</span><span class="hljs-params">(GeometricObject o1, GeometricObject o2)</span> &#123;<br>        <span class="hljs-keyword">return</span> o1.findArea() == o2.findArea();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaSE</category>
      
      <category>面向对象中</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>super关键字</title>
    <link href="/2024/08/15/f6ea766.html"/>
    <url>/2024/08/15/f6ea766.html</url>
    
    <content type="html"><![CDATA[<p>由于子类不能继承父类的构造方法，因此，如果要调用父类的构造方法，可以使用 super 关键字。<br />super 关键字的功能</p><ul><li>在子类的构造方法中显示的调用父类构造方法</li><li>访问父类的成员方法和变量</li></ul><h1 id="super-调用父类构造方法"><a href="#super-调用父类构造方法" class="headerlink" title="super 调用父类构造方法"></a>super 调用父类构造方法</h1><p>super 关键字可以在子类的构造方法中显式地调用父类的构造方法，基本格式如下：<code>super(parameter-list);</code><br />其中，parameter-list 指定了父类构造方法中的所有参数。super( ) 必须是在子类构造方法的方法体的第一行。</p><h2 id="例1"><a href="#例1" class="headerlink" title="例1"></a>例1</h2><p>声明父类 Person 和子类 Student，在 Person 类中定义一个带有参数的构造方法，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name)</span> &#123;<br>        <br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span> &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>会发现 Student 类出现编译错误，提示必须显式定义构造方法，错误信息如下：</p><p><code>Implicit super constructor Person() is undefined for default constructor. Must define an explicit constructor</code></p><p>IDEA提示错误：<code>There is no default constructor available in &#39;com.base.learn.Person&#39;</code></p><p>在本例中 JVM 默认给 Student 类加了一个无参构造方法，而在这个方法中默认调用了 super()，但是 Person 类中并不存在该构造方法，所以会编译错误。</p><p>如果一个类中没有写任何的构造方法，JVM 会生成一个默认的无参构造方法。在继承关系中，由于在子类的构造方法中，第一条语句默认为调用父类的无参构造方法（即默认为 super()，一般这行代码省略了）。</p><p>所以当在父类中定义了有参构造方法，但是没有定义无参构造方法时，编译器会强制要求我们定义一个相同参数类型的构造方法。</p><h2 id="例2"><a href="#例2" class="headerlink" title="例2"></a>例2</h2><p>声明父类 Person ，类中定义两个构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age, String sex)</span> &#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>子类 Student 继承了 Person 类，使用 super 语句来定义 Student 类的构造方法。示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name, age);  <span class="hljs-comment">// 调用父类含有2个参数的构造方法</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age, String sex)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name, age, sex);  <span class="hljs-comment">// 调用父类中含有3个参数的构造方法</span><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>从上述 Student 类构造方法代码可以看出，super 可以用来直接调用父类中的构造方法，使编写代码也更加简洁方便。<br />编译器会自动在子类构造方法的第一句加上 super() 来调用父类的无参构造方法，必须写在子类构造方法的第一句，也可以省略不写。通过 super 来调用父类其它构造方法时，只需要把相应的参数传过去。</p><h1 id="super-访问父类成员"><a href="#super-访问父类成员" class="headerlink" title="super 访问父类成员"></a>super 访问父类成员</h1><p>当子类的成员变量或方法与父类同名时，可以使用 super 关键字来访问。如果子类重写了父类的某一个方法，即子类和父类有相同的方法定义，但是有不同的方法体，此时，可以通过 super 来调用父类里面的这个方法。</p><p>使用 super 访问父类中的属性和方法 与 this 关键字的使用类似 <code>super.member</code></p><p>其中，member 是父类中的属性或方法。使用 super 访问父类的属性和方法时不用位于第一行。</p><h2 id="super-调用成员属性"><a href="#super-调用成员属性" class="headerlink" title="super 调用成员属性"></a>super 调用成员属性</h2><p>当父类和子类具有相同的数据成员时，可以使用 super 关键字访问父类中的属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">12</span>;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">18</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">display</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;学生的年龄：&quot;</span> + <span class="hljs-built_in">super</span>.age);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">stu</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        stu.display();<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 学生年龄：12</span><br></code></pre></td></tr></table></figure><h2 id="super-调用成员方法"><a href="#super-调用成员方法" class="headerlink" title="super 调用成员方法"></a>super 调用成员方法</h2><p>当父类和子类都具有相同方法名时，可以使用 super 关键字访问父类的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">message</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;This is person class.&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span> &#123;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">message</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;This is student class.&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">display</span><span class="hljs-params">()</span>&#123;<br>        message();<br>        <span class="hljs-built_in">super</span>.message();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">stu</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        stu.display();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// This is student class.</span><br><span class="hljs-comment">// This is person class.</span><br></code></pre></td></tr></table></figure><h1 id="super-和-this-的区别"><a href="#super-和-this-的区别" class="headerlink" title="super 和 this 的区别"></a>super 和 this 的区别</h1><p>this 指的是当前对象的引用，super 是当前对象父对象的引用</p><p>super 关键字的用法</p><ul><li>super.父类属性名：调用父类中的属性</li><li>super.父类方法名：调用父类中的方法</li><li>super()：调用父类的无参构造方法</li><li>super(参数)：调用父类的有参构造方法</li></ul><p>如果构造方法的第一行代码不是 this() 和 super()，则系统会默认添加 super()。</p><p>this 关键字的用法：</p><ul><li>this.属性名：表示当前对象的属性</li><li>this.方法名(参数)：表示调用当前对象的方法</li></ul><p>当局部变量和成员变量发生冲突时，使用 <code>this.</code>进行区分。</p><h1 id="子类对象实例化全过程"><a href="#子类对象实例化全过程" class="headerlink" title="子类对象实例化全过程"></a>子类对象实例化全过程</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Creature</span>&#123; <span class="hljs-comment">//生物类</span><br>    <span class="hljs-comment">//声明属性、方法、构造器</span><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Creature</span>&#123; <span class="hljs-comment">//动物类</span><br><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span>&#123; <span class="hljs-comment">//狗类</span><br><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DogTest</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">Dog</span> <span class="hljs-variable">dog</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>();<br>        dog.xxx();<br>        dog.yyy = ...;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>从结果的角度来看：体现为类的继承性</p><ul><li>当我们创建子类对象后，子类对象就获取了其父类中声明的所有的属性和方法，在权限允许的情况下，可以直接调用。</li></ul><p>从过程的角度来看：</p><ul><li><p>当我们通过子类的构造器创建对象时，子类的构造器一定会直接或间接的调用到其父类的构造器，而其父类的构造器,同样会直接或间接的调用到其父类的父类的构造器，….，直到调用了Object类中的构造器为止。</p></li><li><p>正因为我们调用过子类所有的父类的构造器，所以我们就会将父类中声明的属性、方法加载到内存中，供子类的对象使用。</p></li></ul><p>问题1：在创建子类对象的过程中，一定会调用父类中的构造器吗？ yes!</p><p>问题2：创建子类的对象时，内存中到底有几个对象？</p><ul><li>就只有一个对象！即为当前new后面构造器对应的类的对象。</li></ul>]]></content>
    
    
    <categories>
      
      <category>JavaSE</category>
      
      <category>面向对象中</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>方法重写</title>
    <link href="/2024/08/13/5504c575.html"/>
    <url>/2024/08/13/5504c575.html</url>
    
    <content type="html"><![CDATA[<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>在子类中如果创建了一个与父类中相同名称、相同返回值类型、相同参数列表的方法，只是方法体中的实现不同，以实现不同于父类的功能，这种方式被称为方法重写（override），又称为方法覆盖。当父类中的方法无法满足子类需求或子类具有特有功能的时候，需要方法重写。</p><p>子类可以根据需要，定义特定于自己的行为。既沿袭了父类的功能名称，又根据子类的需要重新实现父类方法，从而进行扩展增强。</p><h1 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h1><p>在重写方法时，需要遵循下面的规则：</p><ul><li>参数列表必须完全与被重写的方法参数列表相同。</li><li>返回的类型必须与被重写的方法的返回类型相同（<a href="http://c.biancheng.net/java/">Java1.5</a> 版本之前返回值类型必须一样，之后的 Java 版本放宽了限制，返回值类型必须小于或者等于父类方法的返回值类型）。</li><li>访问权限不能比父类中被重写方法的访问权限更低（public &gt; protected &gt; default &gt; private）。</li><li>重写方法一定不能抛出新的检査异常或者比被重写方法声明更加宽泛的检査型异常。例如，父类的一个方法声明了一个检査异常 IOException，在重写这个方法时就不能抛出 Exception，只能拋出 IOException 的子类异常，可以抛出非检査异常。</li></ul><p>另外还要注意以下几条：</p><ul><li>重写的方法可以使用 @Override 注解来标识。</li><li>父类的成员方法只能被它的子类重写。</li><li>声明为 final 的方法不能被重写。</li><li>声明为 static 的方法不能被重写，但是能够再次声明。</li><li>构造方法不能被重写。</li><li>子类和父类在同一个包中时，子类可以重写父类的所有方法，除了声明为 private 和 final 的方法。</li><li>子类和父类不在同一个包中时，子类只能重写父类的声明为 public 和 protected 的非 final 方法。</li><li>如果不能继承一个方法，则不能重写这个方法。</li></ul><h1 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.base.learn;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 方法重写</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">displayInfo</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;I am an animal.&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">displayInfo</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;I am a dog.&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Dog</span> <span class="hljs-variable">d1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>();<br>        d1.displayInfo();<br>    &#125;<br>&#125;<br><span class="hljs-comment">// I am a dog.</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.base.learn;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 方法重写，从子类访问父类的方法，可以使用 super 关键字</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">displayInfo</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;I am an animal.&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">displayInfo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>.displayInfo();<br>        System.out.println(<span class="hljs-string">&quot;I am a dog.&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Dog</span> <span class="hljs-variable">d1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>();<br>        d1.displayInfo();<br>    &#125;<br>&#125;<br><span class="hljs-comment">// I am an animal.</span><br><span class="hljs-comment">// I am a dog.</span><br><br></code></pre></td></tr></table></figure><h1 id="Override"><a href="#Override" class="headerlink" title="@Override"></a>@Override</h1><ul><li>@Override：注解，重写注解<strong>校验</strong>！</li><li>这个注解标记的方法，就说明这个方法必须是重写父类的方法，否则编译阶段报错。</li><li>建议重写都加上这个注解，一方面可以提高代码的可读性，一方面可以防止重写出错！</li></ul><h1 id="四种权限修饰符"><a href="#四种权限修饰符" class="headerlink" title="四种权限修饰符"></a>四种权限修饰符</h1><p><img src="/../img/%E6%96%B9%E6%B3%95%E9%87%8D%E5%86%99/image.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.base.learn2;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 体会四种权限修饰符，在类内部，都是可以访问</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Order</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> orderPrivate;<br>    <span class="hljs-type">int</span> orderDefault;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> orderProtected;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> orderPublic;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">methodPrivate</span><span class="hljs-params">()</span> &#123;<br>        orderPrivate = <span class="hljs-number">1</span>;<br>        orderDefault = <span class="hljs-number">2</span>;<br>        orderProtected = <span class="hljs-number">3</span>;<br>        orderPublic = <span class="hljs-number">4</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">methodDefault</span><span class="hljs-params">()</span> &#123;<br>        orderPrivate = <span class="hljs-number">1</span>;<br>        orderDefault = <span class="hljs-number">2</span>;<br>        orderProtected = <span class="hljs-number">3</span>;<br>        orderPublic = <span class="hljs-number">4</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">methodProtected</span><span class="hljs-params">()</span> &#123;<br>        orderPrivate = <span class="hljs-number">1</span>;<br>        orderDefault = <span class="hljs-number">2</span>;<br>        orderProtected = <span class="hljs-number">3</span>;<br>        orderPublic = <span class="hljs-number">4</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">methodPublic</span><span class="hljs-params">()</span> &#123;<br>        orderPrivate = <span class="hljs-number">1</span>;<br>        orderDefault = <span class="hljs-number">2</span>;<br>        orderProtected = <span class="hljs-number">3</span>;<br>        orderPublic = <span class="hljs-number">4</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.base.learn2;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 同一个包中的其它类</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Order</span> <span class="hljs-variable">order</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Order</span>();<br><br>        <span class="hljs-comment">// order.orderPrivate = 0;  // 同一个包中的其它类，不可调用 Order 类中的私有属性和方法</span><br>        order.orderDefault = <span class="hljs-number">1</span>;<br>        order.orderProtected = <span class="hljs-number">2</span>;<br>        order.orderPublic = <span class="hljs-number">3</span>;<br><br>        <span class="hljs-comment">// order.methodPrivate();</span><br>        order.methodDefault();<br>        order.methodProtected();<br>        order.methodPublic();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.base.learn3;<br><br><span class="hljs-keyword">import</span> com.base.learn2.Order;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 在不同包的子类调用</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SubOrder</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Order</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span> &#123;<br><br>        orderProtected = <span class="hljs-number">2</span>;<br>        orderPublic = <span class="hljs-number">3</span>;<br><br>        methodProtected();<br>        methodPublic();<br><br>        <span class="hljs-comment">// 在不同包的子类中，不能调用 Order 类中声明为 private 和 缺省权限的属性和方法</span><br>        <span class="hljs-comment">// orderPrivate = 0;</span><br>        <span class="hljs-comment">// orderDefault = 1;</span><br>        <span class="hljs-comment">// methodPrivate();</span><br>        <span class="hljs-comment">// methodDefault();</span><br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.base.learn3;<br><br><span class="hljs-keyword">import</span> com.base.learn2.Order;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 不同包的普通类</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Order</span> <span class="hljs-variable">order</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Order</span>();<br>        order.orderPublic = <span class="hljs-number">1</span>;<br>        order.methodPublic();<br><br>        <span class="hljs-comment">// 不同包下的普通类(非子类)要使用 Order 类，不可以调用声明为 private、缺省、protected 权限的属性、方法。</span><br><span class="hljs-comment">// order.orderPrivate = 2;</span><br><span class="hljs-comment">// order.orderProtected = 3;</span><br><span class="hljs-comment">// order.orderProtected = 4;</span><br><br><span class="hljs-comment">// order.methodPrivate();</span><br><span class="hljs-comment">// order.methodDefault();</span><br><span class="hljs-comment">// order.methodProtected();</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="重载和重写区别"><a href="#重载和重写区别" class="headerlink" title="重载和重写区别"></a>重载和重写区别</h1><ul><li>定义不同：重载是定义相同的方法名、参数不同，重写是子类重写父类的方法</li><li>范围不同：重载是在一个类中，重写是子类与父类之间的</li><li>多态不同：重载是编译时的多态性，重写是运行时的多态性</li><li>参数不同：重载的参数个数、参数类型、参数的顺序可以不同，重写父类子方法参数必须相同</li><li>修饰不同：重载对修饰范围没有要求，重写要求重写方法的修饰范围大于被重写方法的修饰范围</li></ul><p>多态是一个类需要表现出多种形态，子类重写父类的方法，使子类具有不同的方法实现</p>]]></content>
    
    
    <categories>
      
      <category>JavaSE</category>
      
      <category>面向对象中</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>封装继承</title>
    <link href="/2024/08/12/22b7ba6c.html"/>
    <url>/2024/08/12/22b7ba6c.html</url>
    
    <content type="html"><![CDATA[<h1 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h1><blockquote><p>封装是什么呢</p><p>在面向对象程序设计中，封装是指将数据和操作数据的方法绑定在一起，并将这些绑定在一起的数据和方法封装在一个对象中。封装的目的是隐藏对象内部的实现细节，只向外界提供必要的接口，从而提高程序的复用性和可维护性</p></blockquote><h2 id="封装的好处"><a href="#封装的好处" class="headerlink" title="封装的好处"></a>封装的好处</h2><ul><li>隐藏对象内部的实现细节，只提供必要的接口，使程序更加容易使用和维护。</li><li>提高程序的复用性。封装可以将一个对象的实现细节与它的外部接口分开，从而使得一个对象可以被多个程序使用。</li><li>提高程序的安全性。封装可以让程序员在设计对象时更加注重数据的安全性，而不用担心外部的程序会破坏对象的内部数据。</li><li>提高程序的可维护性。封装可以使程序员在修改对象内部实现时不用担心会影响到外部的程序，这样可以极大地提高程序的可维护性。</li></ul><h2 id="封装的步骤"><a href="#封装的步骤" class="headerlink" title="封装的步骤"></a>封装的步骤</h2><ol><li>修改属性的可见性来限制对属性的访问（一般限制为private）</li><li>对每个值属性提供对外的公共方法访问，也就是创建一对赋取值方法，用于对私有属性的访问</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.base.learn;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 客户信息类</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Customer</span> &#123;<br>    <span class="hljs-keyword">private</span> String name; <span class="hljs-comment">// 名字</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">char</span> gender; <span class="hljs-comment">// 性别</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age; <span class="hljs-comment">// 年龄</span><br>    <span class="hljs-keyword">private</span> String phone; <span class="hljs-comment">// 手机号</span><br>    <span class="hljs-keyword">private</span> String email; <span class="hljs-comment">// 电子邮箱</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Customer</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Customer</span><span class="hljs-params">(String name, <span class="hljs-type">char</span> gender, <span class="hljs-type">int</span> age, String phone, String email)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.gender = gender;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        <span class="hljs-built_in">this</span>.phone = phone;<br>        <span class="hljs-built_in">this</span>.email = email;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">char</span> <span class="hljs-title function_">getGender</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> gender;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setGender</span><span class="hljs-params">(<span class="hljs-type">char</span> gender)</span> &#123;<br>        <span class="hljs-built_in">this</span>.gender = gender;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPhone</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> phone;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPhone</span><span class="hljs-params">(String phone)</span> &#123;<br>        <span class="hljs-built_in">this</span>.phone = phone;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getEmail</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> email;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setEmail</span><span class="hljs-params">(String email)</span> &#123;<br>        <span class="hljs-built_in">this</span>.email = email;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注：采用 this 关键字调用本类中的属性，也就是类中成员变量，主要是为了解决实例变量和局部变量之间发生的命名冲突</p><h2 id="JavaBean"><a href="#JavaBean" class="headerlink" title="JavaBean"></a>JavaBean</h2><p>Java 中的封装是面向对象编程的一个基本概念，指的是将数据和操作数据的方法绑定在一起，并将这些绑定在一起的数据和方法封装在一个对象中。</p><p>JavaBean 是 Java 语言中的一种命名约定，它将一个 Java 类定义为一个可重用的组件。JavaBean 遵循 Java 中的封装思想，但是它还要满足一些特定的要求，比如必须提供一个无参的构造函数，必须提供用于访问私有属性的 getter 和 setter 方法等。所以，JavaBean 是 Java 中的封装的一种具体实现，它为 Java 中的封装提供了一种标准的方式。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>封装实际上是将类的某些信息隐藏在类的内部，不允许外部程序直接访问，而是通过该类提供的方法来实现对隐藏信息的访问和操作。就是把我们想提供给外界的一些方法给暴露出来，以便外界能调用到我们。</p><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><h2 id="继承的介绍"><a href="#继承的介绍" class="headerlink" title="继承的介绍"></a>继承的介绍</h2><ul><li>继承是java面向对象编程技术的一块基石，因为它允许创建分等级层次的类。描述的是事物之间的所属关系，这种关系是：is-a 的关系。</li><li><strong>继承</strong>：就是子类继承父类的 <strong>属性</strong> 和 <strong>行为</strong> ，使得子类对象（实例）可以直接具有与父类相同的属性、相同的行为。子类可以直接访问父类中的 <strong>非私有</strong> 的属性和行为。</li></ul><h2 id="生活中的继承"><a href="#生活中的继承" class="headerlink" title="生活中的继承"></a>生活中的继承</h2><p><img src="/../img/%E5%B0%81%E8%A3%85%E7%BB%A7%E6%89%BF/image.png"></p><h2 id="继承的好处"><a href="#继承的好处" class="headerlink" title="继承的好处"></a>继承的好处</h2><ul><li>提高代码的重用性。继承可以使一个类获得另一个类的属性和方法，从而减少重复的代码，提高代码的重用性。</li><li>提高代码的可维护性。通过继承，可以将一些公共的属性和方法抽取到基类中，从而提高代码的可维护性。</li><li>提高代码的可扩展性。继承可以使一个类在不改变原有代码的情况下扩展新的属性和方法，从而提高代码的可扩展性。</li><li>提高代码的可读性。通过继承，可以让类与类之间建立一种父子关系，使得代码的结构更加清晰，更加容易理解。</li></ul><p>其它</p><ul><li>Java 的继承是单继承，但是可以多重继承，单继承就是一个子类只能继承一个父类，多重继承就是，例如 B 类继承 A 类，C 类继承 B 类，所以按照关系就是 B 类是 C 类的父类，A 类是 B 类的父类，这是 Java 继承区别于 C++ 继承的一个特性。</li></ul><h2 id="继承的格式"><a href="#继承的格式" class="headerlink" title="继承的格式"></a>继承的格式</h2><p>在Java当中会通过extends关键字可以申明一个类是从另外一个类继承而来的，一般形式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">class 父类 &#123;<br>&#125;<br><br>class 子类 extends 父类 &#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>需要注意一点： Java 不支持多继承，但支持多重继承。就如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br>&#125;<br> <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span> &#123;   (对的)<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span>, B &#123;  （错的❌）<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">B</span> &#123;   （对的）<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/../img/%E5%B0%81%E8%A3%85%E7%BB%A7%E6%89%BF/image-1.png"></p><blockquote><p>顶层父类是Object类。所有的类默认继承Object，作为父类</p></blockquote><h2 id="继承-Demo"><a href="#继承-Demo" class="headerlink" title="继承 Demo"></a>继承 Demo</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.base.exer1;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;吃饭&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sleep</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;睡觉&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.base.exer1;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span> &#123;<br>    String major;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age, String major)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        setAge(age);<br>        <span class="hljs-built_in">this</span>.major = major;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">study</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;学习&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;name: &quot;</span> + name + <span class="hljs-string">&quot;, age: &quot;</span> + getAge());<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.base.exer1;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 面向对象的特征二:继承性</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 为什么要有继承？</span><br><span class="hljs-comment"> * 多个类中存在相同属性和行为时，将这些内容抽取到单独一个类中，</span><br><span class="hljs-comment"> * 那么多个类无需再定义这些属性和行为，只要继承那个类即可。</span><br><span class="hljs-comment"> * 一、继承性的好处</span><br><span class="hljs-comment"> * ① 减少了代码的冗余，提高了代码的复用性；</span><br><span class="hljs-comment"> * ② 便于功能的扩展；</span><br><span class="hljs-comment"> * ③ 为之后多态性的使用，提供了前提。</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 二、继承性的格式</span><br><span class="hljs-comment"> * class A extends B&#123;&#125;</span><br><span class="hljs-comment"> *  A:子类、派生类、subclass</span><br><span class="hljs-comment"> *  B:父类、超类、基类、superclass</span><br><span class="hljs-comment"> *  </span><br><span class="hljs-comment"> *  2.1 体现：一旦子类 A 继承父类以后，子类 A 中就获取了父类 B 中声明的结构：属性、方法</span><br><span class="hljs-comment"> * 特别的，父类中声明为 private 的属性或方法，子类继承父类以后，仍然认为获取了父类中私有的结构。</span><br><span class="hljs-comment"> * 只有因为封装性的影响，使得子类不能直接调用父类的结构而已。</span><br><span class="hljs-comment"> *  2.2 子类继承父类以后，还可以声明自己特有的属性或方法，实现功能的拓展。</span><br><span class="hljs-comment"> *  子类和父类的关系：不同于子集与集合的关系。</span><br><span class="hljs-comment"> *  extends:延展、扩展</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 三、Java 中关于继承性的规定：</span><br><span class="hljs-comment"> *  1.一个类可以被多个类继承</span><br><span class="hljs-comment"> *  2.Java 中类的单继承性：一个类只能有一个父类</span><br><span class="hljs-comment"> *  3.子父类是相对的概念。</span><br><span class="hljs-comment"> *  4.子类直接继承的父类，称为：直接父类。间接继承的父类，称为，间接父类。</span><br><span class="hljs-comment"> *  5.子类继承父类后，就获取了直接父类以及所有间接父类中声明的属性和方法。</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 四、1.如果我们没有显式的声明一个类的父类的话，则此类继承于 java.lang.Object 类</span><br><span class="hljs-comment"> *   2.所有的 java 类(除 java.long.Object 类之外)都直接或间接地继承于 java.lang.Object 类;</span><br><span class="hljs-comment"> *   3.意味着，所有的 java 类具有 java.lang.Object 类声明的功能。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExtendsTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>        p1.eat(); <span class="hljs-comment">// 吃饭</span><br>        System.out.println(<span class="hljs-string">&quot;---------------&quot;</span>);<br><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        s1.eat();<br>        s1.sleep();<br>        s1.name = <span class="hljs-string">&quot;Tom&quot;</span>;<br><br>        s1.setAge(<span class="hljs-number">10</span>);<br>        System.out.println(s1.getAge());<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="继承的规则"><a href="#继承的规则" class="headerlink" title="继承的规则"></a>继承的规则</h2><blockquote><p>并不是父类的所有内容都可以给自类继承</p><p>子类不能直接访问父类中私有的（private）的成员变量和方法</p></blockquote><h3 id="supper-关键字"><a href="#supper-关键字" class="headerlink" title="supper 关键字"></a>supper 关键字</h3><blockquote><p>跟继承有关系，这里单独开写一篇内容，介绍 <code>super</code> 关键字的使用</p></blockquote><h3 id="final-关键字"><a href="#final-关键字" class="headerlink" title="final 关键字"></a>final 关键字</h3><blockquote><p>final 关键字修饰的类，不能被继承，这里也单独一篇内容，介绍 <code>final</code> 关键字</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>JavaSE</category>
      
      <category>面向对象中</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Project02｜客户信息管理软件</title>
    <link href="/2024/08/11/cfda2000.html"/>
    <url>/2024/08/11/cfda2000.html</url>
    
    <content type="html"><![CDATA[<h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><ul><li>模拟实现一个基于文本界面的《客户信息管理软件》</li><li>进一步掌握编程技巧和调试技巧，熟悉面向对象编程</li><li>主要涉及以下知识点：<ul><li>类结构的使用：属性、方法及构造器</li><li>对象的创建与使用</li><li>类的封装性</li><li>声明和使用数组</li><li>数组的插入、删除和替换</li><li>关键字的使用：this</li></ul></li></ul><h1 id="需求说明"><a href="#需求说明" class="headerlink" title="需求说明"></a>需求说明</h1><ul><li>模拟实现基于文本界面的《拼电商客户管理系统》。</li><li>该软件能够实现对客户对象的插入、修改和删除（用数组实现），并能够打印客户明细表。</li><li>项目采用分级菜单方式。主菜单如下：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">-----------------客户信息管理软件-----------------<br><br>                    1 添 加 客 户<br>                    2 修 改 客 户<br>                    3 删 除 客 户<br>                    4 客 户 列 表<br>                    5 退      出<br><br>                  请选择(1-5)：<br></code></pre></td></tr></table></figure><h2 id="添加客户"><a href="#添加客户" class="headerlink" title="添加客户"></a>添加客户</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">请选择(1-5)：1<br><br>---------------------添加客户---------------------<br>姓名：佟刚<br>性别：男<br>年龄：35<br>电话：010-56253825<br>邮箱：tongtong@atguigu.com<br>---------------------添加完成---------------------<br></code></pre></td></tr></table></figure><h2 id="修改客户"><a href="#修改客户" class="headerlink" title="修改客户"></a>修改客户</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">请选择(1-5)：2<br><br>---------------------修改客户---------------------<br>请选择待修改客户编号(-1退出)：1<br>姓名(佟刚)：&lt;直接回车表示不修改&gt;<br>性别(男)：<br>年龄(35)：<br>电话(010-56253825)：<br>邮箱(tongtong@atguigu.com)：tongg@atguigu.com<br>---------------------修改完成---------------------<br></code></pre></td></tr></table></figure><h2 id="删除客户"><a href="#删除客户" class="headerlink" title="删除客户"></a>删除客户</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">请选择(1-5)：3<br><br>---------------------删除客户---------------------<br>请选择待删除客户编号(-1退出)：1<br>确认是否删除(Y/N)：y<br>---------------------删除完成---------------------<br></code></pre></td></tr></table></figure><h2 id="客户列表"><a href="#客户列表" class="headerlink" title="客户列表"></a>客户列表</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">请选择(1-5)：4<br><br>---------------------------客户列表---------------------------<br>编号  姓名       性别    年龄   电话                   邮箱<br> 1    佟刚       男        45     010-56253825   tong@abc.com<br> 2    封捷       女        36     010-56253825   fengjie@ibm.com<br> 3    雷丰阳     男        32      010-56253825   leify@163.com<br>-------------------------客户列表完成-------------------------<br></code></pre></td></tr></table></figure><h1 id="软件设计结构"><a href="#软件设计结构" class="headerlink" title="软件设计结构"></a>软件设计结构</h1><p>该软件由以下三个模块组成：</p><ul><li>CustomerView为主模块，负责菜单的显示和处理用户操作</li><li>CustomerList为Customer对象的管理模块，内部用数组管理一组Customer对象，并提供相应的添加、修改、删除和遍历方法，供CustomerView调用</li><li>Customer为实体对象，用来封装客户信息</li></ul><h2 id="CMUtility-类"><a href="#CMUtility-类" class="headerlink" title="CMUtility 类"></a>CMUtility 类</h2><blockquote><p>项目中提供了CMUtility.java类，可用来方便地实现键盘访问</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.base.learn;<br><br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CMUtility</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     用于界面菜单的选择。该方法读取键盘，如果用户键入’1’-’5’中的任意字符，则方法返回。返回值为用户键入字符。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">char</span> <span class="hljs-title function_">readMenuSelection</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">char</span> c;<br>        <span class="hljs-keyword">for</span> (; ; ) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> readKeyBoard(<span class="hljs-number">1</span>, <span class="hljs-literal">false</span>);<br>            c = str.charAt(<span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">if</span> (c != <span class="hljs-string">&#x27;1&#x27;</span> &amp;&amp; c != <span class="hljs-string">&#x27;2&#x27;</span> &amp;&amp;<br>                    c != <span class="hljs-string">&#x27;3&#x27;</span> &amp;&amp; c != <span class="hljs-string">&#x27;4&#x27;</span> &amp;&amp; c != <span class="hljs-string">&#x27;5&#x27;</span>) &#123;<br>                System.out.print(<span class="hljs-string">&quot;选择错误，请重新输入：&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> c;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     从键盘读取一个字符，并将其作为方法的返回值。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">char</span> <span class="hljs-title function_">readChar</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> readKeyBoard(<span class="hljs-number">1</span>, <span class="hljs-literal">false</span>);<br>        <span class="hljs-keyword">return</span> str.charAt(<span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     从键盘读取一个字符，并将其作为方法的返回值。</span><br><span class="hljs-comment">     如果用户不输入字符而直接回车，方法将以defaultValue 作为返回值。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">char</span> <span class="hljs-title function_">readChar</span><span class="hljs-params">(<span class="hljs-type">char</span> defaultValue)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> readKeyBoard(<span class="hljs-number">1</span>, <span class="hljs-literal">true</span>);<br>        <span class="hljs-keyword">return</span> (str.length() == <span class="hljs-number">0</span>) ? defaultValue : str.charAt(<span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     从键盘读取一个长度不超过2位的整数，并将其作为方法的返回值。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">readInt</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">int</span> n;<br>        <span class="hljs-keyword">for</span> (; ; ) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> readKeyBoard(<span class="hljs-number">2</span>, <span class="hljs-literal">false</span>);<br>            <span class="hljs-keyword">try</span> &#123;<br>                n = Integer.parseInt(str);<br>                <span class="hljs-keyword">break</span>;<br>            &#125; <span class="hljs-keyword">catch</span> (NumberFormatException e) &#123;<br>                System.out.print(<span class="hljs-string">&quot;数字输入错误，请重新输入：&quot;</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> n;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     从键盘读取一个长度不超过2位的整数，并将其作为方法的返回值。</span><br><span class="hljs-comment">     如果用户不输入字符而直接回车，方法将以defaultValue 作为返回值。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">readInt</span><span class="hljs-params">(<span class="hljs-type">int</span> defaultValue)</span> &#123;<br>        <span class="hljs-type">int</span> n;<br>        <span class="hljs-keyword">for</span> (; ; ) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> readKeyBoard(<span class="hljs-number">2</span>, <span class="hljs-literal">true</span>);<br>            <span class="hljs-keyword">if</span> (str.equals(<span class="hljs-string">&quot;&quot;</span>)) &#123;<br>                <span class="hljs-keyword">return</span> defaultValue;<br>            &#125;<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                n = Integer.parseInt(str);<br>                <span class="hljs-keyword">break</span>;<br>            &#125; <span class="hljs-keyword">catch</span> (NumberFormatException e) &#123;<br>                System.out.print(<span class="hljs-string">&quot;数字输入错误，请重新输入：&quot;</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> n;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     从键盘读取一个长度不超过limit的字符串，并将其作为方法的返回值。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">readString</span><span class="hljs-params">(<span class="hljs-type">int</span> limit)</span> &#123;<br>        <span class="hljs-keyword">return</span> readKeyBoard(limit, <span class="hljs-literal">false</span>);<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     从键盘读取一个长度不超过limit的字符串，并将其作为方法的返回值。</span><br><span class="hljs-comment">     如果用户不输入字符而直接回车，方法将以defaultValue 作为返回值。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">readString</span><span class="hljs-params">(<span class="hljs-type">int</span> limit, String defaultValue)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> readKeyBoard(limit, <span class="hljs-literal">true</span>);<br>        <span class="hljs-keyword">return</span> str.equals(<span class="hljs-string">&quot;&quot;</span>)? defaultValue : str;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     用于确认选择的输入。该方法从键盘读取‘Y’或’N’，并将其作为方法的返回值。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">char</span> <span class="hljs-title function_">readConfirmSelection</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">char</span> c;<br>        <span class="hljs-keyword">for</span> (; ; ) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> readKeyBoard(<span class="hljs-number">1</span>, <span class="hljs-literal">false</span>).toUpperCase();<br>            c = str.charAt(<span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;Y&#x27;</span> || c == <span class="hljs-string">&#x27;N&#x27;</span>) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                System.out.print(<span class="hljs-string">&quot;选择错误，请重新输入：&quot;</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> c;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">readKeyBoard</span><span class="hljs-params">(<span class="hljs-type">int</span> limit, <span class="hljs-type">boolean</span> blankReturn)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">line</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br><br>        <span class="hljs-keyword">while</span> (scanner.hasNextLine()) &#123;<br>            line = scanner.nextLine();<br>            <span class="hljs-keyword">if</span> (line.length() == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">if</span> (blankReturn) <span class="hljs-keyword">return</span> line;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">continue</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (line.length() &lt; <span class="hljs-number">1</span> || line.length() &gt; limit) &#123;<br>                System.out.print(<span class="hljs-string">&quot;输入长度（不大于&quot;</span> + limit + <span class="hljs-string">&quot;）错误，请重新输入：&quot;</span>);<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> line;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Customer-类"><a href="#Customer-类" class="headerlink" title="Customer 类"></a>Customer 类</h2><ul><li>Customer为实体类，用来封装客户信息</li><li>该类封装客户的以下信息：<ul><li>String name ：客户姓名</li><li>char gender  ：性别</li><li>int age          ：年龄</li><li>String phone：电话号码</li><li>String email ：电子邮箱</li></ul></li><li>提供各属性的 <code>get/set</code> 方法</li><li>提供所需的构造器（可自行确定）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.base.learn;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 客户信息类：Customer</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Customer</span> &#123;<br>    <span class="hljs-keyword">private</span> String name; <span class="hljs-comment">// 名字</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">char</span> gender; <span class="hljs-comment">// 性别</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age; <span class="hljs-comment">// 年龄</span><br>    <span class="hljs-keyword">private</span> String phone; <span class="hljs-comment">// 手机号</span><br>    <span class="hljs-keyword">private</span> String email; <span class="hljs-comment">// 电子邮箱</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Customer</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Customer</span><span class="hljs-params">(String name, <span class="hljs-type">char</span> gender, <span class="hljs-type">int</span> age, String phone, String email)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.gender = gender;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        <span class="hljs-built_in">this</span>.phone = phone;<br>        <span class="hljs-built_in">this</span>.email = email;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">char</span> <span class="hljs-title function_">getGender</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> gender;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setGender</span><span class="hljs-params">(<span class="hljs-type">char</span> gender)</span> &#123;<br>        <span class="hljs-built_in">this</span>.gender = gender;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPhone</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> phone;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPhone</span><span class="hljs-params">(String phone)</span> &#123;<br>        <span class="hljs-built_in">this</span>.phone = phone;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getEmail</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> email;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setEmail</span><span class="hljs-params">(String email)</span> &#123;<br>        <span class="hljs-built_in">this</span>.email = email;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="CustomerList-类"><a href="#CustomerList-类" class="headerlink" title="CustomerList 类"></a>CustomerList 类</h2><ul><li>CustomerList为Customer对象的管理模块，内部使用数组管理一组Customer对象</li><li>本类封装以下信息：<ul><li>Customer[] customers：用来保存客户对象的数组</li><li>int total &#x3D; 0       ：记录已保存客户对象的数量</li></ul></li><li>该类至少提供以下构造器和方法：<ul><li>public CustomerList(int totalCustomer) </li><li>public boolean addCustomer(Customer customer) </li><li>public boolean replaceCustomer(int index, Customer cust)</li><li>public boolean deleteCustomer(int index)</li><li>public Customer[] getAllCustomers() </li><li>public Customer getCustomer(int index) </li><li>public int getTotal()</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.base.learn;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * CustomerList 为 Customer 对象的管理模块</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomerList</span> &#123;<br>    <span class="hljs-keyword">private</span> Customer[] customers; <span class="hljs-comment">// 用来保存客户对象的数组</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> total; <span class="hljs-comment">// 记录已经保存客户对象的数量</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用来初始化 customers 数组的构造器</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> totalCustomer 指定数组的长度</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CustomerList</span><span class="hljs-params">(<span class="hljs-type">int</span> totalCustomer)</span> &#123;<br>        customers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Customer</span>[totalCustomer];<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将指定的客户添加到数组中</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> customer 用户</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> true:添加成功、false:添加失败</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">addCustomer</span><span class="hljs-params">(Customer customer)</span> &#123;<br>        <span class="hljs-keyword">if</span> (total &gt;= customers.length) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-comment">// 将指定客户添加到数组中，并 total +1</span><br>        customers[total++] = customer;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 修改指定位置的客户信息</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> index 索引位置</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> cust  用户</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> true:修改成功、false:修改失败</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">replaceCustomer</span><span class="hljs-params">(<span class="hljs-type">int</span> index, Customer cust)</span> &#123;<br>        <span class="hljs-comment">// index 索引取值必须在[0, total)</span><br>        <span class="hljs-keyword">if</span> (index &gt;= total || index &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        customers[index] = cust;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除指定索引位置的客户信息</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> index 索引位置</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> true:修改成功、false:修改失败</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">deleteCustomer</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-comment">// index 索引取值必须在[0, total)</span><br>        <span class="hljs-keyword">if</span> (index &gt;= total || index &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> index; i &lt; total - <span class="hljs-number">1</span>; i++) &#123;<br>            customers[i] = customers[i + <span class="hljs-number">1</span>];<br>        &#125;<br>        <span class="hljs-comment">// 最后的元素需要置为null</span><br>        customers[--total] = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取所有的客户信息</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> custs[]</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> Customer[] getAllCustomers() &#123;<br>        Customer[] custs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Customer</span>[total];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; total; i++) &#123;<br>            custs[i] = customers[i];<br>        &#125;<br>        <span class="hljs-keyword">return</span> custs;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取指定索引位置上的客户</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> index 索引位置</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 如果找到了元素，则返回；如果没有找到则返回 null</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> Customer <span class="hljs-title function_">getCustomer</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-keyword">if</span> (index &gt;= total || index &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> customers[index];<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取存储的客户数量</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> total</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getTotal</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> total;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="CustomerView-类"><a href="#CustomerView-类" class="headerlink" title="CustomerView 类"></a>CustomerView 类</h2><ul><li>CustomerView 为主模块，负责菜单的显示和处理用户操作</li><li>本类封装以下信息：<ul><li>CustomerList customerList &#x3D; new CustomerList(10);</li><li>创建最大包含10个客户对象的CustomerList 对象，供以下各成员方法使用。</li></ul></li><li>该类至少提供以下方法：<ul><li>public void enterMainMenu() </li><li>private void addNewCustomer() </li><li>private void modifyCustomer()</li><li>private void deleteCustomer()</li><li>private void listAllCustomers()</li><li>public static void main(String[] args)</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.base.learn;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * CustomerView 为主模块，负责菜单的显示和处理用户操作</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomerView</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">CustomerList</span> <span class="hljs-variable">customerList</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomerList</span>(<span class="hljs-number">10</span>);<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CustomerView</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Customer</span> <span class="hljs-variable">customer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Customer</span>(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-string">&#x27;男&#x27;</span>, <span class="hljs-number">23</span>, <span class="hljs-string">&quot;177xxxx0143&quot;</span>, <span class="hljs-string">&quot;lanxxxxxg@126.com&quot;</span>);<br>        customerList.addCustomer(customer);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 显示《客户信息管理软件》界面的方法</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">enterMainMenu</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">isFlag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">do</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;\n-----------------客户信息管理软件-----------------\n&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;                    1 添 加 客 户&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;                    2 修 改 客 户&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;                    3 删 除 客 户&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;                    4 客 户 列 表&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;                    5 退      出\n&quot;</span>);<br>            System.out.print(<span class="hljs-string">&quot;                  请选择(1-5)：&quot;</span>);<br><br>            <span class="hljs-type">char</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> CMUtility.readMenuSelection();<br>            System.out.println();<br>            <span class="hljs-keyword">switch</span> (key) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;1&#x27;</span>:<br>                    addNewCustomer();<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;2&#x27;</span>:<br>                    modifyCustomer();<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;3&#x27;</span>:<br>                    deleteCustomer();<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;4&#x27;</span>:<br>                    listAllCustomers();<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;5&#x27;</span>:<br>                    System.out.println(<span class="hljs-string">&quot;确认是否退出（Y/N）：&quot;</span>);<br>                    <span class="hljs-type">char</span> <span class="hljs-variable">yn</span> <span class="hljs-operator">=</span> CMUtility.readConfirmSelection();<br>                    <span class="hljs-keyword">if</span> (yn == <span class="hljs-string">&#x27;Y&#x27;</span>) &#123;<br>                        isFlag = <span class="hljs-literal">false</span>;<br>                    &#125;<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">while</span> (isFlag);<br><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 添加客户操作</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addNewCustomer</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;---------------------------添加客户---------------------------&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;姓名：&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> CMUtility.readString(<span class="hljs-number">10</span>);<br>        System.out.println(<span class="hljs-string">&quot;性别：&quot;</span>);<br>        <span class="hljs-type">char</span> <span class="hljs-variable">gender</span> <span class="hljs-operator">=</span> CMUtility.readChar();<br>        System.out.println(<span class="hljs-string">&quot;年龄：&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> CMUtility.readInt();<br>        System.out.println(<span class="hljs-string">&quot;电话：&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">phone</span> <span class="hljs-operator">=</span> CMUtility.readString(<span class="hljs-number">11</span>);<br>        System.out.println(<span class="hljs-string">&quot;邮箱：&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">email</span> <span class="hljs-operator">=</span> CMUtility.readString(<span class="hljs-number">30</span>);<br><br>        <span class="hljs-comment">// 将上述数据封装到对象中</span><br>        <span class="hljs-type">Customer</span> <span class="hljs-variable">customer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Customer</span>(name, gender, age, phone, email);<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">isSuccess</span> <span class="hljs-operator">=</span> customerList.addCustomer(customer);<br>        <span class="hljs-keyword">if</span> (isSuccess) &#123;<br>            System.out.println(<span class="hljs-string">&quot;---------------------------添加成功---------------------------&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;---------------------------添加失败---------------------------&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 修改客户操作,选择重新 new 对象的方式进行修改客户操作</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">modifyCustomer</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;---------------------------修改客户---------------------------&quot;</span>);<br>        Customer cust;<br>        <span class="hljs-type">int</span> number;<br>        <span class="hljs-keyword">for</span> (; ; ) &#123;<br>            System.out.print(<span class="hljs-string">&quot;请选择待修改客户的编号（-1退出）：&quot;</span>);<br>            number = CMUtility.readInt();<br>            <span class="hljs-keyword">if</span> (number == -<span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            cust = customerList.getCustomer(number - <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">if</span> (cust == <span class="hljs-literal">null</span>) &#123;<br>                System.out.println(<span class="hljs-string">&quot;无法找到指定的客户！&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 修改客户相关信息</span><br>        System.out.print(<span class="hljs-string">&quot;姓名（&quot;</span> + cust.getName() + <span class="hljs-string">&quot;):&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> CMUtility.readString(<span class="hljs-number">10</span>, cust.getName());<br>        System.out.print(<span class="hljs-string">&quot;性别（&quot;</span> + cust.getGender() + <span class="hljs-string">&quot;):&quot;</span>);<br>        <span class="hljs-type">char</span> <span class="hljs-variable">gender</span> <span class="hljs-operator">=</span> CMUtility.readChar(cust.getGender());<br>        System.out.print(<span class="hljs-string">&quot;年龄（&quot;</span> + cust.getAge() + <span class="hljs-string">&quot;):&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> CMUtility.readInt(cust.getAge());<br>        System.out.print(<span class="hljs-string">&quot;电话（&quot;</span> + cust.getPhone() + <span class="hljs-string">&quot;):&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">phone</span> <span class="hljs-operator">=</span> CMUtility.readString(<span class="hljs-number">13</span>, cust.getPhone());<br>        System.out.print(<span class="hljs-string">&quot;邮箱（&quot;</span> + cust.getEmail() + <span class="hljs-string">&quot;):&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">email</span> <span class="hljs-operator">=</span> CMUtility.readString(<span class="hljs-number">30</span>, cust.getEmail());<br><br>        <span class="hljs-type">Customer</span> <span class="hljs-variable">newCust</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Customer</span>(name, gender, age, phone, email);<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">isRepalaced</span> <span class="hljs-operator">=</span> customerList.replaceCustomer(number - <span class="hljs-number">1</span>, newCust);<br>        <span class="hljs-keyword">if</span> (isRepalaced) System.out.println(<span class="hljs-string">&quot;---------------------------修改成功---------------------------&quot;</span>);<br>        <span class="hljs-keyword">else</span> System.out.println(<span class="hljs-string">&quot;---------------------------修改失败---------------------------&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除客户操作</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteCustomer</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;---------------------------删除客户---------------------------&quot;</span>);<br>        Customer cust;<br>        <span class="hljs-type">int</span> number;<br>        <span class="hljs-keyword">for</span> (; ; ) &#123;<br>            System.out.print(<span class="hljs-string">&quot;请选择待删除改客户的编号（-1退出）：&quot;</span>);<br>            number = CMUtility.readInt();<br>            <span class="hljs-keyword">if</span> (number == -<span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            cust = customerList.getCustomer(number - <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">if</span> (cust == <span class="hljs-literal">null</span>) &#123;<br>                System.out.println(<span class="hljs-string">&quot;无法找到指定的客户！&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;确认是否删除（Y/N）&quot;</span>);<br>        <span class="hljs-type">char</span> <span class="hljs-variable">isDelete</span> <span class="hljs-operator">=</span> CMUtility.readConfirmSelection();<br>        <span class="hljs-keyword">if</span> (isDelete == <span class="hljs-string">&#x27;Y&#x27;</span>) &#123;<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">deleteSuccess</span> <span class="hljs-operator">=</span> customerList.deleteCustomer(number - <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">if</span>(deleteSuccess) System.out.println(<span class="hljs-string">&quot;---------------------------删除成功---------------------------&quot;</span>);<br>            <span class="hljs-keyword">else</span> System.out.println(<span class="hljs-string">&quot;---------------------------删除失败---------------------------&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 显示客户列表操作</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listAllCustomers</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;---------------------------客户列表---------------------------&quot;</span>);<br>        <span class="hljs-comment">// 获取用户数量</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">total</span> <span class="hljs-operator">=</span> customerList.getTotal();<br>        <span class="hljs-comment">// 获取用户列表</span><br>        Customer[] custs = customerList.getAllCustomers();<br><br>        <span class="hljs-keyword">if</span> (total == <span class="hljs-number">0</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;没有客户记录...&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;编号\t\t姓名\t\t性别\t\t年龄\t\t电话\t\t\t邮箱&quot;</span>);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; custs.length; i++) &#123;<br>                <span class="hljs-type">Customer</span> <span class="hljs-variable">cust</span> <span class="hljs-operator">=</span> custs[i];<br>                System.out.println((i + <span class="hljs-number">1</span>) + <span class="hljs-string">&quot;\t\t&quot;</span> + cust.getName() + <span class="hljs-string">&quot;\t\t&quot;</span> + cust.getGender()<br>                        + <span class="hljs-string">&quot;\t\t&quot;</span> + cust.getAge() + <span class="hljs-string">&quot;\t\t&quot;</span> + cust.getPhone() + <span class="hljs-string">&quot;\t\t&quot;</span> + cust.getEmail());<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;-------------------------客户列表完成--------------------------&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">CustomerView</span> <span class="hljs-variable">view</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomerView</span>();<br>        view.enterMainMenu();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaSE</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Java｜面向对象（上）</title>
    <link href="/2024/07/31/10333668.html"/>
    <url>/2024/07/31/10333668.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>人有不为也，而后可以有为</p></blockquote><p>面向对象内容的三条主线：</p><ol><li>Java 类及类的成员：属性、方法、构造器、代码块、内部类</li><li>面向对象的三大特征：封装、继承、多态性</li><li>其它关键字：this、super、static、final、abstract、interface、package、import</li></ol><p>面向过程（POP）与面向对象（OOP）</p><ul><li>二者都是一种思想，面向对象是相对于面向过程而言的。<ul><li>面向过程，强调的是功能行为，以函数为最小单位，考虑怎么做。</li><li>面向对象，将功能封装进对象，强调具备了功能的对象，以类 &#x2F; 对象为最小单位，考虑谁来做。</li></ul></li><li>面向对象更加强调运用人类在日常的思维逻辑中采用的思想方法与原则，如抽象、分类、继承、聚合、多态等</li></ul><h1 id="1-类和对象"><a href="#1-类和对象" class="headerlink" title="1. 类和对象"></a>1. 类和对象</h1><p>类(Class)和对象(Object)是面向对象的核心概念</p><ul><li>类是对一类事物的描述，是抽象的、概念上的定义</li><li>对象是实际存在的该类事物的每个个体，因而也称为实例(instance)</li></ul><p>Java 类及类的成员</p><ul><li><strong>属性</strong>：对应类中的成员变量</li><li><strong>行为</strong>：对应类中的成员方法</li><li><img src="/../img/Java%EF%BD%9C%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%EF%BC%88%E4%B8%8A%EF%BC%89/image.png" alt="Java 类及类的成员"></li></ul><p><img src="/../img/Java%EF%BD%9C%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%EF%BC%88%E4%B8%8A%EF%BC%89/image-1.png" alt="Java 类及类的成员"></p><h1 id="2-类的成员：属性"><a href="#2-类的成员：属性" class="headerlink" title="2. 类的成员：属性"></a>2. 类的成员：属性</h1><h2 id="2-1-语法格式"><a href="#2-1-语法格式" class="headerlink" title="2.1 语法格式"></a>2.1 语法格式</h2><p><img src="/../img/Java%EF%BD%9C%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%EF%BC%88%E4%B8%8A%EF%BC%89/image-2.png" alt="语法格式"></p><h2 id="2-2-变量的分类"><a href="#2-2-变量的分类" class="headerlink" title="2.2 变量的分类"></a>2.2 变量的分类</h2><p><img src="/../img/Java%EF%BD%9C%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%EF%BC%88%E4%B8%8A%EF%BC%89/image-3.png" alt="变量的分类"></p><h2 id="2-3-变量的区别"><a href="#2-3-变量的区别" class="headerlink" title="2.3 变量的区别"></a>2.3 变量的区别</h2><p><img src="/../img/Java%EF%BD%9C%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%EF%BC%88%E4%B8%8A%EF%BC%89/image-4.png" alt="变量的区别"></p><h2 id="2-4-默认初始化值"><a href="#2-4-默认初始化值" class="headerlink" title="2.4 默认初始化值"></a>2.4 默认初始化值</h2><p>当一个对象被创建时，会对其中各种类型的成员变量自动进行初始化赋值。除了基本数据类型之外的变量类型都是引用类型</p><p><img src="/../img/Java%EF%BD%9C%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%EF%BC%88%E4%B8%8A%EF%BC%89/image-5.png" alt="默认初始化值"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.base.learn;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        <span class="hljs-comment">// 默认初始化的情况</span><br>        System.out.println(user.name); <span class="hljs-comment">// null</span><br>        System.out.println(user.age); <span class="hljs-comment">// 0</span><br>        System.out.println(user.isMail); <span class="hljs-comment">// false</span><br><br>        user.talk(<span class="hljs-string">&quot;汉语&quot;</span>); <span class="hljs-comment">// 我们使用汉语交流</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-comment">// 属性</span><br>    String name;<br>    <span class="hljs-type">int</span> age;<br>    <span class="hljs-type">boolean</span> isMail;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">talk</span><span class="hljs-params">(String language)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;我们使用&quot;</span> + language + <span class="hljs-string">&quot;交流&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 局部变量</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">food</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;烙饼&quot;</span>;<br>        System.out.println(<span class="hljs-string">&quot;北方人喜欢吃 &quot;</span> + food);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="3-类的成员：方法"><a href="#3-类的成员：方法" class="headerlink" title="3. 类的成员：方法"></a>3. 类的成员：方法</h1><p>什么是方法(method、函数)</p><ol><li>方法是类或对象行为特征的抽象，用来完成某个功能操作。在某些语言中 也称为函数或过程</li><li>将功能封装为方法的目的是，可以实现代码重用，简化代码</li><li>Java里的方法不能独立存在，所有的方法必须定义在类里</li></ol><h2 id="3-1-方法的声明"><a href="#3-1-方法的声明" class="headerlink" title="3.1 方法的声明"></a>3.1 方法的声明</h2><p>![方法的声明(..&#x2F;img&#x2F;Java｜面向对象（上）&#x2F;image-6.png)</p><h2 id="3-2-方法的返回值"><a href="#3-2-方法的返回值" class="headerlink" title="3.2 方法的返回值"></a>3.2 方法的返回值</h2><table><thead><tr><th></th><th>无返回值</th><th>有返回值</th></tr></thead><tbody><tr><td>无形参</td><td>void 方法名() {}</td><td>返回值的类型 方法名() {}</td></tr><tr><td>有行参</td><td>void 方法名(行参列表) {}</td><td>返回值的类型 方法名(行参列表) {}</td></tr></tbody></table><p>返回值类型： 有返回值  vs 没有返回值</p><ul><li>如果方法有返回值，则必须在方法声明时，指定返回值的类型。同时，方法中，需要使用 return 关键字来返回指定类型的变量或常量：“return 数据”</li><li>如果方法没有返回值，则方法声明时，使用 void 来表示。通常，没有返回值的方法中，就不需要使用return.但是，如果使用的话，只能“return;”表示结束此方法的意思</li></ul><h2 id="3-3-匿名对象的使用"><a href="#3-3-匿名对象的使用" class="headerlink" title="3.3 匿名对象的使用"></a>3.3 匿名对象的使用</h2><p>匿名对象，即没有名字的对象，指的是在创建一个对象时，只有创建语句，却没有将其地址赋值给某个变量</p><p>总结：</p><ul><li>匿名对象作为对象，也具有普通对象的所有功能</li><li>每一次使用匿名对象，都是新 new 出来新对象</li><li>匿名对象执行完毕，由于没有其它引用，会被 Java 的垃圾回收机制自动进行回收</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.base.learn;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InstanceTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Phone</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phone</span>();<br>        <span class="hljs-comment">// 引用类型的变量，只可能是存储两类值：null / 地址值（含变量的类型）</span><br>        System.out.println(p);<br>        p.playGame();<br>        p.sendEmail();<br>        System.out.println(<span class="hljs-string">&quot;------分割线-------&quot;</span>);<br><br>        <span class="hljs-comment">// 匿名</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phone</span>().sendEmail();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phone</span>().playGame();<br>        System.out.println(<span class="hljs-string">&quot;------分割线-------&quot;</span>);<br><br>        <span class="hljs-comment">// 匿名对象的使用举例</span><br>        <span class="hljs-type">PhoneMail</span> <span class="hljs-variable">phoneMail</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PhoneMail</span>();<br>        phoneMail.show(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Phone</span>());<br><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">PhoneMail</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">(Phone phone)</span> &#123;<br>        phone.sendEmail();<br>        phone.playGame();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Phone</span> &#123;<br>    <span class="hljs-type">double</span> price;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendEmail</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;发送邮件&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">playGame</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;打游戏&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showPrice</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;手机价格为：&quot;</span> + price);<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">com.base.learn.Phone@29453f44</span><br><span class="hljs-comment">打游戏</span><br><span class="hljs-comment">发送邮件</span><br><span class="hljs-comment">------分割线-------</span><br><span class="hljs-comment">发送邮件</span><br><span class="hljs-comment">打游戏</span><br><span class="hljs-comment">------分割线-------</span><br><span class="hljs-comment">发送邮件</span><br><span class="hljs-comment">打游戏</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h2 id="3-4-方法的重载"><a href="#3-4-方法的重载" class="headerlink" title="3.4 方法的重载"></a>3.4 方法的重载</h2><p>Java 允许同一个类中定义多个同名方法，只要它们的形参列表不同即可</p><p>如果同一个类中包含了两个或两个以上方法名相同的方法，但形参列表不同，这种情况被称为方法重载<code>overload</code></p><p>例如，在 JDK 的 java.io.PrintStream 中定义了十多个同名的 println() 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">println</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>&#123;…&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">println</span><span class="hljs-params">(<span class="hljs-type">double</span> d)</span>&#123;…&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">println</span><span class="hljs-params">(String s)</span>&#123;…&#125;<br></code></pre></td></tr></table></figure><p>这些方法完成的功能类似，都是格式化输出。根据参数的不同来区分它们，以进行不同的格式化处理和输出。它们之间就构成了方法的重载。实际调用时，根据实参的类型来决定调用哪一个方法。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-number">102</span>);    <span class="hljs-comment">// 调用println(int i)方法</span><br>System.out.println(<span class="hljs-number">102.25</span>);    <span class="hljs-comment">// 调用println(double d)方法</span><br>System.out.println(<span class="hljs-string">&quot;价格为 102.25&quot;</span>);    <span class="hljs-comment">// 调用println(String s)方法</span><br></code></pre></td></tr></table></figure><p>方法重载的要求是两同一不同：同一个类中方法名相同，参数列表不同。至于方法的其他部分，如方法返回值类型、修饰符等，与方法重载没有任何关系。</p><p>使用方法重载其实就是避免出现繁多的方法名，有些方法的功能是相似的，如果重新建立一个方法，重新取个方法名称，会降低程序可读性。</p><p>例子：<br>在比较数值时，数值的个数和类型是不固定的，可能是两个 int 类型的数值，也可能是两个 double 类型的数值，或者是两个 double、一个 int 类型的数值；在这种情况下就可以使用方法的重载来实现数值之间的比较功能。具体实现代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OverLoading</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">max</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>        <span class="hljs-comment">// 含有两个int类型参数的方法</span><br>        System.out.println(a &gt; b ? a : b);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">max</span><span class="hljs-params">(<span class="hljs-type">double</span> a, <span class="hljs-type">double</span> b)</span> &#123;<br>        <span class="hljs-comment">// 含有两个double类型参数的方法</span><br>        System.out.println(a &gt; b ? a : b);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">max</span><span class="hljs-params">(<span class="hljs-type">double</span> a, <span class="hljs-type">double</span> b, <span class="hljs-type">int</span> c)</span> &#123;<br>        <span class="hljs-comment">// 含有两个double类型参数和一个int类型参数的方法</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> (<span class="hljs-type">double</span>) (a &gt; b ? a : b);<br>        System.out.println(c &gt; max ? c : max);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">OverLoading</span> <span class="hljs-variable">ol</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OverLoading</span>();<br>        System.out.print(<span class="hljs-string">&quot;1 与 5 比较，较大的是：&quot;</span>);<br>        ol.max(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>);<br>        System.out.print(<span class="hljs-string">&quot;5.205 与 5.8 比较，较大的是：&quot;</span>);<br>        ol.max(<span class="hljs-number">5.205</span>, <span class="hljs-number">5.8</span>);<br>        System.out.print(<span class="hljs-string">&quot;2.15、0.05、58 中，较大的是：&quot;</span>);<br>        ol.max(<span class="hljs-number">2.15</span>, <span class="hljs-number">0.05</span>, <span class="hljs-number">58</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 1 与 5 比较，较大的是：5</span><br><span class="hljs-comment"> * 5.205 与 5.8 比较，较大的是：5.8</span><br><span class="hljs-comment"> * 2.15、0.05、58 中，较大的是：58.0</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><p>注：<a href="https://c.biancheng.net/view/998.html">摘自C语言中文网</a></p><h2 id="3-5-可变个数的行参"><a href="#3-5-可变个数的行参" class="headerlink" title="3.5 可变个数的行参"></a>3.5 可变个数的行参</h2><p>JavaSE 5.0 中提供了 Varargs(variable number of arguments) 机制，允许直接定义能和多个实参相匹配的形参。从而，可以用一种更简单的方式，来传递个数可变的实参</p><p>JDK 5.0以前：采用数组形参来定义方法，传入多个同一类型变量 public static void test(int a ,String[] books);</p><p>JDK5.0：采用可变个数形参来定义方法，传入多个同一类型变量 public static void test(int a ,String…books);</p><ol><li>举例：<code>public void show(int ... a)&#123;&#125;</code></li><li>格式：数据类型 … 变量名</li><li>当调用可变个数行参的方法时，传入的参数的个数可以是：0个，1个，2个…</li><li>可变个数形参的方法与本类中方法名相同，形参不同的方法直接构成重载</li><li>可变个数形参的方法与本类中方法名相同，形参类型也相同的数组之间不构成重载，二者不可共存</li><li>假如要获取每一个填进去的元素（则把这种形式的变量当作一个数组就行）</li><li>方法的参数部分有可变行参，需要放在行参声明的末尾，最多只能声明一个可变行参</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.base.learn;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MethodArgs</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">MethodArgs</span> <span class="hljs-variable">methodArgs</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MethodArgs</span>();<br>        methodArgs.show(<span class="hljs-number">12</span>);<br>        methodArgs.show(<span class="hljs-string">&quot;hello&quot;</span>);<br>        methodArgs.show(<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-string">&quot;world&quot;</span>); <br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;show(int i)&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">(String s)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;show(String s)&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">(String ... strs)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;show(String ... strs)&quot;</span>);<br>        <span class="hljs-keyword">for</span> (String i : strs) &#123;<br>            System.out.println(i);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 此方法于上一方法不可共存</span><br>    <span class="hljs-comment">// public void show(String[] strs)&#123;&#125;</span><br><br>    <span class="hljs-comment">// 可变行参需要声明在末尾</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">(<span class="hljs-type">int</span> i, String ... strs)</span> &#123;&#125;<br><br>    <span class="hljs-comment">// 错误的举例</span><br>    <span class="hljs-comment">// public void show(String ... strs, int i) &#123;&#125;</span><br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * show(int i)</span><br><span class="hljs-comment"> * show(String s)</span><br><span class="hljs-comment"> * show(String ... strs)</span><br><span class="hljs-comment"> * hello</span><br><span class="hljs-comment"> * world</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><h2 id="3-6-方法参数的值传递机制"><a href="#3-6-方法参数的值传递机制" class="headerlink" title="3.6 方法参数的值传递机制"></a>3.6 方法参数的值传递机制</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.base.learn;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 关于变量的总结：</span><br><span class="hljs-comment"> *  如果变量是基本数据类型，此时赋值的是变量所保存的数据值</span><br><span class="hljs-comment"> *  如果变量是引用数据类型，此时赋值的是变量所保存的数据的地址值</span><br><span class="hljs-comment"> *  </span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ValueTransferTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;*********** 基本数据类型 ***********&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> m;<br>        System.out.println(<span class="hljs-string">&quot;m = &quot;</span> + m + <span class="hljs-string">&quot;, n = &quot;</span> + n);<br>        n = <span class="hljs-number">20</span>;<br>        System.out.println(<span class="hljs-string">&quot;m = &quot;</span> + m + <span class="hljs-string">&quot;, n = &quot;</span> + n);<br><br>        System.out.println(<span class="hljs-string">&quot;*********** 引用数据类型 ***********&quot;</span>);<br>        <span class="hljs-type">Order</span> <span class="hljs-variable">o1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Order</span>();<br>        o1.orderId = <span class="hljs-number">10001</span>;<br><br>        <span class="hljs-comment">// 赋值后，o1 和 o2 的地址值相同，都指向了堆空间中同一个对象实体</span><br>        <span class="hljs-type">Order</span> <span class="hljs-variable">o2</span> <span class="hljs-operator">=</span> o1;<br>        System.out.println(<span class="hljs-string">&quot;o1.orderId = &quot;</span> + o1.orderId + <span class="hljs-string">&quot;,o2.orderId = &quot;</span> + o2.orderId);<br><br>        o2.orderId = <span class="hljs-number">10002</span>;<br>        System.out.println(<span class="hljs-string">&quot;o1.orderId = &quot;</span> + o1.orderId + <span class="hljs-string">&quot;,o2.orderId = &quot;</span> + o2.orderId);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Order</span> &#123;<br>    <span class="hljs-type">int</span> orderId;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    *********** 基本数据类型 ***********</span><br><span class="hljs-comment">    m = 10, n = 10</span><br><span class="hljs-comment">    m = 10, n = 20</span><br><span class="hljs-comment">    *********** 引用数据类型 ***********</span><br><span class="hljs-comment">    o1.orderId = 10001,o2.orderId = 10001</span><br><span class="hljs-comment">    o1.orderId = 10002,o2.orderId = 10002</span><br><span class="hljs-comment">*/</span><br><br></code></pre></td></tr></table></figure><h3 id="3-6-1-基本数据类型"><a href="#3-6-1-基本数据类型" class="headerlink" title="3.6.1 基本数据类型"></a>3.6.1 基本数据类型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.base.learn;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 方法的行参的值传递机制：值传递</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 1. 行参：方法定义时，声明的小括号内的参数</span><br><span class="hljs-comment"> *    实参：方法调用时，实际传递给行参的数据</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 2. 值传递机制：</span><br><span class="hljs-comment"> *  如果参数是基本数据类型，此时实参赋值给行参的是实参真实存储的数据值</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ValueTransferTest1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>        System.out.println(<span class="hljs-string">&quot;m = &quot;</span> + m + <span class="hljs-string">&quot;, n = &quot;</span> + n); <span class="hljs-comment">// m = 10, n = 20</span><br><br>        <span class="hljs-comment">// 交换两个变量的值</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> m;<br>        m = n;<br>        n = temp;<br>        System.out.println(<span class="hljs-string">&quot;m = &quot;</span> + m + <span class="hljs-string">&quot;, n = &quot;</span> + n); <span class="hljs-comment">// m = 20, n = 10</span><br><br>        ValueTransferTest1 test1= <span class="hljs-keyword">new</span> <span class="hljs-title class_">ValueTransferTest1</span>();<br>        test1.swap(m, n);<br><br>        System.out.println(<span class="hljs-string">&quot;m = &quot;</span> + m + <span class="hljs-string">&quot;, n = &quot;</span> + n); <span class="hljs-comment">// m = 20, n = 10</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">swap</span><span class="hljs-params">(<span class="hljs-type">int</span> m, <span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> m;<br>        m = n;<br>        n = temp;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="/../img/Java%EF%BD%9C%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%EF%BC%88%E4%B8%8A%EF%BC%89/image-7.png" alt="说明图"></p><h3 id="3-6-2-引用数据类型"><a href="#3-6-2-引用数据类型" class="headerlink" title="3.6.2 引用数据类型"></a>3.6.2 引用数据类型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.base.learn;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 如果参数是引用数据类型，此时实参赋值给行参的是实参存储数据的地址值</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ValueTransferTest2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Data</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Data</span>();<br>        data.m = <span class="hljs-number">10</span>;<br>        data.n = <span class="hljs-number">20</span>;<br>        System.out.println(<span class="hljs-string">&quot;m = &quot;</span> + data.m + <span class="hljs-string">&quot;, n = &quot;</span> + data.n); <span class="hljs-comment">// m = 10, n = 20</span><br><br>        <span class="hljs-type">ValueTransferTest2</span> <span class="hljs-variable">test2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ValueTransferTest2</span>();<br>        test2.swap(data);<br>        System.out.println(<span class="hljs-string">&quot;m = &quot;</span> + data.m + <span class="hljs-string">&quot;, n = &quot;</span> + data.n); <span class="hljs-comment">// m = 20, n = 10</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">swap</span><span class="hljs-params">(Data data)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> data.m;<br>        data.m = data.n;<br>        data.n = temp;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Data</span> &#123;<br>    <span class="hljs-type">int</span> m;<br>    <span class="hljs-type">int</span> n;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/../img/Java%EF%BD%9C%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%EF%BC%88%E4%B8%8A%EF%BC%89/image-8.png" alt="说明图"></p><h3 id="3-6-3-练习1"><a href="#3-6-3-练习1" class="headerlink" title="3.6.3 练习1"></a>3.6.3 练习1</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.base.learn;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ValueTransferTest3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ValueTransferTest3</span> <span class="hljs-variable">test3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ValueTransferTest3</span>();<br>        test3.first();<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">first</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br>        <span class="hljs-type">Value</span> <span class="hljs-variable">v</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Value</span>();<br>        v.i = <span class="hljs-number">25</span>;<br>        second(v, i);<br>        System.out.println(v.i); <span class="hljs-comment">// 20</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">second</span><span class="hljs-params">(Value v, <span class="hljs-type">int</span> i)</span> &#123;<br>        i = <span class="hljs-number">0</span>;<br>        v.i = <span class="hljs-number">20</span>;<br>        <span class="hljs-type">Value</span> <span class="hljs-variable">val</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Value</span>();<br>        v = val;<br>        System.out.println(v.i + <span class="hljs-string">&quot; &quot;</span> + i); <span class="hljs-comment">// 15, 0</span><br><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Value</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">15</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="/../img/Java%EF%BD%9C%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%EF%BC%88%E4%B8%8A%EF%BC%89/image-9.png" alt="说明图"></p><h3 id="3-6-4-练习2"><a href="#3-6-4-练习2" class="headerlink" title="3.6.4 练习2"></a>3.6.4 练习2</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.base.learn;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 使用 System.exit(0); 终止当前 jvm 的执行</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        method(a, b); <span class="hljs-comment">// 需要在 method 方法被调用之后，仅打印出 a=100, b=200 ，请写出 method 方法的代码</span><br>        System.out.println(<span class="hljs-string">&quot;a = &quot;</span> + a);<br>        System.out.println(<span class="hljs-string">&quot;b = &quot;</span> + b);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>        a = a * <span class="hljs-number">10</span>;<br>        b = b * <span class="hljs-number">10</span>;<br>        System.out.println(<span class="hljs-string">&quot;a = &quot;</span> + a);<br>        System.out.println(<span class="hljs-string">&quot;b = &quot;</span> + b);<br>        System.exit(<span class="hljs-number">0</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-6-5-练习3"><a href="#3-6-5-练习3" class="headerlink" title="3.6.5 练习3"></a>3.6.5 练习3</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.base.learn;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 定义一个int型的数组：int[] arr = new int[]&#123;12,3,3,34,56,77,432&#125;;</span><br><span class="hljs-comment"> * 让数组的每个位置上的值去除以首位置的元素，得到的结果，作为该位置上的新值。遍历新的数组。</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">12</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">34</span>, <span class="hljs-number">56</span>, <span class="hljs-number">77</span>, <span class="hljs-number">432</span>&#125;;<br><br>        <span class="hljs-comment">// 错误的写法：第一次除完 arr[0] = 1 了</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            arr[i] = arr[i] / arr[<span class="hljs-number">0</span>];<br>        &#125;<br>        System.out.println(Arrays.toString(arr)); <span class="hljs-comment">// [1, 3, 3, 34, 56, 77, 432]</span><br><br>        <span class="hljs-comment">// 正确的写法1：倒着来</span><br>        <span class="hljs-type">int</span>[] arr2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">12</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">34</span>, <span class="hljs-number">56</span>, <span class="hljs-number">77</span>, <span class="hljs-number">432</span>&#125;;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> arr2.length - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>            arr2[i] = arr2[i] / arr2[<span class="hljs-number">0</span>];<br>        &#125;<br>        System.out.println(Arrays.toString(arr2)); <span class="hljs-comment">// [1, 0, 0, 2, 4, 6, 36]</span><br><br><br>        <span class="hljs-comment">// 正确的写法2：用临时变量存储 arr3[0]</span><br>        <span class="hljs-type">int</span>[] arr3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">12</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">34</span>, <span class="hljs-number">56</span>, <span class="hljs-number">77</span>, <span class="hljs-number">432</span>&#125;;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> arr3[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            arr3[i] = arr3[i] / temp;<br>        &#125;<br>        System.out.println(Arrays.toString(arr3)); <span class="hljs-comment">// [1, 0, 0, 2, 4, 6, 36]</span><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-6-6-练习4"><a href="#3-6-6-练习4" class="headerlink" title="3.6.6 练习4"></a>3.6.6 练习4</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.base.learn;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br>        System.out.println(arr1); <span class="hljs-comment">// [I@29453f44</span><br><br>        <span class="hljs-type">char</span>[] arr2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[]&#123;<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>&#125;;<br>        System.out.println(arr2); <span class="hljs-comment">// abc</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">println</span><span class="hljs-params">(<span class="hljs-type">char</span> x[])</span> &#123;<br>    <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>) &#123;<br>        print(x);<br>        newLine();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-6-7-练习5"><a href="#3-6-7-练习5" class="headerlink" title="3.6.7 练习5"></a>3.6.7 练习5</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.base.exer;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * (1)定义一个Circle类，包含一个 double 型的 radius 属性代表圆的半径，一个 findArea() 方法返回圆的面积。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Circle</span> &#123;<br>    <span class="hljs-type">double</span> radius; <span class="hljs-comment">// 半径</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">findArea</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> Math.PI * radius * radius;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.base.exer;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * (2) 定义一个类 PassObject，在类中定义一个方法 printAreas()，该方法的定义如下：</span><br><span class="hljs-comment"> * public void printAreas(Circle c, int time)</span><br><span class="hljs-comment"> * 在 printAreas 方法中打印输出 1 到 time 之间的每个整数半径值，以及对应的面积。</span><br><span class="hljs-comment"> * 例如，times 为5，则输出半径 1，2，3，4，5以及对应的圆面积。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * (3) 在main方法中调用 printAreas() 方法，调用完毕后输出当前半径值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PassObject</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">PassObject</span> <span class="hljs-variable">test</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PassObject</span>();<br>        <span class="hljs-type">Circle</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Circle</span>();<br>        test.printAreas(c, <span class="hljs-number">5</span>);<br>        System.out.println(<span class="hljs-string">&quot;no radius is:&quot;</span> + c.radius);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printAreas</span><span class="hljs-params">(Circle c, <span class="hljs-type">int</span> time)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Radius\t\tAreas&quot;</span>);<br><br>        <span class="hljs-comment">// 设置圆的半径</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= time; i++) &#123;<br>            c.radius = i;<br>            System.out.println(c.radius + <span class="hljs-string">&quot;\t\t&quot;</span> + c.findArea());<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">RadiusAreas</span><br><span class="hljs-comment">1.03.141592653589793</span><br><span class="hljs-comment">2.012.566370614359172</span><br><span class="hljs-comment">3.028.274333882308138</span><br><span class="hljs-comment">4.050.26548245743669</span><br><span class="hljs-comment">5.078.53981633974483</span><br><span class="hljs-comment">no radius is:5.0</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h2 id="3-7-递归调用"><a href="#3-7-递归调用" class="headerlink" title="3.7 递归调用"></a>3.7 递归调用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.base.exer1;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 递归方法的使用(了解)</span><br><span class="hljs-comment"> * 1.递归方法：一个方法体内调用它自身。</span><br><span class="hljs-comment"> * 2.方法递归包含了一种隐式的循环，它会重复执行某段代码，但这种重复执行无须循环控制。</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 3.递归一定要向已知方向递归，否则这种递归就变成了无穷递归，类似于死循环。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RecursionTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 例1：计算 1-100 之间所有自然数的和</span><br>        <span class="hljs-comment">// 方法1：for 循环</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">100</span>; i++) &#123;<br>            sum += i;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;sum = &quot;</span> + sum);<br><br>        <span class="hljs-comment">// 方法2：递归调用</span><br>        <span class="hljs-type">RecursionTest</span> <span class="hljs-variable">test</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RecursionTest</span>();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum2</span> <span class="hljs-operator">=</span> test.getSum(<span class="hljs-number">100</span>);<br>        System.out.println(<span class="hljs-string">&quot;sum2 = &quot;</span> + sum2);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSum</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> n + getSum(n - <span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// sum = 5050</span><br><span class="hljs-comment">// sum2 = 5050</span><br></code></pre></td></tr></table></figure><h3 id="3-7-1-练习1"><a href="#3-7-1-练习1" class="headerlink" title="3.7.1 练习1"></a>3.7.1 练习1</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.base.exer1;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 已知有一个数列：f(0) = 1,f(1) = 4,f(n+2)=2*f(n+1) + f(n),其中 n 是大于 0 的整数，求 f(10) 的值。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RecursionTest1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">RecursionTest1</span> <span class="hljs-variable">test1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RecursionTest1</span>();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> test1.f(<span class="hljs-number">10</span>);<br>        System.out.println(a); <span class="hljs-comment">// 10497</span><br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">f</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">4</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">2</span> * f(n - <span class="hljs-number">1</span>) + f(n - <span class="hljs-number">2</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-7-2-练习2"><a href="#3-7-2-练习2" class="headerlink" title="3.7.2 练习2"></a>3.7.2 练习2</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.base.exer1;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 斐波那契数列(Fibonacci)</span><br><span class="hljs-comment"> * 问：什么是斐波那契数列？</span><br><span class="hljs-comment"> * 答：一个数等于前两个数之和（例如：1 1 2 3 5 8 13 21 34 55）</span><br><span class="hljs-comment"> * 问题：计算斐波那契数列的第n个值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RecursionTest2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">RecursionTest2</span> <span class="hljs-variable">test2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RecursionTest2</span>();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> test2.f(<span class="hljs-number">10</span>);<br>        System.out.println(a); <span class="hljs-comment">// 55</span><br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">f</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span> || n == <span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> f(n - <span class="hljs-number">1</span>) + f(n - <span class="hljs-number">2</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-8-访问控制修饰符"><a href="#3-8-访问控制修饰符" class="headerlink" title="3.8 访问控制修饰符"></a>3.8 访问控制修饰符</h2><table><thead><tr><th><strong>访问级别</strong></th><th><strong>访问控制修饰符</strong></th><th><strong>同类</strong></th><th><strong>同包</strong></th><th><strong>子类</strong></th><th><strong>不同包</strong></th></tr></thead><tbody><tr><td>公开</td><td>public</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td></tr><tr><td>受保护</td><td>protected</td><td>✓</td><td>✓</td><td>✓</td><td><strong>✕</strong></td></tr><tr><td>默认</td><td>无</td><td>✓</td><td>✓</td><td><strong>✕</strong></td><td><strong>✕</strong></td></tr><tr><td>私有</td><td>private</td><td>✓</td><td><strong>✕</strong></td><td><strong>✕</strong></td><td><strong>✕</strong></td></tr></tbody></table><h2 id="3-9-构造方法"><a href="#3-9-构造方法" class="headerlink" title="3.9 构造方法"></a>3.9 构造方法</h2><h3 id="3-9-1-构造方法总结"><a href="#3-9-1-构造方法总结" class="headerlink" title="3.9.1 构造方法总结"></a>3.9.1 构造方法总结</h3><p>构造方法是类的一种特殊方法，用来初始化类的一个新的对象，在创建对象（new 运算符）之后自动调用。<a href="http://c.biancheng.net/java/">Java</a> 中的每个类都有一个默认的构造方法，并且可以有一个以上的构造方法。</p><p>Java 构造方法有以下特点：</p><ul><li>方法名必须与类名相同</li><li>可以有 0 个、1 个或多个参数</li><li>没有任何返回值，包括 void</li><li>默认返回类型就是对象类型本身</li><li>只能与 new 运算符结合使用</li></ul><p>一旦显示的定义了类的构造器之后，系统不再提供默认的空参构造器。</p><p>值得注意的是，如果为构造方法定义了返回值类型或使用 void 声明构造方法没有返回值，编译时不会出错，但 Java 会把这个所谓的构造方法当成普通方法来处理。</p><p>这时候大家可能会产生疑问，构造方法不是没有返回值吗？为什么不能用 void 声明呢？</p><p>简单的说，这是 Java 的语法规定。实际上，类的构造方法是有返回值的，当使用 new 关键字来调用构造方法时，构造方法返回该类的实例，可以把这个类的实例当成构造器的返回值，因此构造器的返回值类型总是当前类，无须定义返回值类型。但必须注意不要在构造方法里使用 return 来返回当前类的对象，因为构造方法的返回值是隐式的。</p><p>注意：构造方法不能被 static、final、synchronized、abstract 和 native（类似于 abstract）修饰。构造方法用于初始化一个新对象，所以用 static 修饰没有意义。构造方法不能被子类继承，所以用 final 和 abstract 修饰没有意义。多个线程不会同时创建内存地址相同的同一个对象，所以用 synchronized 修饰没有必要。</p><p>在一个类中定义多个具有不同参数的同名方法，这就是方法的重载</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WorkerTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;---------带有一个参数的构造方法---------&quot;</span>);<br>        <span class="hljs-type">Worker</span> <span class="hljs-variable">worker1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Worker</span>(<span class="hljs-string">&quot;张三&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;大家好！我是新来的员工，我叫 &quot;</span>+ worker1.name + <span class="hljs-string">&quot;，今年 &quot;</span> + worker1.age + <span class="hljs-string">&quot; 岁。&quot;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;---------带有一个参数的构造方法---------&quot;</span>);<br>        <span class="hljs-type">Worker</span> <span class="hljs-variable">worker2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Worker</span>(<span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-number">18</span>);<br>        System.out.println(<span class="hljs-string">&quot;大家好！我是新来的员工，我叫 &quot;</span>+ worker2.name + <span class="hljs-string">&quot;，今年 &quot;</span> + worker2.age + <span class="hljs-string">&quot; 岁。&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Worker</span>&#123;<br>    <span class="hljs-keyword">public</span> String name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-comment">// 定义带有一个参数的构造方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Worker</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-comment">// 定义带有两个参数的构造方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Worker</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">---------带有一个参数的构造方法---------</span><br><span class="hljs-comment">大家好！我是新来的员工，我叫 张三，今年 0 岁。</span><br><span class="hljs-comment">---------带有一个参数的构造方法---------</span><br><span class="hljs-comment">大家好！我是新来的员工，我叫 李四，今年 18 岁。</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h3 id="3-9-2-总结属性赋值过程"><a href="#3-9-2-总结属性赋值过程" class="headerlink" title="3.9.2 总结属性赋值过程"></a>3.9.2 总结属性赋值过程</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.base.learn;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 总结:属性赋值的先后顺序</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * ① 默认初始化值</span><br><span class="hljs-comment"> * ② 显式初始化</span><br><span class="hljs-comment"> * ③ 构造器中赋值</span><br><span class="hljs-comment"> * ④ 通过&quot;对象.方法&quot; 或 “对象.属性”的方式，赋值</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 以上操作的先后顺序:① - ② - ③ - ④</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">u</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        System.out.println(u.age); <span class="hljs-comment">// 1</span><br><br>        <span class="hljs-type">User</span> <span class="hljs-variable">u2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">2</span>);<br>        System.out.println(u2.age); <span class="hljs-comment">// 2</span><br>        u2.setAge(<span class="hljs-number">3</span>);<br>        System.out.println(u2.age); <span class="hljs-comment">// 3</span><br><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    String name;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-9-3-JavaBean"><a href="#3-9-3-JavaBean" class="headerlink" title="3.9.3  JavaBean"></a>3.9.3  JavaBean</h3><blockquote><p>JavaBeans 是 Java 中一种特殊的类，可以将多个对象封装到一个对象（bean）中。特点是可<a href="https://so.csdn.net/so/search?q=%E5%BA%8F%E5%88%97%E5%8C%96&spm=1001.2101.3001.7020">序列化</a>，提供无参构造器，提供 <code>getter</code> 方法和 <code>setter</code> 方法访问对象的属性。名称中的 <code>Bean</code> 是用于 Java 的可重用软件组件的惯用叫法。</p></blockquote><blockquote><ol><li>JavaBean 是一种 Java 类，而且是一种特殊的、可重用的类。</li><li>JavaBean必须具有无参数的构造器，所有的属性都是private的，通过提供setter和getter方法来实现对成员属性的访问。</li><li>Javabean 是为了和 jsp 页面传数据化简交互过程而产生的。</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.base.learn;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 客户信息类</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Customer</span> &#123;<br>    <span class="hljs-keyword">private</span> String name; <span class="hljs-comment">// 名字</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">char</span> gender; <span class="hljs-comment">// 性别</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age; <span class="hljs-comment">// 年龄</span><br>    <span class="hljs-keyword">private</span> String phone; <span class="hljs-comment">// 手机号</span><br>    <span class="hljs-keyword">private</span> String email; <span class="hljs-comment">// 电子邮箱</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Customer</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Customer</span><span class="hljs-params">(String name, <span class="hljs-type">char</span> gender, <span class="hljs-type">int</span> age, String phone, String email)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.gender = gender;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        <span class="hljs-built_in">this</span>.phone = phone;<br>        <span class="hljs-built_in">this</span>.email = email;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">char</span> <span class="hljs-title function_">getGender</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> gender;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setGender</span><span class="hljs-params">(<span class="hljs-type">char</span> gender)</span> &#123;<br>        <span class="hljs-built_in">this</span>.gender = gender;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPhone</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> phone;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPhone</span><span class="hljs-params">(String phone)</span> &#123;<br>        <span class="hljs-built_in">this</span>.phone = phone;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getEmail</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> email;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setEmail</span><span class="hljs-params">(String email)</span> &#123;<br>        <span class="hljs-built_in">this</span>.email = email;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-9-4-UML-类图"><a href="#3-9-4-UML-类图" class="headerlink" title="3.9.4 UML 类图"></a>3.9.4 UML 类图</h3><p><img src="/../img/Java%EF%BD%9C%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%EF%BC%88%E4%B8%8A%EF%BC%89/image-10.png" alt="UML"></p><p><a href="https://www.zhihu.com/question/419312525">详细内容可以参考</a></p><h2 id="3-10-this-关键字"><a href="#3-10-this-关键字" class="headerlink" title="3.10 this 关键字"></a>3.10 this 关键字</h2><h3 id="3-10-1-this-调用属性、方法、构造器"><a href="#3-10-1-this-调用属性、方法、构造器" class="headerlink" title="3.10.1 this 调用属性、方法、构造器"></a>3.10.1 this 调用属性、方法、构造器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.base.exer;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * this 关键字的使用</span><br><span class="hljs-comment"> * 1.this 用来修饰、调用：属性、方法、构造器</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 2.this 修饰属性和方法:</span><br><span class="hljs-comment"> * this 理解为：当前对象,或当前正在创建的对象。</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 2.1 在类的方法中，我们可以使用&quot;this.属性&quot;或&quot;this.方法&quot;的方式，调用当前对象属性和方法。</span><br><span class="hljs-comment"> * 通常情况下，我们都选择省略“this.”。特殊情况下，如果方法的形参和类的属性同名，我们必须显式</span><br><span class="hljs-comment"> * 的使用&quot;this.变量&quot;的方式，表明此变量是属性，而非形参。</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 2.2 在类的构造器中，我们可以使用&quot;this.属性&quot;或&quot;this.方法&quot;的方式，调用正在创建的对象属性和方法。</span><br><span class="hljs-comment"> * 但是，通常情况下，我们都选择省略“this.”。特殊情况下，如果构造器的形参和类的属性同名，我们必须显式</span><br><span class="hljs-comment"> * 的使用&quot;this.变量&quot;的方式，表明此变量是属性，而非形参。</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 3.this 调用构造器</span><br><span class="hljs-comment"> * ① 我们可以在类的构造器中，显式的使用&quot;this(形参列表)&quot;的方式，调用本类中重载的其他的构造器！</span><br><span class="hljs-comment"> * ② 构造器中不能通过&quot;this(形参列表)&quot;的方式调用自己。</span><br><span class="hljs-comment"> * ③ 如果一个类中声明了n个构造器，则最多有n -1个构造器中使用了&quot;this(形参列表)&quot;。</span><br><span class="hljs-comment"> * ④ &quot;this(形参列表)&quot;必须声明在类的构造器的首行！</span><br><span class="hljs-comment"> * ⑤ 在类的一个构造器中，最多只能声明一个&quot;this(形参列表)&quot;。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PersonTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>        p1.setAge(<span class="hljs-number">1</span>);<br>        System.out.println(p1.getAge());<br><br>        p1.eat();<br>        System.out.println();<br><br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;jerry&quot;</span>, <span class="hljs-number">20</span>);<br>        System.out.println(p2.getAge());<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>.eat();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Person info.&quot;</span>;<br>        System.out.println(info);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>();<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>(age);<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;人吃饭&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-10-2-练习1-关于-this-的使用"><a href="#3-10-2-练习1-关于-this-的使用" class="headerlink" title="3.10.2 练习1 关于 this 的使用"></a>3.10.2 练习1 关于 this 的使用</h3><p><img src="/../img/Java%EF%BD%9C%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%EF%BC%88%E4%B8%8A%EF%BC%89/image-11.png" alt="Boy&amp;Girl"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.base.learn;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Boy</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Boy</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">marry</span><span class="hljs-params">(Girl girl)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;我想娶&quot;</span> + girl.getName());<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">shout</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.age &gt;= <span class="hljs-number">22</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;你可以合法登记结婚了。&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;好好学习&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.base.learn;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Girl</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Girl</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">marry</span><span class="hljs-params">(Boy boy)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;我想嫁给&quot;</span> + boy.getName());<br>        <span class="hljs-comment">// this 是&quot;当前对象&quot;，这了谁调用了 marry 谁就是 this</span><br>        boy.marry(<span class="hljs-built_in">this</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Girl girl)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.age - girl.age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.base.learn;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BoyGirlTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Boy</span> <span class="hljs-variable">boy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Boy</span>(<span class="hljs-string">&quot;罗密欧&quot;</span>, <span class="hljs-number">21</span>);<br>        boy.shout();<br><br>        <span class="hljs-type">Girl</span> <span class="hljs-variable">girl</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Girl</span>(<span class="hljs-string">&quot;朱丽叶&quot;</span>, <span class="hljs-number">18</span>);<br>        girl.marry(boy);<br><br>        <span class="hljs-type">Girl</span> <span class="hljs-variable">girl1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Girl</span>(<span class="hljs-string">&quot;祝英台&quot;</span>, <span class="hljs-number">19</span>);<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">compare</span> <span class="hljs-operator">=</span> girl.compare(girl1);<br>        <span class="hljs-keyword">if</span> (compare &gt; <span class="hljs-number">0</span>) &#123;<br>            System.out.println(girl.getName() + <span class="hljs-string">&quot;年龄大&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (compare &lt; <span class="hljs-number">0</span>) &#123;<br>            System.out.println(girl1.getName() + <span class="hljs-string">&quot;年龄大&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;年龄一样大&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">好好学习2</span><br><span class="hljs-comment">我想嫁给罗密欧</span><br><span class="hljs-comment">我想娶朱丽叶</span><br><span class="hljs-comment">祝英台年龄大</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h3 id="3-10-3-练习2-取钱存钱"><a href="#3-10-3-练习2-取钱存钱" class="headerlink" title="3.10.3 练习2 取钱存钱"></a>3.10.3 练习2 取钱存钱</h3><p><img src="/../img/Java%EF%BD%9C%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%EF%BC%88%E4%B8%8A%EF%BC%89/image-12.png" alt="Account"></p><blockquote><p>写一个名为 Account 的类模拟账户。该类的属性和方法如下图所示。该类包括的属性： 账号 id，余额 balance，年利率 annualInterestRate</p></blockquote><blockquote><p>包含的方法：访问器方法（getter 和 setter 方法），取款方法 withdraw()，存款方法 deposit()</p></blockquote><blockquote><p>在提款方法 withdraw 中，需要判断用户余额是否能够满足提款数额的要求，如果不能，应给出提示</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.base.exer;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Account</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id; <span class="hljs-comment">// 账号</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> balance; <span class="hljs-comment">// 余额</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> annualInterestRate; <span class="hljs-comment">// 年利率</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Account</span><span class="hljs-params">(<span class="hljs-type">int</span> id, <span class="hljs-type">double</span> balance, <span class="hljs-type">double</span> annualInterestRate)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>        <span class="hljs-built_in">this</span>.balance = balance;<br>        <span class="hljs-built_in">this</span>.annualInterestRate = annualInterestRate;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getBalance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> balance;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBalance</span><span class="hljs-params">(<span class="hljs-type">double</span> balance)</span> &#123;<br>        <span class="hljs-built_in">this</span>.balance = balance;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getAnnualInterestRate</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> annualInterestRate;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAnnualInterestRate</span><span class="hljs-params">(<span class="hljs-type">double</span> annualInterestRate)</span> &#123;<br>        <span class="hljs-built_in">this</span>.annualInterestRate = annualInterestRate;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 取钱操作</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> amount 金额</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">withdraw</span><span class="hljs-params">(<span class="hljs-type">double</span> amount)</span> &#123;<br>        <span class="hljs-keyword">if</span> (balance &lt; amount) &#123;<br>            System.out.println(<span class="hljs-string">&quot;余额不足，取款失败!&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        balance -= amount;<br>        System.out.println(<span class="hljs-string">&quot;成功取出：&quot;</span> + amount);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 存钱操作</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> amount 金额</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deposit</span><span class="hljs-params">(<span class="hljs-type">double</span> amount)</span> &#123;<br>        <span class="hljs-keyword">if</span> (amount &gt; <span class="hljs-number">0</span>) &#123;<br>            balance += amount;<br>            System.out.println(<span class="hljs-string">&quot;成功存入：&quot;</span> + amount);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/../img/Java%EF%BD%9C%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%EF%BC%88%E4%B8%8A%EF%BC%89/image-13.png" alt="Customer"></p><ul><li>声明三个私有对象属性：firstName、lastName 和 account。</li><li>声明一个公有构造器，这个构造器带有两个代表对象属性的参数（f 和 l）</li><li>声明两个公有存取器来访问该对象属性，方法 getFirstName 和 getLastName 返回相应的属性。</li><li>声明 setAccount 方法来对 account 属性赋值。</li><li>声明 getAccount 方法以获取 account 属性</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.base.exer;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Customer</span> &#123;<br>    <span class="hljs-keyword">private</span> String firstName;<br>    <span class="hljs-keyword">private</span> String lastName;<br>    <span class="hljs-keyword">private</span> Account account;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Customer</span><span class="hljs-params">(String firstName, String lastName)</span> &#123;<br>        <span class="hljs-built_in">this</span>.firstName = firstName;<br>        <span class="hljs-built_in">this</span>.lastName = lastName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getFirstName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> firstName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getLastName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> lastName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Account <span class="hljs-title function_">getAccount</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> account;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAccount</span><span class="hljs-params">(Account account)</span> &#123;<br>        <span class="hljs-built_in">this</span>.account = account;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.base.exer;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">1. 创建一个 Customer ，名字叫 Jane Smith, 他有一个账号为 1000，余额为 2000 元，年利率为 1.23％ 的账户。</span><br><span class="hljs-comment">2. 对 Jane Smith 操作。存入 100 元，再取出 960 元。再取出 2000 元。打印出 Jane Smith 的基本信息</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomerTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Customer</span> <span class="hljs-variable">cust</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Customer</span>(<span class="hljs-string">&quot;Jane&quot;</span>, <span class="hljs-string">&quot;Smith&quot;</span>);<br><br>        <span class="hljs-type">Account</span> <span class="hljs-variable">acct</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Account</span>(<span class="hljs-number">1000</span>, <span class="hljs-number">2000</span>, <span class="hljs-number">0.0123</span>);<br><br>        cust.setAccount(acct);<br><br>        cust.getAccount().deposit(<span class="hljs-number">100</span>);<br>        cust.getAccount().withdraw(<span class="hljs-number">960</span>);<br>        cust.getAccount().withdraw(<span class="hljs-number">2000</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;Custormer [&quot;</span> + cust.getLastName() + <span class="hljs-string">&quot;, &quot;</span> + cust.getFirstName() + <span class="hljs-string">&quot;] has a account: id is &quot;</span><br>                + cust.getAccount().getId() + <span class="hljs-string">&quot;, annualInterestRate is &quot;</span><br>                + cust.getAccount().getAnnualInterestRate() * <span class="hljs-number">100</span> + <span class="hljs-string">&quot;%, balance is &quot;</span><br>                + cust.getAccount().getBalance());<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">成功存入：100.0</span><br><span class="hljs-comment">成功取出：960.0</span><br><span class="hljs-comment">余额不足，取款失败!</span><br><span class="hljs-comment">Custormer [Smith, Jane] has a account: id is 1000, annualInterestRate is 1.23%, balance is 1140.0</span><br><span class="hljs-comment">*/</span><br><br></code></pre></td></tr></table></figure><h3 id="3-10-4-练习3-银行账户"><a href="#3-10-4-练习3-银行账户" class="headerlink" title="3.10.4 练习3 银行账户"></a>3.10.4 练习3 银行账户</h3><p><img src="/../img/Java%EF%BD%9C%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%EF%BC%88%E4%B8%8A%EF%BC%89/image-14.png" alt="Account"></p><blockquote><p>在提款方法 withdraw() 中，需要判断用户余额是否能满足提款数额的要求，如果不能应给出提示。</p><p>deposit() 方法表示存款</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.base.exer1;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 账户类 Account</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Account</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> balance;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Account</span><span class="hljs-params">(<span class="hljs-type">double</span> balance)</span> &#123;<br>        <span class="hljs-built_in">this</span>.balance = balance;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getBalance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> balance;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 存钱操作</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> amount 金额</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deposit</span><span class="hljs-params">(<span class="hljs-type">double</span> amount)</span> &#123;<br>        <span class="hljs-keyword">if</span> (amount &gt; <span class="hljs-number">0</span>) &#123;<br>            balance += amount;<br>            System.out.println(<span class="hljs-string">&quot;成功存入：&quot;</span> + amount);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 取钱操作</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> amount 金额</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">withdraw</span><span class="hljs-params">(<span class="hljs-type">double</span> amount)</span> &#123;<br>        <span class="hljs-keyword">if</span> (balance &lt; amount) &#123;<br>            System.out.println(<span class="hljs-string">&quot;余额不足，取款失败！&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        balance -= amount;<br>        System.out.println(<span class="hljs-string">&quot;成功取出：&quot;</span> + amount);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/../img/Java%EF%BD%9C%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%EF%BC%88%E4%B8%8A%EF%BC%89/image-15.png" alt="Customer"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.base.exer1;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 用户类 Customer</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Customer</span> &#123;<br>    <span class="hljs-keyword">private</span> String firstName;<br>    <span class="hljs-keyword">private</span> String lastName;<br>    <span class="hljs-keyword">private</span> Account account;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Customer</span><span class="hljs-params">(String firstName, String lastName)</span> &#123;<br>        <span class="hljs-built_in">this</span>.firstName = firstName;<br>        <span class="hljs-built_in">this</span>.lastName = lastName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getFirstName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> firstName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getLastName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> lastName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Account <span class="hljs-title function_">getAccount</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> account;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAccount</span><span class="hljs-params">(Account account)</span> &#123;<br>        <span class="hljs-built_in">this</span>.account = account;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="/../img/Java%EF%BD%9C%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%EF%BC%88%E4%B8%8A%EF%BC%89/image-16.png" alt="Bank"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.base.exer1;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 银行类 Bank</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Bank</span> &#123;<br>    <span class="hljs-keyword">private</span> Customer[] customers; <span class="hljs-comment">// 存放多个客户的数组</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> numberOfCustomers; <span class="hljs-comment">// 记录客户的个数</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Bank</span><span class="hljs-params">()</span> &#123;<br>        customers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Customer</span>[<span class="hljs-number">10</span>];<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 添加客户操作</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> f firstName</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> l lastName</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addCustomer</span><span class="hljs-params">(String f, String l)</span> &#123;<br>        <span class="hljs-type">Customer</span> <span class="hljs-variable">cust</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Customer</span>(f, l);<br>        customers[numberOfCustomers++] = cust;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取指定位置上的客户</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> customers[index]</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> Customer <span class="hljs-title function_">getCustomers</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-keyword">if</span> (index &gt;= <span class="hljs-number">0</span> &amp;&amp; index &lt; numberOfCustomers) &#123;<br>            <span class="hljs-keyword">return</span> customers[index];<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取客户个数</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> numberOfCustomers</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getNumberOfCustomers</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> numberOfCustomers;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.base.exer1;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 银行测试类 BankTest</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BankTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Bank</span> <span class="hljs-variable">bank</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Bank</span>();<br>        bank.addCustomer(<span class="hljs-string">&quot;Jane&quot;</span>, <span class="hljs-string">&quot;Smith&quot;</span>);<br>        bank.getCustomers(<span class="hljs-number">0</span>).setAccount(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Account</span>(<span class="hljs-number">2000</span>));<br>        bank.getCustomers(<span class="hljs-number">0</span>).getAccount().withdraw(<span class="hljs-number">500</span>);<br>        bank.getCustomers(<span class="hljs-number">0</span>).getAccount().deposit(<span class="hljs-number">100</span>);<br>        <span class="hljs-type">double</span> <span class="hljs-variable">balance</span> <span class="hljs-operator">=</span> bank.getCustomers(<span class="hljs-number">0</span>).getAccount().getBalance();<br>        System.out.println(<span class="hljs-string">&quot;客户：&quot;</span> + bank.getCustomers(<span class="hljs-number">0</span>).getFirstName() + <span class="hljs-string">&quot; 的账户余额为：&quot;</span> + balance);<br>        System.out.println(<span class="hljs-string">&quot;-------------------&quot;</span>);<br>        bank.addCustomer(<span class="hljs-string">&quot;三&quot;</span>, <span class="hljs-string">&quot;张&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;银行客户的个数为：&quot;</span> + bank.getNumberOfCustomers());<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">成功取出：500.0</span><br><span class="hljs-comment">成功存入：100.0</span><br><span class="hljs-comment">客户：Jane 的账户余额为：1600.0</span><br><span class="hljs-comment">-------------------</span><br><span class="hljs-comment">银行客户的个数为：2</span><br><span class="hljs-comment">*/</span><br><br></code></pre></td></tr></table></figure><h1 id="4-package、import"><a href="#4-package、import" class="headerlink" title="4. package、import"></a>4. package、import</h1><h2 id="4-1-关键字-package"><a href="#4-1-关键字-package" class="headerlink" title="4.1 关键字 package"></a>4.1 关键字 package</h2><p>基础理解：</p><ul><li>package 语句作为 Java 源文件的第一条语句，指明该文件中定义的类所在的包。</li><li>它的格式为： package 顶层包名.子包名</li></ul><hr><ul><li>为了更好的实现项目中类的管理，提供包的概念</li><li>使用 package 声明类或接口所属的包，声明在原文件的首行</li><li>包，属于标识符，遵循标识符的命名规则和规范，“见名知意”,所有字母都小写</li><li>每“.”一次代表一层文件目录</li><li>补充：同一个包下不能命名同名的接口、类，不同的包下可以命名同名接口或者类 <a name="iAjMX"></a></li></ul><h2 id="4-2-JDK中主要的包介绍"><a href="#4-2-JDK中主要的包介绍" class="headerlink" title="4.2 JDK中主要的包介绍"></a>4.2 JDK中主要的包介绍</h2><ul><li>java.lang—-包含一些Java语言的核心类，如String、Math、Integer、 System和 Thread，提供常用功能</li><li>java.net—-包含执行与网络相关的操作的类和接口</li><li>java.io —-包含能提供多种输入&#x2F;输出功能的类</li><li>java.util—-包含一些实用工具类，如定义系统特性、接口的集合框架类、使用与日 期日历相关的函数</li><li>java.text—-包含了一些java格式化相关的类</li><li>java.sql—-包含了java进行JDBC数据库编程的相关类&#x2F;接口 <a name="ZN9fK"></a></li></ul><h2 id="4-3-关键字-import"><a href="#4-3-关键字-import" class="headerlink" title="4.3 关键字 import"></a>4.3 关键字 import</h2><ul><li>为使用定义在不同包中的Java类，需用import语句来引入指定包层次下所需要的类 或全部类(.*)。import语句告诉编译器到哪里去寻找类。</li><li>import 包名. 类名;</li></ul><hr><ol><li>在源文件中显式的使用 import 结构导入指定包下的类、接口</li><li>声明在包的声明和类的声明之间</li><li>如果需要导入多个结构，则并列写出即可</li><li>可以使用 “xxx.*“ 的方式,表示可以导入 xxx 包下的所有结构。</li><li>如果导入的类或接口是 java.lang 包下的，或者是当前包下的，则可以省略此 import 语句。</li><li>如果在代码中使用不同包下的同名的类。那么就需要使用类的全类名的方式指明调用的是哪个类。</li><li>如果已经导入 java.a 包下的类。那么如果需要使用 a 包的子包下的类的话，仍然需要导入。</li><li>import static 组合的使用：调用指定类或接口下的静态的属性或方法. <a name="JizBy"></a></li></ol><h2 id="4-4-MVC-设计"><a href="#4-4-MVC-设计" class="headerlink" title="4.4 MVC 设计"></a>4.4 MVC 设计</h2><p><img src="/../img/Java%EF%BD%9C%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%EF%BC%88%E4%B8%8A%EF%BC%89/image-17.png"><br><img src="/../img/Java%EF%BD%9C%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%EF%BC%88%E4%B8%8A%EF%BC%89/image-18.png"></p><p>MVC 是常用的设计模式之一，将整个程序分为三个层次：<strong>视图模型层，控制器层，数据模型层</strong>。这种将程序输入输出、数据处理，以及数据的展示分离开来的设计模式使程序结构变的灵活而且清晰，同时也描述了程序各个对象间的通信方式，降低了程序的耦合性。</p><blockquote><p>以上笔记内容大部分都是来自 <a href="https://www.bilibili.com/video/BV1PY411e7J6">B站康师傅 Java 基础教程</a> 主要记录下自己学习的过程</p></blockquote><blockquote><p>注: 如果文章有任何错误和建议，请各位大佬尽情评论留言！如果这篇文章对你也有所帮助，希望可爱亲切的您给个关注点赞收藏下，非常感谢啦！ </p></blockquote>]]></content>
    
    
    <categories>
      
      <category>JavaSE</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Java｜数组</title>
    <link href="/2024/07/30/16371f98.html"/>
    <url>/2024/07/30/16371f98.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>保持对世界的渴望与好奇，而非被浅薄的快乐左右</p></blockquote><h1 id="1-数组的概述"><a href="#1-数组的概述" class="headerlink" title="1. 数组的概述"></a>1. 数组的概述</h1><p>概述：数组是一种数据结构，用来存储同一类型值的集合。通过一个整形下标（index，或称索引）可以访问数组中的每一个值。</p><p>特点：</p><ul><li>数组是有序排列的</li><li>数组长度一旦确定，不能修改</li><li>创建数组对象会在内存中开辟一整块连续的空间</li><li>数组属于引用类型的变量。数组的元素，既可以是基本数据类型，也可以是引用数据类型</li></ul><p>分类：</p><ul><li>按照维度：一维数组、二维数组、…</li><li>按照数组元素的类型：基本数据类型元素的数组、引用数据类型元素的数组</li></ul><p>数据结构：</p><ul><li>数据与数据之间的逻辑关系：集合（关系很弱）、一对一（数组里面的元素）、一对多（二叉树）、多对多（社交网络）</li><li>数据的存储结构：<ul><li>线性表：顺序表（比如：数组）、链表、栈、队列、</li><li>树形结构：二叉树、树形结构</li></ul></li></ul><h1 id="2-数组的声明"><a href="#2-数组的声明" class="headerlink" title="2. 数组的声明"></a>2. 数组的声明</h1><h2 id="2-1-Java-虚拟机的内存划分"><a href="#2-1-Java-虚拟机的内存划分" class="headerlink" title="2.1 Java 虚拟机的内存划分"></a>2.1 Java 虚拟机的内存划分</h2><p>为了提高运算效率，就对空间进行了不同区域的划分，因为每一片区域都有特定的处理数据方式和内存管理方式。</p><p><img src="/../img/Java%EF%BD%9C%E6%95%B0%E7%BB%84/image.png" alt="JVM架构简图"></p><table><thead><tr><th>区域名称</th><th>作用</th></tr></thead><tbody><tr><td><code>虚拟机栈</code></td><td>用于存储正在执行的每个Java方法的局部变量表等。局部变量表存放了编译期可知长度<br/>的各种基本数据类型、对象引用，方法执行完，自动释放。</td></tr><tr><td><code>堆内存</code></td><td>存储对象（包括数组对象），new来创建的，都存储在堆内存。</td></tr><tr><td><code>方法区</code></td><td>存储已被虚拟机加载的类信息、常量、（静态变量）、即时编译器编译后的代码等数据。</td></tr><tr><td>本地方法栈</td><td>当程序中调用了native的本地方法时，本地方法执行期间的内存区域</td></tr><tr><td>程序计数器</td><td>程序计数器是CPU中的寄存器，它包含每一个线程下一条要执行的指令的地址</td></tr></tbody></table><p>注：摘自康师傅 Java 课件与电子教材</p><h2 id="2-2-一维数组"><a href="#2-2-一维数组" class="headerlink" title="2.2 一维数组"></a>2.2 一维数组</h2><p>在声明数组变量时，需要指定数组类型（数据元素类型紧跟 [] ）和数组变量的名称</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 只声明了变量 a</span><br><span class="hljs-type">int</span>[] a;<br><span class="hljs-comment">// 静态初始化：数组的初始化和赋值同时进行</span><br>a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1001</span>, <span class="hljs-number">1002</span>, <span class="hljs-number">1003</span>, <span class="hljs-number">1004</span>&#125;;<br><br><span class="hljs-comment">// 动态初始化：数组初始化和元素赋值分开操作</span><br>String[] names = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[<span class="hljs-number">5</span>];<br><br><span class="hljs-comment">// Java 中，提供了一种创建数组对象并同时提供初始值的简写形式</span><br><span class="hljs-comment">// 注意，这个语法中不需要使用 new，甚至不需要指定长度</span><br><span class="hljs-type">int</span>[] smallPrimes = &#123;<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>&#125;;<br><br><span class="hljs-comment">// 也可以使用下面两种形式定义一个数组变量，第一种风格使用的多</span><br><span class="hljs-comment">// 因为它可以将类型 int[]（整形数组） 与变量明清晰的分开</span><br><span class="hljs-type">int</span>[] b;<br><span class="hljs-type">int</span> c[];<br></code></pre></td></tr></table></figure><p>错误的方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//int[] arr1 = new int[];</span><br><span class="hljs-comment">//int[5] arr2 = new int[5];</span><br><span class="hljs-comment">//int[] arr3 = new int[3]&#123;1,2,3&#125;;</span><br></code></pre></td></tr></table></figure><p>数组元素调用、获取数组 length、两种方式遍历数组元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayTest1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 动态初始化：数组初始化和元素赋值分开操作</span><br>        String[] names = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[<span class="hljs-number">5</span>];<br><br>        <span class="hljs-comment">// 通过角标的方式调用</span><br>        names[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;张三&quot;</span>;<br>        names[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;李四&quot;</span>;<br>        names[<span class="hljs-number">2</span>] = <span class="hljs-string">&quot;王五&quot;</span>;<br>        names[<span class="hljs-number">3</span>] = <span class="hljs-string">&quot;赵六&quot;</span>;<br>        names[<span class="hljs-number">4</span>] = <span class="hljs-string">&quot;孙七&quot;</span>;<br><br>        <span class="hljs-comment">// 获取数组元素的长度：length</span><br>        System.out.println(names.length);<br><br>        <span class="hljs-comment">// 遍历数组 for 循环</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; names.length; i++) &#123;<br>            System.out.print(names[i] + <span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">// 换行一下</span><br>        System.out.println();<br><br>        <span class="hljs-comment">// 通过 for each 循环进行遍历数组</span><br>        <span class="hljs-keyword">for</span> (String element : names) &#123;<br>            System.out.print(element + <span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>默认初始化值</p><ul><li>数组元素是整型：0</li><li>数组元素是浮点型：0.0</li><li>数组元素是char型：0或’\u0000’，而非’0’</li><li>数组元素是boolean型：false</li><li>数组元素是引用数据类型：null</li></ul><p><img src="/../img/Java%EF%BD%9C%E6%95%B0%E7%BB%84/image-1.png" alt="类型及默认值"></p><p>一维数组内存解析大致过程</p><p><img src="/../img/Java%EF%BD%9C%E6%95%B0%E7%BB%84/image-2.png" alt="一维数组内存解析"></p><h2 id="2-3-二维数组"><a href="#2-3-二维数组" class="headerlink" title="2.3 二维数组"></a>2.3 二维数组</h2><p>二维数组元素获取、获取数组 length、两种方式遍历数组元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayTest2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 静态初始化</span><br>        <span class="hljs-type">int</span>[][] arr1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[][]&#123;&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;, &#123;<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>&#125;, &#123;<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>&#125;, &#123;<span class="hljs-number">22</span>, <span class="hljs-number">12</span>, <span class="hljs-number">9</span>&#125;&#125;;<br><br>        <span class="hljs-comment">// 动态初始化1</span><br>        String[][] arr2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[<span class="hljs-number">3</span>][<span class="hljs-number">2</span>];<br>        <span class="hljs-comment">// 动态初始化2</span><br>        String[][] arr3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[<span class="hljs-number">3</span>][];<br><br>        <span class="hljs-comment">//也是正确的写法：</span><br>        <span class="hljs-type">int</span> arr4[][] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[][]&#123;&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;, &#123;<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>&#125;, &#123;<span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>&#125;&#125;;<br>        <span class="hljs-type">int</span>[] arr5[] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[][]&#123;&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;, &#123;<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>&#125;, &#123;<span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>&#125;&#125;;<br>        <span class="hljs-type">int</span>[][] arr6 = &#123;&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;, &#123;<span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;, &#123;<span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>&#125;&#125;;<span class="hljs-comment">//类型推断</span><br><br>        <span class="hljs-comment">// 获取数组指定位置的元素</span><br>        System.out.println(arr1[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>]); <span class="hljs-comment">// 3</span><br>        <span class="hljs-comment">// System.out.println(arr1[0][3]); // ArrayIndexOutOfBoundsException 数组索引越界异常</span><br>        System.out.println(arr2[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]); <span class="hljs-comment">// null</span><br>        <span class="hljs-comment">// System.out.println(arr3[1][1]); // NullPointerException 空指针异常</span><br><br>        <span class="hljs-comment">// 数组长度</span><br>        System.out.println(arr1.length); <span class="hljs-comment">// 4</span><br>        System.out.println(arr1[<span class="hljs-number">1</span>].length); <span class="hljs-comment">// 3</span><br><br>        <span class="hljs-comment">// 遍历二维数组</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr1.length; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; arr1[i].length; j++) &#123;<br>                System.out.print(arr1[i][j] + <span class="hljs-string">&quot; &quot;</span>);<br>            &#125;<br>            System.out.println();<br>        &#125;<br>        <br>        <span class="hljs-comment">// 换行</span><br>        System.out.println();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span>[] e : arr1) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j : e) &#123;<br>                System.out.print(j + <span class="hljs-string">&quot; &quot;</span>);<br>            &#125;<br>            System.out.println();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>错误的方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//String[][] arr4 = new String[][4];</span><br><span class="hljs-comment">//String[4][3] arr5 = new String[][];</span><br><span class="hljs-comment">//int[][] arr6 = new int[4][3]&#123;&#123;1,2,3&#125;,&#123;4,5&#125;,&#123;6,7,8&#125;&#125;;</span><br></code></pre></td></tr></table></figure><p>数组元素的默认初始化值</p><ul><li><p>针对于初始化方式一：比如：int[][] arr &#x3D; newint[4][3];</p><ul><li>外层元素的初始化值为：地址值</li><li>内层元素的初始化值为：与一维数组初始化情况相同</li></ul></li><li><p>针对于初始化方式二：比如：int[][] arr &#x3D; newint[4][];</p><ul><li>外层元素的初始化值为：null</li><li>内层元素的初始化值为：不能调用，否则报错</li></ul></li></ul><p>二维数组内存解析大致过程</p><p><img src="/../img/Java%EF%BD%9C%E6%95%B0%E7%BB%84/image-3.png" alt="二维数组内存解析"></p><h1 id="3-数组的常见算法"><a href="#3-数组的常见算法" class="headerlink" title="3. 数组的常见算法"></a>3. 数组的常见算法</h1><h2 id="3-1-数组元素的赋值"><a href="#3-1-数组元素的赋值" class="headerlink" title="3.1 数组元素的赋值"></a>3.1 数组元素的赋值</h2><p>杨辉三角</p><p><img src="/../img/Java%EF%BD%9C%E6%95%B0%E7%BB%84/image-4.png" alt="杨辉三角"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayEver</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 1. 新建二维数组，动态初始化</span><br>        <span class="hljs-type">int</span>[][] yangHui = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">10</span>][];<br>        <span class="hljs-comment">// 2. 为二维数组赋值操作</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; yangHui.length; i++) &#123;<br>            <span class="hljs-comment">// 第一行有 1 个元素，总共 10 行</span><br>            yangHui[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[i + <span class="hljs-number">1</span>];<br><br>            <span class="hljs-comment">// 2.1 为首末行元素赋值 1</span><br>            yangHui[i][<span class="hljs-number">0</span>] = yangHui[i][i] = <span class="hljs-number">1</span>;<br><br>            <span class="hljs-comment">// 2.2 给每行的非首末元素赋值操作</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt; yangHui[i].length - <span class="hljs-number">1</span>; j++) &#123;<br>                yangHui[i][j] = yangHui[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>] + yangHui[i - <span class="hljs-number">1</span>][j];<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 3. 打印输出二维数组</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span>[] ints : yangHui) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> anInt : ints) &#123;<br>                System.out.print(anInt + <span class="hljs-string">&quot; &quot;</span>);<br>            &#125;<br>            System.out.println();<br>        &#125;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        1 </span><br><span class="hljs-comment">        1 1 </span><br><span class="hljs-comment">        1 2 1 </span><br><span class="hljs-comment">        1 3 3 1 </span><br><span class="hljs-comment">        1 4 6 4 1 </span><br><span class="hljs-comment">        1 5 10 10 5 1 </span><br><span class="hljs-comment">        1 6 15 20 15 6 1 </span><br><span class="hljs-comment">        1 7 21 35 35 21 7 1 </span><br><span class="hljs-comment">        1 8 28 56 70 56 28 8 1 </span><br><span class="hljs-comment">        1 9 36 84 126 126 84 36 9 1 </span><br><span class="hljs-comment">        */</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-2-针对数值型的数组"><a href="#3-2-针对数值型的数组" class="headerlink" title="3.2 针对数值型的数组"></a>3.2 针对数值型的数组</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 针对数值类型的基本操作</span><br><span class="hljs-comment"> * 定义一个 int 型的一维数组，包含 10 个元素，分别赋值一些随时数，所有随机数都是两位数</span><br><span class="hljs-comment"> * 求：数值型数组元素的最大值、最小值、平均数、总和</span><br><span class="hljs-comment"> * [10, 99] 公式：(int)(Math.random() * (99 - 10 + 1) + 10)</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayEver1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">10</span>];<br>        <span class="hljs-comment">// 数组赋值操作</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            arr[i] = (<span class="hljs-type">int</span>) (Math.random() * (<span class="hljs-number">99</span> - <span class="hljs-number">10</span> + <span class="hljs-number">1</span>) + <span class="hljs-number">10</span>);<br>        &#125;<br><br>        <span class="hljs-comment">// 遍历</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : arr) &#123;<br>            System.out.print(i + <span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">// 换行</span><br>        System.out.println();<br><br>        <span class="hljs-comment">// 求数组元素的最大值</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">maxValue</span> <span class="hljs-operator">=</span> arr[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : arr) &#123;<br>            <span class="hljs-keyword">if</span>(maxValue &lt; i)&#123;<br>                maxValue = i;<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;最大值：&quot;</span> + maxValue);<br><br>        <span class="hljs-comment">// 求数组元素的最小值</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">minValue</span> <span class="hljs-operator">=</span> arr[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : arr) &#123;<br>            <span class="hljs-keyword">if</span>(maxValue &gt; i)&#123;<br>                maxValue = i;<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;最小值：&quot;</span> + minValue);<br><br>        <span class="hljs-comment">// 求数组元素的总和</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : arr) &#123;<br>            sum += i;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;总和：&quot;</span> + sum);<br><br>        <span class="hljs-comment">// 求数组元素的平均数</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">avgValue</span> <span class="hljs-operator">=</span> sum / arr.length;<br>        System.out.println(<span class="hljs-string">&quot;平均数：&quot;</span> + avgValue);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Math.random()方法</strong></p><p>在 Java 中主要提供了两种方式产生随机数，分别为调用 <strong>Math 类的 random()方法</strong> 和 <strong>Random 类</strong>提供的产生各种数据类型随机数的方法。</p><p>在 Math 类中存在一个 random() 方法，用于产生随机数字，这个方法默认生成大于等于 0.0 且小于 1.0 的 double 型随机数；即 0 &lt;&#x3D; Math.random() &lt; 1.0，虽然 Math.random() 方法只可以产生 0 ~ 1 之间的double 型数字，其实只要在 Math.random() 语句上稍加处理，就可以产生任意范围的随机数。</p><blockquote><p>(int)(Math.Random() * n ) → 返回大于等于 0 且小于 n 的随机数</p><p>m + (int)(Math.Random() * n ) → 返回大于等于 m 且小于 m+n（不包括m+n）的随机数</p></blockquote><p>使用 Math 类的 random() 方法也可以随机生成字符，可以使用如下代码生成 a ~ z 之间的字符。</p><blockquote><p>(char)(‘a’ + Math.random() * (‘z’ - ‘a’ + 1));</p></blockquote><p>上述表达式可以求出更多的随机字符，如 A ~ Z 之间的随机字符，进而推理出求任意字符之间的随机字符，可以使用下列语句表示。</p><blockquote><p>(char)(char1 + Math.random() * (cha2 - cha1 + 1));</p></blockquote><h2 id="3-3-数组的赋值与复制"><a href="#3-3-数组的赋值与复制" class="headerlink" title="3.3 数组的赋值与复制"></a>3.3 数组的赋值与复制</h2><p>赋值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayTest3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] array1, array2;<br>        array1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">11</span>, <span class="hljs-number">13</span>, <span class="hljs-number">17</span>, <span class="hljs-number">19</span>&#125;;<br>        <span class="hljs-comment">// array1 和 array2 地址相同，都指向了堆空间同一个数组实体</span><br>        array2 = array1;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; array2.length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) &#123;<br>                array2[i] = i;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 打印结果相同</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : array1) System.out.print(i + <span class="hljs-string">&quot; &quot;</span>); <span class="hljs-comment">// 0 3 2 7 4 13 6 19 </span><br>        System.out.println();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : array2) System.out.print(i + <span class="hljs-string">&quot; &quot;</span>); <span class="hljs-comment">// 0 3 2 7 4 13 6 19 </span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>简单理解如下图</p><p><img src="/../img/Java%EF%BD%9C%E6%95%B0%E7%BB%84/image-5.png" alt="理解图"></p><p>复制，目前复制 Java 数组的复制，可以使用  System.arraycopy() 方法，但在这里，先用最简单的方式描述</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayTest4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] array1, array2;<br>        array1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">11</span>, <span class="hljs-number">13</span>, <span class="hljs-number">17</span>, <span class="hljs-number">19</span>&#125;;<br>        <span class="hljs-comment">// 数组的复制</span><br>        array2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[array1.length];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; array2.length; i++) &#123;<br>            array2[i] = array1[i];<br>        &#125;<br>        array2[<span class="hljs-number">0</span>] = <span class="hljs-number">33</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : array1) System.out.print(i + <span class="hljs-string">&quot; &quot;</span>); <span class="hljs-comment">// 2 3 5 7 11 13 17 19</span><br>        System.out.println();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : array2) System.out.print(i + <span class="hljs-string">&quot; &quot;</span>); <span class="hljs-comment">// 33 3 5 7 11 13 17 19</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>简单理解如下图</p><p><img src="/../img/Java%EF%BD%9C%E6%95%B0%E7%BB%84/image-6.png" alt="理解图"></p><h2 id="3-4-数组元素的反转"><a href="#3-4-数组元素的反转" class="headerlink" title="3.4 数组元素的反转"></a>3.4 数组元素的反转</h2><p>数组的反转，主要是找个临时变量 temp 进行替换操作即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayTest5</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        String[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;SS&quot;</span>, <span class="hljs-string">&quot;QQ&quot;</span>, <span class="hljs-string">&quot;YY&quot;</span>, <span class="hljs-string">&quot;XX&quot;</span>, <span class="hljs-string">&quot;TT&quot;</span>, <span class="hljs-string">&quot;KK&quot;</span>, <span class="hljs-string">&quot;EE&quot;</span>, <span class="hljs-string">&quot;GG&quot;</span>, <span class="hljs-string">&quot;KK&quot;</span>&#125;;<br>        <span class="hljs-comment">// 数组的反转，方法 1</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length / <span class="hljs-number">2</span>; i++) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> arr[i];<br>            arr[i] = arr[arr.length - i -<span class="hljs-number">1</span>];<br>            arr[arr.length - i -<span class="hljs-number">1</span>] = temp;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (String i : arr) System.out.print(i + <span class="hljs-string">&quot; &quot;</span>); <span class="hljs-comment">// KK GG EE KK TT XX YY QQ SS </span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-5-数组中指定元素的查找"><a href="#3-5-数组中指定元素的查找" class="headerlink" title="3.5 数组中指定元素的查找"></a>3.5 数组中指定元素的查找</h2><p>线性查找</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 元素的查找：线性查找</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayTest6</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        String[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;SS&quot;</span>, <span class="hljs-string">&quot;QQ&quot;</span>, <span class="hljs-string">&quot;YY&quot;</span>, <span class="hljs-string">&quot;XX&quot;</span>, <span class="hljs-string">&quot;TT&quot;</span>, <span class="hljs-string">&quot;KK&quot;</span>, <span class="hljs-string">&quot;EE&quot;</span>, <span class="hljs-string">&quot;GG&quot;</span>, <span class="hljs-string">&quot;KK&quot;</span>&#125;;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">dest</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;YY&quot;</span>;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">isFlag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-comment">// 线性查找：通过遍历的方式，一个一个数据进行比较，查找。具体普遍适用性</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            <span class="hljs-keyword">if</span>(dest.equals(arr[i]))&#123;<br>                System.out.println(<span class="hljs-string">&quot;找到了指定元素，索引位置为: &quot;</span> + i);<br>                isFlag = <span class="hljs-literal">false</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(isFlag) System.out.print(<span class="hljs-string">&quot;很遗憾，没有找到元素&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>二分查找</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 二分查找，前提是，所要查找的数组必须有序</span><br><span class="hljs-comment"> * 思路：每次比较中间值，折半的方式检索</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayTest7</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;-<span class="hljs-number">12</span>, -<span class="hljs-number">8</span>, <span class="hljs-number">2</span>, <span class="hljs-number">12</span>, <span class="hljs-number">33</span>, <span class="hljs-number">35</span>, <span class="hljs-number">78</span>, <span class="hljs-number">89</span>, <span class="hljs-number">99</span>, <span class="hljs-number">112</span>, <span class="hljs-number">333</span>, <span class="hljs-number">456</span>&#125;;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">dest</span> <span class="hljs-operator">=</span> <span class="hljs-number">33</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">head</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 初始的首索引</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> arr2.length - <span class="hljs-number">1</span>; <span class="hljs-comment">// 初始的末索引</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">isFlag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">while</span> (head &lt;= end) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">minddle</span> <span class="hljs-operator">=</span> (head + end) / <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span> (dest == arr2[minddle]) &#123;<br>                System.out.println(<span class="hljs-string">&quot;找到了指定元素，索引位置为：&quot;</span> + minddle);<br>                isFlag = <span class="hljs-literal">false</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (arr2[minddle] &gt; dest) &#123;<br>                end = minddle - <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                head = minddle + <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (isFlag) System.out.print(<span class="hljs-string">&quot;很遗憾，没有找到元素&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-6-数组的排序算法"><a href="#3-6-数组的排序算法" class="headerlink" title="3.6 数组的排序算法"></a>3.6 数组的排序算法</h2><p>「十大排序算法」</p><ul><li>选择排序：<ul><li>直接选择排序、堆排序</li></ul></li><li>交换排序：<ul><li>冒泡排序、快速排序</li></ul></li><li>插入排序：<ul><li>直接插入排序、折半插入排序、希尔排序</li></ul></li><li>归并排序</li><li>桶排序</li><li>基数排序</li></ul><p>一些理解内容</p><ol><li>衡量排序算法的优劣：时间复杂度、空间复杂度、稳定性</li><li>排序的分类：内部排序 与 外部排序（需要借助磁盘）</li><li>不同排序算法的性能对比</li></ol><p><img src="/../img/Java%EF%BD%9C%E6%95%B0%E7%BB%84/image-7.png" alt="性能对比"></p><p>算法的五大特性</p><table><thead><tr><th>输入（Input）</th><th>有 0 个或多个输入数据，这些输入必须有清楚的描述和定义</th></tr></thead><tbody><tr><td>输出（Output）</td><td>至少有 1 个或多个输出结果，不可以没有输出结果</td></tr><tr><td>有穷性（有限性，Finiteness）</td><td>算法在有限的步骤之后会自动结束而不会无限循环，并且每一个步骤可以在可接受的时间内完成</td></tr><tr><td>确定性（明确性，Definiteness）</td><td>算法中的每一步都有确定的含义，不会出现二义性</td></tr><tr><td>可行性（有效性，Effectiveness）</td><td>算法的每一步都是清楚且可行的，能让用户用纸笔计算而求出答案</td></tr></tbody></table><h3 id="3-6-1-冒泡排序"><a href="#3-6-1-冒泡排序" class="headerlink" title="3.6.1 冒泡排序"></a>3.6.1 冒泡排序</h3><p>冒泡排序的基本思想：通过对待排序序列从前向后，依次比较相邻元素的排序码，若发现逆序则交换，使排序码较大的元素逐渐从前部移向后部。</p><p>因为排序的过程中，各元素不断接近自己的位置，如果一趟比较下来没有进行过交换，就说明序列有序， 因此要在排序过程中设置一个标志 swap 判断元素是否进行过交换。从而减少不必要的比较。</p><p><img src="/../img/Java%EF%BD%9C%E6%95%B0%E7%BB%84/1652ba31ff.gif" alt="过程图"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayTest8</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">2</span>, <span class="hljs-number">44</span>, <span class="hljs-number">11</span>, <span class="hljs-number">23</span>, <span class="hljs-number">1</span>, <span class="hljs-number">6</span>, <span class="hljs-number">47</span>, <span class="hljs-number">89</span>, <span class="hljs-number">56</span>, <span class="hljs-number">62</span>, <span class="hljs-number">38</span>, <span class="hljs-number">68</span>, <span class="hljs-number">46</span>, <span class="hljs-number">35</span>, <span class="hljs-number">99</span>&#125;;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; arr.length - i - <span class="hljs-number">1</span>; j++) &#123;<br>                <span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + <span class="hljs-number">1</span>]) &#123;<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> arr[j];<br>                    arr[j] = arr[j + <span class="hljs-number">1</span>];<br>                    arr[j + <span class="hljs-number">1</span>] = temp;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i : arr) System.out.print(i + <span class="hljs-string">&quot; &quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-6-2-快速排序"><a href="#3-6-2-快速排序" class="headerlink" title="3.6.2 快速排序"></a>3.6.2 快速排序</h3><p>这里暂时先不写，后续补充，目前冒泡，快速排序是必须掌握的内容</p><h1 id="4-Arrays-工具类的使用"><a href="#4-Arrays-工具类的使用" class="headerlink" title="4. Arrays 工具类的使用"></a>4. Arrays 工具类的使用</h1><blockquote><p>定义在 java.util 包下，Arrays 工具类提供了很多操作数组的方法，更多方法可参考 API 文档</p></blockquote><table><thead><tr><th>boolean equals(int[] a, int[] b)</th><th>判断两个数组是否相等</th></tr></thead><tbody><tr><td>String toString(int[] a)</td><td>输出数组信息</td></tr><tr><td>void fill(int[] a,int val)</td><td>将指定值填充到数组之中</td></tr><tr><td>void sort(int[] a)</td><td>对数组进行排序</td></tr><tr><td>int binarySearch(int[] a,int key)</td><td>对排序后的数组进行二分法检索指定的值</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Arrays 工具类的使用</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayTest9</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;;<br>        <span class="hljs-type">int</span>[] arr2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">9</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">7</span>&#125;;<br>        <span class="hljs-comment">// 判断两个数组是否相等</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">isEquals</span> <span class="hljs-operator">=</span> Arrays.equals(arr1, arr2);<br>        System.out.println(isEquals); <span class="hljs-comment">// false</span><br><br>        <span class="hljs-comment">// 输出数组信息</span><br>        System.out.println(Arrays.toString(arr1)); <span class="hljs-comment">// [1, 2, 3, 4]</span><br><br>        <span class="hljs-comment">// 将指定的值填充到数组中</span><br>        Arrays.fill(arr1, <span class="hljs-number">10</span>);<br>        System.out.println(Arrays.toString(arr1)); <span class="hljs-comment">// [10, 10, 10, 10]</span><br><br>        <span class="hljs-comment">// 对数组进行排序</span><br>        Arrays.sort(arr2);<br>        System.out.println(Arrays.toString(arr2)); <span class="hljs-comment">// [3, 5, 7, 9]</span><br><br>        <span class="hljs-comment">// 对排序后的 arr2 进行二分法检索指定的值</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> Arrays.binarySearch(arr2, <span class="hljs-number">5</span>);<br>        <span class="hljs-keyword">if</span> (index &gt;= <span class="hljs-number">0</span>) &#123;<br>            System.out.println(index); <span class="hljs-comment">// 1</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;未找到&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="5-数组使用中的常见异常"><a href="#5-数组使用中的常见异常" class="headerlink" title="5. 数组使用中的常见异常"></a>5. 数组使用中的常见异常</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 数组中常见异常：</span><br><span class="hljs-comment"> * 1. ArrayIndexOutOfBoundsException 数组角标越界异常</span><br><span class="hljs-comment"> * 2. NullPointerException 空指针异常</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayTest10</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>&#125;;<br>        <span class="hljs-comment">// System.out.println(arr[9]); 触发 ArrayIndexOutOfBoundsException 异常</span><br><br>        <span class="hljs-comment">// NullPointerException 空指针异常</span><br>        <span class="hljs-type">int</span>[] arr1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br>        <span class="hljs-comment">// 情况 1</span><br>        <span class="hljs-comment">// arr1 = null;</span><br>        <span class="hljs-comment">// System.out.println(arr1[0]);</span><br><br>        <span class="hljs-comment">// 情况 2</span><br>        <span class="hljs-comment">// int[][] arr2 = new int[5][];</span><br>        <span class="hljs-comment">// System.out.println(arr2[0][0]);</span><br><br>        <span class="hljs-comment">// 情况 3</span><br>        <span class="hljs-comment">// String[] arr3 = new String[]&#123;&quot;aa&quot;, &quot;bb&quot;, &quot;cc&quot;&#125;;</span><br>        <span class="hljs-comment">// arr3[0] = null;</span><br>        <span class="hljs-comment">// System.out.println(arr3[0].toString());</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>提示：一旦程序出现异常，未处理时，就终止执行。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>JavaSE</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Project01｜家庭收支记账软件</title>
    <link href="/2024/07/29/ad1de796.html"/>
    <url>/2024/07/29/ad1de796.html</url>
    
    <content type="html"><![CDATA[<h1 id="项目目标"><a href="#项目目标" class="headerlink" title="项目目标"></a>项目目标</h1><ul><li>模拟实现一个基于文本界面的《家庭收支记账软件》</li><li>掌握初步的编程技巧和调试技巧</li><li>主要涉及以下知识点：<ul><li>变量的定义</li><li>基本数据类型的使用</li><li>循环语句</li><li>分支语句</li><li>方法声明、调用和返回值的接收</li><li>简单的屏幕输出格式控制</li></ul></li></ul><h1 id="需求说明"><a href="#需求说明" class="headerlink" title="需求说明"></a>需求说明</h1><ul><li>模拟实现基于文本界面的《家庭收支记账软件》。</li><li>该软件能够记录家庭的收入、支出，并能够打印收支明细表。</li><li>项目采用分级菜单方式。主菜单如下：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">-----------------家庭收支记账软件-----------------<br><br>                   1 收支明细<br>                   2 登记收入<br>                   3 登记支出<br>                   4 退    出<br><br>                   请选择(1-4)：_<br></code></pre></td></tr></table></figure><ul><li>假设家庭起始的生活基本金为10000元。</li><li>每次登记收入（菜单2）后，收入的金额应累加到基本金上，并记录本次收入明细，以便后续的查询。</li><li>每次登记支出（菜单3）后，支出的金额应从基本金中扣除，并记录本次支出明细，以便后续的查询。</li><li>查询收支明细（ 菜单1）时，将显示所有的收入、支出名细列表</li></ul><h2 id="登记收入"><a href="#登记收入" class="headerlink" title="登记收入"></a>登记收入</h2><ul><li>“登记收入”的界面及操作过程如下所示：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">-----------------家庭收支记账软件-----------------<br><br>                   1 收支明细<br>                   2 登记收入<br>                   3 登记支出<br>                   4 退    出<br><br>                   请选择(1-4)：2<br><br>本次收入金额：1000<br>本次收入说明：劳务费_<br></code></pre></td></tr></table></figure></li></ul><h2 id="登记支出"><a href="#登记支出" class="headerlink" title="登记支出"></a>登记支出</h2><ul><li>“登记支出”的界面及操作过程如下所示：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">-----------------家庭收支记账软件-----------------<br><br>                   1 收支明细<br>                   2 登记收入<br>                   3 登记支出<br>                   4 退    出<br><br>                   请选择(1-4)：3<br><br>本次支出金额：800<br>本次支出说明：物业费_<br></code></pre></td></tr></table></figure><h2 id="收支明细"><a href="#收支明细" class="headerlink" title="收支明细"></a>收支明细</h2><ul><li>“收支明细”的界面及操作过程如下所示：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">-----------------家庭收支记账软件-----------------<br><br>                   1 收支明细<br>                   2 登记收入<br>                   3 登记支出<br>                   4 退    出<br><br>                   请选择(1-4)：1<br><br>-----------------当前收支明细记录-----------------<br>收支    账户金额        收支金额        说    明<br>收入    11000           1000            劳务费<br>支出    10200           800             物业费<br><br>-----------------------------------------------<br></code></pre></td></tr></table></figure><p>提示：明细表格的对齐，可以简单使用制表符<code>\t</code>来实现</p><h2 id="退出"><a href="#退出" class="headerlink" title="退出"></a>退出</h2><ul><li>“退  出”的界面及操作过程如下所示：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">-----------------家庭收支记账软件-----------------<br><br>                   1 收支明细<br>                   2 登记收入<br>                   3 登记支出<br>                   4 退    出<br><br>                   请选择(1-4)：4<br><br>确认是否退出(Y/N)：_<br></code></pre></td></tr></table></figure></li></ul><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><h2 id="CMUtility-类"><a href="#CMUtility-类" class="headerlink" title="CMUtility 类"></a>CMUtility 类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">Utility工具类：</span><br><span class="hljs-comment">将不同的功能封装为方法，就是可以直接通过调用方法使用它的功能，而无需考虑具体的功能实现细节。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Utility</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">用于界面菜单的选择。该方法读取键盘，如果用户键入’1’-’4’中的任意字符，则方法返回。返回值为用户键入字符。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">char</span> <span class="hljs-title function_">readMenuSelection</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">char</span> c;<br>        <span class="hljs-keyword">for</span> (; ; ) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> readKeyBoard(<span class="hljs-number">1</span>);<br>            c = str.charAt(<span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">if</span> (c != <span class="hljs-string">&#x27;1&#x27;</span> &amp;&amp; c != <span class="hljs-string">&#x27;2&#x27;</span> &amp;&amp; c != <span class="hljs-string">&#x27;3&#x27;</span> &amp;&amp; c != <span class="hljs-string">&#x27;4&#x27;</span>) &#123;<br>                System.out.print(<span class="hljs-string">&quot;选择错误，请重新输入：&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> c;<br>    &#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">用于收入和支出金额的输入。该方法从键盘读取一个不超过4位长度的整数，并将其作为方法的返回值。</span><br><span class="hljs-comment">*/</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">readNumber</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">int</span> n;<br>        <span class="hljs-keyword">for</span> (; ; ) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> readKeyBoard(<span class="hljs-number">4</span>);<br>            <span class="hljs-keyword">try</span> &#123;<br>                n = Integer.parseInt(str);<br>                <span class="hljs-keyword">break</span>;<br>            &#125; <span class="hljs-keyword">catch</span> (NumberFormatException e) &#123;<br>                System.out.print(<span class="hljs-string">&quot;数字输入错误，请重新输入：&quot;</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> n;<br>    &#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">用于收入和支出说明的输入。该方法从键盘读取一个不超过8位长度的字符串，并将其作为方法的返回值。</span><br><span class="hljs-comment">*/</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">readString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> readKeyBoard(<span class="hljs-number">8</span>);<br>        <span class="hljs-keyword">return</span> str;<br>    &#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">用于确认选择的输入。该方法从键盘读取‘Y’或’N’，并将其作为方法的返回值。</span><br><span class="hljs-comment">*/</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">char</span> <span class="hljs-title function_">readConfirmSelection</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">char</span> c;<br>        <span class="hljs-keyword">for</span> (; ; ) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> readKeyBoard(<span class="hljs-number">1</span>).toUpperCase();<br>            c = str.charAt(<span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;Y&#x27;</span> || c == <span class="hljs-string">&#x27;N&#x27;</span>) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                System.out.print(<span class="hljs-string">&quot;选择错误，请重新输入：&quot;</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> c;<br>    &#125;<br><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">readKeyBoard</span><span class="hljs-params">(<span class="hljs-type">int</span> limit)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">line</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br><br>        <span class="hljs-keyword">while</span> (scanner.hasNext()) &#123;<br>            line = scanner.nextLine();<br>            <span class="hljs-keyword">if</span> (line.length() &lt; <span class="hljs-number">1</span> || line.length() &gt; limit) &#123;<br>                System.out.print(<span class="hljs-string">&quot;输入长度（不大于&quot;</span> + limit + <span class="hljs-string">&quot;）错误，请重新输入：&quot;</span>);<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> line;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="FamilyAccount-类"><a href="#FamilyAccount-类" class="headerlink" title="FamilyAccount 类"></a>FamilyAccount 类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 简单的家庭收支练习，主要针对之前学习的知识点进行回顾</span><br><span class="hljs-comment">**/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FamilyAccount</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">details</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;收支\t账户金额\t收支金额\t说    明\n&quot;</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">balance</span> <span class="hljs-operator">=</span> <span class="hljs-number">10000</span>;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">isFlag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><br>        <span class="hljs-keyword">do</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;\n-----------------家庭收支记账软件-----------------\n&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;                    1 收支明细&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;                    2 登记收入&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;                    3 登记支出&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;                    4 退    出\n&quot;</span>);<br>            System.out.print(<span class="hljs-string">&quot;                  请选择&lt; 1~4 &gt; &quot;</span>);<br>            <br>            <span class="hljs-type">char</span> <span class="hljs-variable">menu</span> <span class="hljs-operator">=</span> Utility.readMenuSelection();<br>            <span class="hljs-keyword">switch</span>(menu)&#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;1&#x27;</span>:<br>                    System.out.println(<span class="hljs-string">&quot;-----------------当前收支明细记录-----------------&quot;</span>);<br>                    System.out.println(details);<br>                    System.out.println(<span class="hljs-string">&quot;-----------------------------------------------&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                <br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;2&#x27;</span>:<br>                    System.out.print(<span class="hljs-string">&quot;本次收入金额：&quot;</span>);<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">money1</span> <span class="hljs-operator">=</span> Utility.readNumber();<br>                    System.out.print(<span class="hljs-string">&quot;本次收入说明：&quot;</span>);<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">info1</span> <span class="hljs-operator">=</span> Utility.readString();<br>                    balance += money1;<br>                    details += <span class="hljs-string">&quot;收入\t&quot;</span> + balance + <span class="hljs-string">&quot;\t\t&quot;</span> + money1 + <span class="hljs-string">&quot;\t\t&quot;</span> + info1 + <span class="hljs-string">&quot;\n&quot;</span>;<br>                    System.out.println(<span class="hljs-string">&quot;--------------------登记完成--------------------&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                <br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;3&#x27;</span>:<br>                    System.out.print(<span class="hljs-string">&quot;本次支出金额：&quot;</span>);<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">money2</span> <span class="hljs-operator">=</span> Utility.readNumber();<br>                    <span class="hljs-keyword">if</span>(balance &gt; money2)&#123;<br>                        balance -= money2;<br>                    &#125;<span class="hljs-keyword">else</span>&#123;<br>                        System.out.println(<span class="hljs-string">&quot;支出超出账户可用额度！！！&quot;</span>);<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                    System.out.print(<span class="hljs-string">&quot;本次支出说明：&quot;</span>);<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">info2</span> <span class="hljs-operator">=</span> Utility.readString();<br>                    details += <span class="hljs-string">&quot;支出\t&quot;</span> + balance + <span class="hljs-string">&quot;\t\t&quot;</span> + money2 + <span class="hljs-string">&quot;\t\t&quot;</span> + info2 + <span class="hljs-string">&quot;\n&quot;</span>;<br>                    System.out.println(<span class="hljs-string">&quot;--------------------登记完成--------------------&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                <br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;4&#x27;</span>:<br>                    System.out.print(<span class="hljs-string">&quot;请确认是否退出(Y/N): &quot;</span>);<br>                    <span class="hljs-type">char</span> <span class="hljs-variable">exit</span> <span class="hljs-operator">=</span> Utility.readConfirmSelection();<br>                    <span class="hljs-keyword">if</span>(exit == <span class="hljs-string">&#x27;Y&#x27;</span>) isFlag = <span class="hljs-literal">false</span>;<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<span class="hljs-keyword">while</span>(isFlag);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaSE</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Java｜流程控制</title>
    <link href="/2024/07/29/b2c7cb95.html"/>
    <url>/2024/07/29/b2c7cb95.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>临渊羡鱼，不如退而结网</p></blockquote><h1 id="1-输入输出"><a href="#1-输入输出" class="headerlink" title="1. 输入输出"></a>1. 输入输出</h1><h2 id="1-1-输入"><a href="#1-1-输入" class="headerlink" title="1.1 输入"></a>1.1 输入</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InputTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-comment">// get first input</span><br>        System.out.println(<span class="hljs-string">&quot;What is your name?&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> in.nextLine();<br>        <br>        <span class="hljs-comment">// get second input</span><br>        System.out.println(<span class="hljs-string">&quot;How old are you?&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> in.nextInt();<br>        <br>        <span class="hljs-comment">// display output on console</span><br>        System.out.println(<span class="hljs-string">&quot;Hello, &quot;</span> + name + <span class="hljs-string">&quot;. Next yoar, you&#x27;ll be &quot;</span> + (age + <span class="hljs-number">1</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.base.learn;<br><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ScannerTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>        System.out.println(<span class="hljs-string">&quot;请输入你的网名：&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> scanner.next();<br><br>        System.out.println(<span class="hljs-string">&quot;请输入你的年龄：&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> scanner.nextInt();<br><br>        System.out.println(<span class="hljs-string">&quot;请输入你的体重：&quot;</span>);<br>        <span class="hljs-type">double</span> <span class="hljs-variable">weight</span> <span class="hljs-operator">=</span> scanner.nextDouble();<br><br>        System.out.println(<span class="hljs-string">&quot;你是否单身（true / false）：&quot;</span>);<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">isSingle</span> <span class="hljs-operator">=</span> scanner.nextBoolean();<br><br>        System.out.println(<span class="hljs-string">&quot;请输入的你的性别：&quot;</span>);<br>        <span class="hljs-type">char</span> <span class="hljs-variable">gender</span> <span class="hljs-operator">=</span> scanner.next().charAt(<span class="hljs-number">0</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;你的基本信息如下：&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;网名：&quot;</span> + name + <span class="hljs-string">&quot;\n年龄：&quot;</span> + age + <span class="hljs-string">&quot;\n体重：&quot;</span> + weight + <span class="hljs-string">&quot;\n单身：&quot;</span> + isSingle + <span class="hljs-string">&quot;\n性别：&quot;</span> + gender);<br><br>        scanner.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-2-输出"><a href="#1-2-输出" class="headerlink" title="1.2 输出"></a>1.2 输出</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OutputTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.print(<span class="hljs-string">&quot;A,&quot;</span>);<br>        System.out.print(<span class="hljs-string">&quot;B,&quot;</span>);<br>        System.out.print(<span class="hljs-string">&quot;C,&quot;</span>);<br>        System.out.println();<br>        System.out.println(<span class="hljs-string">&quot;END&quot;</span>);<br>        <span class="hljs-comment">// A,B,C,</span><br>        <span class="hljs-comment">// END</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-number">1230000000</span>;<br>        System.out.println(d); <span class="hljs-comment">// 1.23E9</span><br>        <br>        <span class="hljs-type">double</span> <span class="hljs-variable">d1</span> <span class="hljs-operator">=</span> <span class="hljs-number">3.1415926</span>;<br>        System.out.printf(<span class="hljs-string">&quot;%.2f\n&quot;</span>, d1); <span class="hljs-comment">// 3.14</span><br>        System.out.printf(<span class="hljs-string">&quot;%.3f\n&quot;</span>, d1); <span class="hljs-comment">// 3.142</span><br>        <br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">12345000</span>;<br>        <span class="hljs-comment">// 把一个整数格式化成十六进制，并用0补足8位</span><br>        System.out.printf(<span class="hljs-string">&quot;n=%d, hex=%08x&quot;</span>, n, n); <span class="hljs-comment">// n=12345000, hex=00bc5ea8</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Java的格式化功能提供了多种占位符，可以把各种数据类型“格式化”成指定的字符串<br />注意，由于%表示占位符，因此，连续两个%%表示一个%字符本身</p><table><thead><tr><th>占位符</th><th>说明</th></tr></thead><tbody><tr><td>%d</td><td>格式化输出整数</td></tr><tr><td>%x</td><td>格式化输出十六进制整数</td></tr><tr><td>%f</td><td>格式化输出浮点数</td></tr><tr><td>%e</td><td>格式化输出科学计数法表示的浮点数</td></tr><tr><td>%s</td><td>格式化字符串</td></tr></tbody></table><h2 id="1-3-随机数"><a href="#1-3-随机数" class="headerlink" title="1.3 随机数"></a>1.3 随机数</h2><p>如何产生一个指定范围的随机整数？</p><p>Math 类的 random() 的调用，会返回一个 [0,1) 范围的一个 double 型值</p><ul><li>Math.random() * 100 —&gt; [0,100) </li><li>(int)(Math.random() * 100) —&gt; [0,99] </li><li>(int)(Math.random() * 100) + 5 —-&gt; [5,104]</li></ul><p>如何获取 [a,b] 范围内的随机整数呢？(int)(Math.random() * (b - a + 1)) + a</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.base.learn;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MathRandomTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">d1</span> <span class="hljs-operator">=</span> Math.random();<br>        System.out.println(d1);<br><br>        <span class="hljs-comment">// 获取一个[0， 100]范围的随机整数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) (Math.random() * <span class="hljs-number">101</span>); <span class="hljs-comment">// [0.0, 1.0) --&gt; [0.0, 101.0) --&gt; [0, 100]</span><br><br>        <span class="hljs-comment">// 获取一个[1， 100]范围的随机整数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) (Math.random() * <span class="hljs-number">100</span>) + <span class="hljs-number">1</span>; <span class="hljs-comment">// [0.0, 1.0) --&gt; [0.0, 100.0) --&gt; [0, 99] --&gt; [1, 100]</span><br><br>        <span class="hljs-comment">// 获取一个 [a, b] 范围的随机整数，举例 [4, 15]</span><br>        <span class="hljs-comment">// (int)(Math.random()*(b - a + 1)) + a</span><br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">num3</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) (Math.random() * (<span class="hljs-number">15</span> - <span class="hljs-number">4</span> + <span class="hljs-number">1</span>)) + <span class="hljs-number">4</span>;<br>        System.out.println(num3);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="2-条件语句"><a href="#2-条件语句" class="headerlink" title="2. 条件语句"></a>2. 条件语句</h1><h2 id="2-1-if-else"><a href="#2-1-if-else" class="headerlink" title="2.1 if-else"></a>2.1 if-else</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">IfTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">70</span>;<br>        <span class="hljs-keyword">if</span> (n &gt;= <span class="hljs-number">60</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;及格了&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;END&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 及格了</span><br></code></pre></td></tr></table></figure><p>当 <code>if</code> 语句只有一行语句时，可以省略花括号 {}、但是不推荐忽略花括号的这种写法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">IfTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">50</span>;<br>        <span class="hljs-keyword">if</span> (n &gt;= <span class="hljs-number">60</span>)<br>            System.out.println(<span class="hljs-string">&quot;及格了&quot;</span>);<br>        <span class="hljs-keyword">else</span><br>            System.out.println(<span class="hljs-string">&quot;END&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">// END</span><br></code></pre></td></tr></table></figure><p>多个<code> if ... esle if ...</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">IfTest1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span>  <span class="hljs-number">70</span>;<br>        <span class="hljs-keyword">if</span> (n &gt; <span class="hljs-number">90</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;优秀&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (n &gt;= <span class="hljs-number">60</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;及格&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;挂科&quot;</span>);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;END&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 及格</span><br><span class="hljs-comment">// END</span><br></code></pre></td></tr></table></figure><p>if 条件语句从上到下执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>        <span class="hljs-keyword">if</span> (n &gt;= <span class="hljs-number">60</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;及格了&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (n &gt;= <span class="hljs-number">90</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;优秀&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;挂科了&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 及格了</span><br></code></pre></td></tr></table></figure><p>浮点数在计算机中常常无法精确计算，并且计算可能出现误差，因此判断浮点数相等用 <code>==</code> 判断不靠谱</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">IfTest2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span> - <span class="hljs-number">9.0</span> / <span class="hljs-number">10</span>;<br>        System.out.println(x); <span class="hljs-comment">// 0.09999999999999998</span><br>        <span class="hljs-keyword">if</span> (x == <span class="hljs-number">0.1</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;x is 0.1&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;x is not 0.1&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// x is not 0.1</span><br></code></pre></td></tr></table></figure><p>正确的方法是利用差值小于某个临界值来判断</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">IfTest2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span> - <span class="hljs-number">9.0</span> / <span class="hljs-number">10</span>;<br>        System.out.println(x); <span class="hljs-comment">// 0.09999999999999998</span><br>        <span class="hljs-keyword">if</span> (Math.abs(x - <span class="hljs-number">0.1</span>) &lt; <span class="hljs-number">0.00001</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;x is 0.1&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;x is not 0.1&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// x is 0.1</span><br></code></pre></td></tr></table></figure><p>在 Java 中，判断类型的变量值是否相等，可以使用 <code>==</code> 运算符。但是，判断引用类型的变量是否相等， <code>==</code> 表示”引用的是否相等”，或者说，是否指向同一个对象</p><p>例如，下面的两个String类型，它们内容是相同的，但是分别指向不同的对象，用 <code>==</code> 来判断，结果为 false</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;HELLO&quot;</span>.toLowerCase();<br>        System.out.println(s1); <span class="hljs-comment">// hello</span><br>        System.out.println(s2); <span class="hljs-comment">// hello</span><br>        <span class="hljs-keyword">if</span> (s1 == s2) &#123;<br>            System.out.println(<span class="hljs-string">&quot;s1 = s2&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;s1 != s2&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// s1 != s2</span><br></code></pre></td></tr></table></figure><p>要判断引用类型的值是否相等，必须使用 <code>equals()</code> 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;HELLO&quot;</span>.toLowerCase();<br>        System.out.println(s1); <span class="hljs-comment">// hello</span><br>        System.out.println(s2); <span class="hljs-comment">// hello</span><br>        <span class="hljs-keyword">if</span> (s1.equals(s2)) &#123;<br>            System.out.println(<span class="hljs-string">&quot;s1 = s2&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;s1 != s2&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// s1 = s2</span><br></code></pre></td></tr></table></figure><p>要避免 <code>NullPointerException</code> 错误，可以利用短路运算符 &amp;&amp;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">if</span> (s1 != <span class="hljs-literal">null</span> &amp;&amp; s1.equals(<span class="hljs-string">&quot;hello&quot;</span>)) &#123;<br>            System.out.println(<span class="hljs-string">&quot;hello&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><blockquote><p>心率检测，成年人心率的正常范围是每分钟60-100次。体检时，如果心率不在此范围内，则提示需要做进一步的检查</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IfElseTest1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">heartBeats</span> <span class="hljs-operator">=</span> <span class="hljs-number">110</span>;<br><br>        <span class="hljs-keyword">if</span> (heartBeats &lt; <span class="hljs-number">60</span> || heartBeats &gt; <span class="hljs-number">100</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;你需要进一步检查&quot;</span>);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;体检结束&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h3><blockquote><p>定义一个整数，判定是偶数还是奇数 </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IfElesTest2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">11</span>;<br>        <span class="hljs-keyword">if</span> (a % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) &#123;<br>            System.out.println(a + <span class="hljs-string">&quot;是偶数&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(a + <span class="hljs-string">&quot;是奇数&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="案例-2"><a href="#案例-2" class="headerlink" title="案例"></a>案例</h3><blockquote><p>考试成绩判定</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">岳小鹏参加Java考试，他和父亲岳不群达成承诺：</span><br><span class="hljs-comment">如果：</span><br><span class="hljs-comment">成绩为100分时，奖励一辆跑车；</span><br><span class="hljs-comment">成绩为(80，99]时，奖励一辆山地自行车；</span><br><span class="hljs-comment">当成绩为[60,80]时，奖励环球影城一日游；</span><br><span class="hljs-comment">其它时，胖揍一顿。</span><br><span class="hljs-comment">说明：默认成绩是在[0,100]范围内</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IfElesTest3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">score</span> <span class="hljs-operator">=</span> <span class="hljs-number">55</span>; <span class="hljs-comment">// 成绩</span><br><br>        <span class="hljs-comment">// 默认成绩范围为[0,100]</span><br>        <span class="hljs-keyword">if</span> (score == <span class="hljs-number">100</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;奖励一辆跑车&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (score &gt; <span class="hljs-number">80</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;奖励一辆山地车&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (score &gt; <span class="hljs-number">60</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;奖励环球影城玩一日游&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;胖揍一顿&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="案例-3"><a href="#案例-3" class="headerlink" title="案例"></a>案例</h3><blockquote><p>三个数大小比较</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IfElesTest4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 声明num1、num2、num3 三个变量并赋值</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> <span class="hljs-number">22</span>, num2 = <span class="hljs-number">32</span>, num3 = <span class="hljs-number">12</span>;<br><br>        <span class="hljs-keyword">if</span> (num1 &gt;= num2)&#123;<br>            <span class="hljs-keyword">if</span> (num3 &gt;= num1)<br>                System.out.println(num2 + <span class="hljs-string">&quot;-&quot;</span> + num1 + <span class="hljs-string">&quot;-&quot;</span> + num3);<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (num3 &lt;= num2)<br>                System.out.println(num3 + <span class="hljs-string">&quot;-&quot;</span> + num2 + <span class="hljs-string">&quot;-&quot;</span> + num1);<br>            <span class="hljs-keyword">else</span><br>                System.out.println(num2 + <span class="hljs-string">&quot;-&quot;</span> + num3 + <span class="hljs-string">&quot;-&quot;</span> + num3);<br>        &#125;<span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// num1 &lt; num2</span><br>            <span class="hljs-keyword">if</span> (num3 &gt;= num2)<br>                System.out.println(num1 + <span class="hljs-string">&quot;-&quot;</span> + num2 + <span class="hljs-string">&quot;-&quot;</span> + num3);<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (num3 &lt;= num1)<br>                System.out.println(num3 + <span class="hljs-string">&quot;-&quot;</span> + num1 + <span class="hljs-string">&quot;-&quot;</span> + num2);<br>            <span class="hljs-keyword">else</span><br>                System.out.println(num1 + <span class="hljs-string">&quot;-&quot;</span> + num3 + <span class="hljs-string">&quot;-&quot;</span> + num2);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="2-2-switch-case"><a href="#2-2-switch-case" class="headerlink" title="2.2 switch case"></a>2.2 switch case</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">SwitchTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">option</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">switch</span> (option) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                System.out.println(<span class="hljs-string">&quot;Selected 1&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                System.out.println(<span class="hljs-string">&quot;Selected 2&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>                System.out.println(<span class="hljs-string">&quot;Selected 3&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                System.out.println(<span class="hljs-string">&quot;Selected 4&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>switch 语句还可以匹配字符串。字符串匹配时，是比较”内容相等”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">SwitchTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">option</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Java&quot;</span>;<br>        <span class="hljs-keyword">switch</span> (option) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;Python&quot;</span>:<br>                System.out.println(<span class="hljs-string">&quot;Python&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;C&quot;</span>:<br>                System.out.println(<span class="hljs-string">&quot;C&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;Java&quot;</span>:<br>                System.out.println(<span class="hljs-string">&quot;Java&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                System.out.println(<span class="hljs-string">&quot;Go&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="案例-4"><a href="#案例-4" class="headerlink" title="案例"></a>案例</h3><blockquote><p>使用 switch-case 实现：对学生成绩大于 60 分的，输出“合格”。低于 60 分的，输出“不合格”</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.base.learn;<br><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 使用switch-case实现：对学生成绩大于60分的，输出“合格”。低于60分的，输出“不合格”</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SwitchCaseTest3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;请输入成绩：&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">score</span> <span class="hljs-operator">=</span> scanner.nextInt();<br><br>        <span class="hljs-keyword">switch</span> (score / <span class="hljs-number">60</span>) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>                System.out.println(<span class="hljs-string">&quot;不及格&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                System.out.println(<span class="hljs-string">&quot;及格了&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                System.out.println(<span class="hljs-string">&quot;输入的成绩有误&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>        scanner.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="利用-switch-的穿透性"><a href="#利用-switch-的穿透性" class="headerlink" title="利用 switch 的穿透性"></a>利用 switch 的穿透性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.base.learn;<br><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 从键盘上输入2023年的“month”和“day”，要求通过程序输出输入的日期为2023年的第几天。</span><br><span class="hljs-comment"> * 利用 switch 的穿透性，更简单点</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SwitchCaseTest4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scan</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>        System.out.println(<span class="hljs-string">&quot;请输入2023年的month:&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">month</span> <span class="hljs-operator">=</span> scan.nextInt();<br><br>        System.out.println(<span class="hljs-string">&quot;请输入2023年的day:&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">day</span> <span class="hljs-operator">=</span> scan.nextInt();<br><br>        <span class="hljs-comment">//这里就不针对month和day进行合法性的判断了，以后可以使用正则表达式进行校验。</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">sumDays</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//记录总天数</span><br><br>        <span class="hljs-comment">//写法2：推荐</span><br>        <span class="hljs-keyword">switch</span>(month)&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">12</span>:<br>                sumDays += <span class="hljs-number">30</span>;<span class="hljs-comment">//这个30是代表11月份的满月天数</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-number">11</span>:<br>                sumDays += <span class="hljs-number">31</span>;<span class="hljs-comment">//这个31是代表10月份的满月天数</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-number">10</span>:<br>                sumDays += <span class="hljs-number">30</span>;<span class="hljs-comment">//这个30是代表9月份的满月天数</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-number">9</span>:<br>                sumDays += <span class="hljs-number">31</span>;<span class="hljs-comment">//这个31是代表8月份的满月天数</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-number">8</span>:<br>                sumDays += <span class="hljs-number">31</span>;<span class="hljs-comment">//这个31是代表7月份的满月天数</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br>                sumDays += <span class="hljs-number">30</span>;<span class="hljs-comment">//这个30是代表6月份的满月天数</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>                sumDays += <span class="hljs-number">31</span>;<span class="hljs-comment">//这个31是代表5月份的满月天数</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>                sumDays += <span class="hljs-number">30</span>;<span class="hljs-comment">//这个30是代表4月份的满月天数</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>                sumDays += <span class="hljs-number">31</span>;<span class="hljs-comment">//这个31是代表3月份的满月天数</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>                sumDays += <span class="hljs-number">28</span>;<span class="hljs-comment">//这个28是代表2月份的满月天数</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                sumDays += <span class="hljs-number">31</span>;<span class="hljs-comment">//这个31是代表1月份的满月天数</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                sumDays += day;<span class="hljs-comment">//这个day是代表当月的第几天</span><br>        &#125;<br><br>        System.out.println(month + <span class="hljs-string">&quot;月&quot;</span> + day + <span class="hljs-string">&quot;日是2023年的第&quot;</span> + sumDays + <span class="hljs-string">&quot;天&quot;</span>);<br>        <span class="hljs-comment">//关闭资源</span><br>        scan.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.base.learn;<br><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">从键盘分别输入年、月、日，判断这一天是当年的第几天</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">注：判断一年是否是闰年的标准：</span><br><span class="hljs-comment">   1）可以被4整除，但不可被100整除</span><br><span class="hljs-comment">  或</span><br><span class="hljs-comment">   2）可以被400整除</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">例如：1900，2200等能被4整除，但同时能被100整除，但不能被400整除，不是闰年</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SwitchCaseTest5</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;请输入year：&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">year</span> <span class="hljs-operator">=</span> scanner.nextInt();<br><br>        System.out.println(<span class="hljs-string">&quot;请输入month：&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">month</span> <span class="hljs-operator">=</span> scanner.nextInt();<br><br>        System.out.println(<span class="hljs-string">&quot;请输入day：&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">day</span> <span class="hljs-operator">=</span> scanner.nextInt();<br><br>        <span class="hljs-comment">//声明一个变量days，用来存储总天数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">sumDays</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-comment">//累加[1,month-1]个月满月天数</span><br>        <span class="hljs-keyword">switch</span> (month) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">12</span>:<br>                sumDays += <span class="hljs-number">30</span>;<span class="hljs-comment">//这个30是代表11月份的满月天数</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-number">11</span>:<br>                sumDays += <span class="hljs-number">31</span>;<span class="hljs-comment">//这个31是代表10月的满月天数</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-number">10</span>:<br>                sumDays += <span class="hljs-number">30</span>;<span class="hljs-comment">//9月</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-number">9</span>:<br>                sumDays += <span class="hljs-number">31</span>;<span class="hljs-comment">//8月</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-number">8</span>:<br>                sumDays += <span class="hljs-number">31</span>;<span class="hljs-comment">//7月</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br>                sumDays += <span class="hljs-number">30</span>;<span class="hljs-comment">//6月</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>                sumDays += <span class="hljs-number">31</span>;<span class="hljs-comment">//5月</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>                sumDays += <span class="hljs-number">30</span>;<span class="hljs-comment">//4月</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>                sumDays += <span class="hljs-number">31</span>;<span class="hljs-comment">//3月</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>                sumDays += <span class="hljs-number">28</span>;<span class="hljs-comment">//2月</span><br>                <span class="hljs-comment">//在这里考虑是否可能是29天</span><br>                <span class="hljs-keyword">if</span> (year % <span class="hljs-number">4</span> == <span class="hljs-number">0</span> &amp;&amp; year % <span class="hljs-number">100</span> != <span class="hljs-number">0</span> || year % <span class="hljs-number">400</span> == <span class="hljs-number">0</span>) &#123;<br>                    sumDays++;<span class="hljs-comment">//多加1天</span><br>                &#125;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                sumDays += <span class="hljs-number">31</span>;<span class="hljs-comment">//1月</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                sumDays += day;<span class="hljs-comment">//第month月的day天</span><br>        &#125;<br>        <span class="hljs-comment">//输出结果</span><br>        System.out.println(year + <span class="hljs-string">&quot;年&quot;</span> + month + <span class="hljs-string">&quot;月&quot;</span> + day + <span class="hljs-string">&quot;日是这一年的第&quot;</span> + sumDays + <span class="hljs-string">&quot;天&quot;</span>);<br>        scanner.close();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="案例-5"><a href="#案例-5" class="headerlink" title="案例"></a>案例</h3><blockquote><p>指定一个月份，输出该月份对应的季节</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.base.learn;<br><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 需求：指定一个月份，输出该月份对应的季节。一年有四季:</span><br><span class="hljs-comment"> * 3,4,5春季</span><br><span class="hljs-comment"> * 6,7,8夏季</span><br><span class="hljs-comment"> * 9,10,11秋季</span><br><span class="hljs-comment"> * 12,1,2冬季</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SwitchCaseTest33</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;请输入月份：&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">month</span> <span class="hljs-operator">=</span> input.nextInt();<br><br>        <span class="hljs-keyword">switch</span> (month) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">12</span>:<br>                System.out.println(<span class="hljs-string">&quot;冬季&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>                System.out.println(<span class="hljs-string">&quot;春季&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">8</span>:<br>                System.out.println(<span class="hljs-string">&quot;夏季&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">9</span>:<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">10</span>:<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">11</span>:<br>                System.out.println(<span class="hljs-string">&quot;秋季&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                System.out.println(<span class="hljs-string">&quot;你输入得月份有误&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>        input.close();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="2-3-if-else与switch-case比较"><a href="#2-3-if-else与switch-case比较" class="headerlink" title="2.3 if-else与switch-case比较"></a>2.3 if-else与switch-case比较</h2><ul><li>结论：凡是使用switch-case的结构都可以转换为if-else结构。反之，不成立。 </li><li>开发经验：如果既可以使用switch-case，又可以使用if-else，建议使用switch-case。因为效率稍高。 </li><li>细节对比： <ul><li>if-else语句优势 <ul><li>if语句的条件是一个布尔类型值，if条件表达式为true则进入分支，可以用于范围的判断，也可以用于等值的判断，<code>使用范围更广</code>。</li><li>switch语句的条件是一个常量值（byte,short,int,char,枚举,String），只能判断某个变量或表达式的结果是否等于某个常量值，<code>使用场景较狭窄</code>。</li></ul></li><li>switch语句优势 <ul><li>当条件是判断某个变量或表达式是否等于某个固定的常量值时，使用if和switch都可以，习惯上使用switch更多。因为<code>效率稍高</code>。当条件是区间范围的判断时，只能使用if语句。</li><li>使用switch可以利用<code>穿透性</code>，同时执行多个分支，而if…else没有穿透性。</li></ul></li></ul></li></ul><h1 id="3-循环结构"><a href="#3-循环结构" class="headerlink" title="3. 循环结构"></a>3. 循环结构</h1><h2 id="3-1-while-循环"><a href="#3-1-while-循环" class="headerlink" title="3.1 while 循环"></a>3.1 while 循环</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">WhlieTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(x &lt;= <span class="hljs-number">100</span>) &#123;<br>            sum += x;<br>            x++;<br>        &#125;<br>        System.out.println(sum); <span class="hljs-comment">//  5050</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-2-do-while-循环"><a href="#3-2-do-while-循环" class="headerlink" title="3.2 do-while 循环"></a>3.2 do-while 循环</h2><p>do…while 循环和 while 循环相似，不同的是，do…while 循环至少会执行一次</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">WhlieTest1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">do</span> &#123;<br>            sum += x;<br>            x++;<br>        &#125;<span class="hljs-keyword">while</span>(x &lt; <span class="hljs-number">10</span>);<br>        System.out.print(sum); <span class="hljs-comment">// 10</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-3-for-循环"><a href="#3-3-for-循环" class="headerlink" title="3.3 for 循环"></a>3.3 for 循环</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ForTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100</span>; i++) &#123;<br>            sum += i;<br>        &#125;<br>        System.out.println(sum); <span class="hljs-comment">// 5050</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>对整形数组的所有元素求和，可以使用 for 循环实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ForTest1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span>[] ns = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">11</span>, <span class="hljs-number">23</span>, <span class="hljs-number">35</span>&#125;;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; ns.length; i++) &#123;<br>            System.out.println(i + <span class="hljs-string">&quot;,&quot;</span> + ns[i]);<br>            sum += ns[i];<br>        &#125;<br>        System.out.println(sum); <span class="hljs-comment">// 88</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>灵活使用 for 循环，for 循环还可以缺少初始化语句，循环条件和每次迭代更新语句，如下<br>通常不建议这样写，某些情况下，是可以省略 for 循环的某些语句</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 不设置结束条件</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; ; i++)&#123;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 不设置结束条件和更新语句</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; ;)&#123;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 什么都不设置</span><br><span class="hljs-keyword">for</span> (; ;)&#123;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-4-for-each-循环"><a href="#3-4-for-each-循环" class="headerlink" title="3.4 for each 循环"></a>3.4 for each 循环</h2><p>for 循环经常用来遍历数组，因为通过计数器可以根据索引来访问数组的每个元素，但是，很多时候，我们实际上真正想要访问的数组每个元素的值，Java 还提供了另一种 <code>for each</code> 循环，它可以更简单的遍历数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ForTest2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] ns = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">12</span>, <span class="hljs-number">29</span>, <span class="hljs-number">18</span>&#125;;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : ns) &#123;<br>            System.out.println(i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-5-break-关键字"><a href="#3-5-break-关键字" class="headerlink" title="3.5 break 关键字"></a>3.5 break 关键字</h2><p>break 主要用在循环语句或者 switch 语句中，用来跳出整个语句块</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">BreakTest</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; ; i++)&#123;<br>            sum += i;<br>            <span class="hljs-keyword">if</span> (i == <span class="hljs-number">100</span>)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        System.out.println(sum); <span class="hljs-comment">// 5050</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>break 语句通常都是配合 if 语句使用，特别注意，break 语句总是能跳出自己所在的那层循环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">BreakTest1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=<span class="hljs-number">10</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;i = &quot;</span> + i);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>; j&lt;=<span class="hljs-number">10</span>; j++) &#123;<br>                System.out.println(<span class="hljs-string">&quot;j = &quot;</span> + j);<br>                <span class="hljs-keyword">if</span> (j &gt;= i)&#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;---------&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-6-continue-关键字"><a href="#3-6-continue-关键字" class="headerlink" title="3.6 continue 关键字"></a>3.6 continue 关键字</h2><p>break 会跳出当前循环，也就是整个循环都不会执行了。而 continue 则是提前结束本次循环，直接继续执行下次循环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ContinueTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] ns = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>&#125;;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> x : ns) &#123;<br>            <span class="hljs-keyword">if</span> (x == <span class="hljs-number">6</span>) &#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            System.out.println(x);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 1</span><br><span class="hljs-comment">// 4</span><br><span class="hljs-comment">// 8</span><br></code></pre></td></tr></table></figure><h2 id="3-7-使用-label-标签"><a href="#3-7-使用-label-标签" class="headerlink" title="3.7 使用 label 标签"></a>3.7 使用 label 标签</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Java 中的标签是为循环设计的，是为了在多重循环中方便的使用 break 和 coutinue</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment">**/</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BreakTest1</span> &#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        inner:<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">3</span>; j++)&#123;<br>                <span class="hljs-keyword">if</span>(i == <span class="hljs-number">1</span> &amp;&amp; j == <span class="hljs-number">1</span>) <span class="hljs-keyword">break</span> inner;<br>                System.out.println(i + <span class="hljs-string">&quot;, &quot;</span> + j);<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;结尾&quot;</span>);<br>    &#125; <br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">0, 0</span><br><span class="hljs-comment">0, 1</span><br><span class="hljs-comment">0, 2</span><br><span class="hljs-comment">1, 0</span><br><span class="hljs-comment">结尾</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h1 id="4-练习题"><a href="#4-练习题" class="headerlink" title="4. 练习题"></a>4. 练习题</h1><h2 id="4-1-最大公约数，最小公倍数"><a href="#4-1-最大公约数，最小公倍数" class="headerlink" title="4.1 最大公约数，最小公倍数"></a>4.1 最大公约数，最小公倍数</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 求两个正整数的最大公约数和最小公倍数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ForTest</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scan</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;请输入第一个正整数&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> scan.nextInt();<br><br>        System.out.println(<span class="hljs-string">&quot;请输入第二个正整数&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> scan.nextInt();<br><br>        <span class="hljs-comment">// 获取最大公约数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">min</span> <span class="hljs-operator">=</span> (m &lt;= n)? m : n;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=min; i &gt;= <span class="hljs-number">1</span>; i--)&#123;<br>            <span class="hljs-keyword">if</span>(m % i ==<span class="hljs-number">0</span> &amp;&amp; n % i == <span class="hljs-number">0</span>)&#123;<br>                 System.out.println(<span class="hljs-string">&quot;最大公约数为：&quot;</span> + i);<br>                 <span class="hljs-keyword">break</span>;<br>                &#125;<br>        &#125;<br>    <br>        <span class="hljs-comment">// 获取最小公倍数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> (m &gt;= n)? m : n;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> max; i &lt;= m * n; i++)&#123;<br>            <span class="hljs-keyword">if</span>(i % m == <span class="hljs-number">0</span> &amp;&amp; i % n == <span class="hljs-number">0</span>)&#123;<br>                System.out.println(<span class="hljs-string">&quot;最小公倍数为：&quot;</span> + i);<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-2-水仙花"><a href="#4-2-水仙花" class="headerlink" title="4.2 水仙花"></a>4.2 水仙花</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 水仙花</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment">**/</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ForTest2</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>; i &lt;= <span class="hljs-number">999</span>; i++)&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> i / <span class="hljs-number">100</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> i % <span class="hljs-number">100</span> / <span class="hljs-number">10</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> i % <span class="hljs-number">10</span>;<br>            <span class="hljs-keyword">if</span>(a*a*a + b*b*b + c*c*c == i)&#123;<br>                System.out.println(<span class="hljs-string">&quot;此数值满足水仙花：&quot;</span> + i);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-3-计算100内所有偶数的和"><a href="#4-3-计算100内所有偶数的和" class="headerlink" title="4.3 计算100内所有偶数的和"></a>4.3 计算100内所有偶数的和</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 使用 do-while 遍历100以内所有的偶数，并计算所有偶数的和和偶数的个数</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment">**/</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DoWhlieTest</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">do</span>&#123;<br>            <span class="hljs-keyword">if</span>(number % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)&#123;<br>                System.out.println(number);<br>                sum += number;<br>                count++;<br>            &#125;<br>            number++;<br>        &#125;<span class="hljs-keyword">while</span>(number &lt;= <span class="hljs-number">100</span>);<br>        System.out.println(<span class="hljs-string">&quot;总和为：&quot;</span> + sum);<br>        System.out.println(<span class="hljs-string">&quot;个数为：&quot;</span> + count);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-4-不确定整数的个数统计"><a href="#4-4-不确定整数的个数统计" class="headerlink" title="4.4 不确定整数的个数统计"></a>4.4 不确定整数的个数统计</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 从键盘输入个数不确定的整数，并判断读入的正数和负数的个数，输入为0时结束程序</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment">**/</span><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">XunTest</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scan</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">positive_int</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">negative_int</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> scan.nextInt();<br>            <span class="hljs-keyword">if</span>(number &gt; <span class="hljs-number">0</span>)&#123;<br>                positive_int++;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(number &lt; <span class="hljs-number">0</span>)&#123;<br>                negative_int++;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;正整数的个数：&quot;</span> + positive_int);<br>        System.out.println(<span class="hljs-string">&quot;负整数的个数：&quot;</span> + negative_int);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-5-循环嵌套例子"><a href="#4-5-循环嵌套例子" class="headerlink" title="4.5 循环嵌套例子"></a>4.5 循环嵌套例子</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 常见循环嵌套的例子</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment">**/</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ForForTest</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        **********</span><br><span class="hljs-comment">        **********</span><br><span class="hljs-comment">        **********</span><br><span class="hljs-comment">        **********</span><br><span class="hljs-comment">        **********</span><br><span class="hljs-comment">        */</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">6</span>; i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">10</span>; j++)&#123;<br>                System.out.print(<span class="hljs-string">&quot;*&quot;</span>);<br>            &#125;<br>            System.out.println();<br>        &#125;<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        *</span><br><span class="hljs-comment">        **</span><br><span class="hljs-comment">        ***</span><br><span class="hljs-comment">        ****</span><br><span class="hljs-comment">        *****</span><br><span class="hljs-comment">        ******</span><br><span class="hljs-comment">        */</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">6</span>; i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;= i; j++)&#123;<br>                System.out.print(<span class="hljs-string">&quot;*&quot;</span>);<br>            &#125;<br>            System.out.println();<br>        &#125;<br>        <br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        *****</span><br><span class="hljs-comment">        ****</span><br><span class="hljs-comment">        ***</span><br><span class="hljs-comment">        **</span><br><span class="hljs-comment">        *</span><br><span class="hljs-comment">        */</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">6</span>; i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">6</span>-i; j++)&#123;<br>                System.out.print(<span class="hljs-string">&quot;*&quot;</span>);<br>            &#125;<br>            System.out.println();<br>        &#125;<br>        <br>        <span class="hljs-comment">// 乘法口诀表</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        1*1=1</span><br><span class="hljs-comment">        1*2=2   2*2=4</span><br><span class="hljs-comment">        1*3=3   2*3=6    3*3=9</span><br><span class="hljs-comment">        1*4=4   2*4=8    3*4=12   4*4=16</span><br><span class="hljs-comment">        1*5=5   2*5=10   3*5=15   4*5=20   5*5=25</span><br><span class="hljs-comment">        1*6=6   2*6=12   3*6=18   4*6=24   5*6=30   6*6=36</span><br><span class="hljs-comment">        1*7=7   2*7=14   3*7=21   4*7=28   5*7=35   6*7=42   7*7=49</span><br><span class="hljs-comment">        1*8=8   2*8=16   3*8=24   4*8=32   5*8=40   6*8=48   7*8=56   8*8=64</span><br><span class="hljs-comment">        1*9=9   2*9=18   3*9=27   4*9=36   5*9=45   6*9=54   7*9=63   8*9=72   9*9=81</span><br><span class="hljs-comment">        */</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">9</span>; i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;= i; j++)&#123;<br>                System.out.print(j + <span class="hljs-string">&quot;*&quot;</span> + i + <span class="hljs-string">&quot;=&quot;</span> + j*i + <span class="hljs-string">&quot;\t&quot;</span>);<br>            &#125;<br>            System.out.println();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-6-质数"><a href="#4-6-质数" class="headerlink" title="4.6 质数"></a>4.6 质数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 100以内的所有质数的输出</span><br><span class="hljs-comment"> * 质数：只能被1和它本身整除的自然数</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment">**/</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">PrimeNumberTest</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">isFlag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; i &lt;= <span class="hljs-number">100</span>; i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; j &lt; i; j++)&#123;<br>                <span class="hljs-keyword">if</span>(i % j == <span class="hljs-number">0</span>)&#123;<br>                   isFlag = <span class="hljs-literal">false</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(isFlag == <span class="hljs-literal">true</span>)&#123;<br>                System.out.println(i);<br>            &#125;<br>            isFlag = <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>质数查找优化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 100以内的所有质数的输出</span><br><span class="hljs-comment"> * 质数：只能被1和它本身整除的自然数，优化版本</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment">**/</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">PrimeNumberTest</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">isFlag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; i &lt;= <span class="hljs-number">100000</span>; i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; j &lt;= Math.sqrt(i); j++)&#123;<br>                <span class="hljs-keyword">if</span>(i % j == <span class="hljs-number">0</span>)&#123;<br>                   isFlag = <span class="hljs-literal">false</span>;<br>                   <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(isFlag == <span class="hljs-literal">true</span>)&#123;<br>                <span class="hljs-comment">//System.out.println(i);</span><br>                count++;<br>            &#125;<br>            isFlag = <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;质数的个数为：&quot;</span> + count);<br>        System.out.println(<span class="hljs-string">&quot;所花费的时间为：&quot;</span> + (end - start));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="5-最后的总结"><a href="#5-最后的总结" class="headerlink" title="5. 最后的总结"></a>5. 最后的总结</h1><p>家庭收支记账练习 Demo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 简单的家庭收支练习，主要针对之前学习的知识点进行回顾</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment">**/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FamilyAccount</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">details</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;收支\t账户金额\t收支金额\t说    明\n&quot;</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">balance</span> <span class="hljs-operator">=</span> <span class="hljs-number">10000</span>;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">isFlag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><br>        <span class="hljs-keyword">do</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;\n-----------------家庭收支记账软件-----------------\n&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;                    1 收支明细&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;                    2 登记收入&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;                    3 登记支出&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;                    4 退    出\n&quot;</span>);<br>            System.out.print(<span class="hljs-string">&quot;                  请选择&lt; 1~4 &gt; &quot;</span>);<br>            <br>            <span class="hljs-type">char</span> <span class="hljs-variable">menu</span> <span class="hljs-operator">=</span> Utility.readMenuSelection();<br>            <span class="hljs-keyword">switch</span>(menu)&#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;1&#x27;</span>:<br>                    System.out.println(<span class="hljs-string">&quot;-----------------当前收支明细记录-----------------&quot;</span>);<br>                    System.out.println(details);<br>                    System.out.println(<span class="hljs-string">&quot;--------------------------------------------------&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                <br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;2&#x27;</span>:<br>                    System.out.print(<span class="hljs-string">&quot;本次收入金额：&quot;</span>);<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">money1</span> <span class="hljs-operator">=</span> Utility.readNumber();<br>                    System.out.print(<span class="hljs-string">&quot;本次收入说明：&quot;</span>);<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">info1</span> <span class="hljs-operator">=</span> Utility.readString();<br>                    balance += money1;<br>                    details += <span class="hljs-string">&quot;收入\t&quot;</span> + balance + <span class="hljs-string">&quot;\t\t&quot;</span> + money1 + <span class="hljs-string">&quot;\t\t&quot;</span> + info1 + <span class="hljs-string">&quot;\n&quot;</span>;<br>                    System.out.println(<span class="hljs-string">&quot;---------------------登记完成---------------------&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                <br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;3&#x27;</span>:<br>                    System.out.print(<span class="hljs-string">&quot;本次支出金额：&quot;</span>);<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">money2</span> <span class="hljs-operator">=</span> Utility.readNumber();<br>                    <span class="hljs-keyword">if</span>(balance &gt; money2)&#123;<br>                        balance -= money2;<br>                    &#125;<span class="hljs-keyword">else</span>&#123;<br>                        System.out.println(<span class="hljs-string">&quot;支出超出账户可用额度！！！&quot;</span>);<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                    System.out.print(<span class="hljs-string">&quot;本次支出说明：&quot;</span>);<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">info2</span> <span class="hljs-operator">=</span> Utility.readString();<br>                    details += <span class="hljs-string">&quot;支出\t&quot;</span> + balance + <span class="hljs-string">&quot;\t\t&quot;</span> + money2 + <span class="hljs-string">&quot;\t\t&quot;</span> + info2 + <span class="hljs-string">&quot;\n&quot;</span>;<br>                    System.out.println(<span class="hljs-string">&quot;---------------------登记完成---------------------&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                <br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;4&#x27;</span>:<br>                    System.out.print(<span class="hljs-string">&quot;请确认是否退出(Y/N): &quot;</span>);<br>                    <span class="hljs-type">char</span> <span class="hljs-variable">exit</span> <span class="hljs-operator">=</span> Utility.readConfirmSelection();<br>                    <span class="hljs-keyword">if</span>(exit == <span class="hljs-string">&#x27;Y&#x27;</span>) isFlag = <span class="hljs-literal">false</span>;<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<span class="hljs-keyword">while</span>(isFlag);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Utility工具类：</span><br><span class="hljs-comment"> * 将不同的功能封装为方法，就是可以直接通过调用方法使用它的功能，而无需考虑具体的功能实现细节。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Utility</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">用于界面菜单的选择。该方法读取键盘，如果用户键入’1’-’4’中的任意字符，则方法返回。返回值为用户键入字符。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">char</span> <span class="hljs-title function_">readMenuSelection</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">char</span> c;<br>        <span class="hljs-keyword">for</span> (; ; ) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> readKeyBoard(<span class="hljs-number">1</span>);<br>            c = str.charAt(<span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">if</span> (c != <span class="hljs-string">&#x27;1&#x27;</span> &amp;&amp; c != <span class="hljs-string">&#x27;2&#x27;</span> &amp;&amp; c != <span class="hljs-string">&#x27;3&#x27;</span> &amp;&amp; c != <span class="hljs-string">&#x27;4&#x27;</span>) &#123;<br>                System.out.print(<span class="hljs-string">&quot;选择错误，请重新输入：&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> c;<br>    &#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">用于收入和支出金额的输入。该方法从键盘读取一个不超过4位长度的整数，并将其作为方法的返回值。</span><br><span class="hljs-comment">*/</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">readNumber</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">int</span> n;<br>        <span class="hljs-keyword">for</span> (; ; ) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> readKeyBoard(<span class="hljs-number">4</span>);<br>            <span class="hljs-keyword">try</span> &#123;<br>                n = Integer.parseInt(str);<br>                <span class="hljs-keyword">break</span>;<br>            &#125; <span class="hljs-keyword">catch</span> (NumberFormatException e) &#123;<br>                System.out.print(<span class="hljs-string">&quot;数字输入错误，请重新输入：&quot;</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> n;<br>    &#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">用于收入和支出说明的输入。该方法从键盘读取一个不超过8位长度的字符串，并将其作为方法的返回值。</span><br><span class="hljs-comment">*/</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">readString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> readKeyBoard(<span class="hljs-number">8</span>);<br>        <span class="hljs-keyword">return</span> str;<br>    &#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">用于确认选择的输入。该方法从键盘读取‘Y’或’N’，并将其作为方法的返回值。</span><br><span class="hljs-comment">*/</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">char</span> <span class="hljs-title function_">readConfirmSelection</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">char</span> c;<br>        <span class="hljs-keyword">for</span> (; ; ) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> readKeyBoard(<span class="hljs-number">1</span>).toUpperCase();<br>            c = str.charAt(<span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;Y&#x27;</span> || c == <span class="hljs-string">&#x27;N&#x27;</span>) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                System.out.print(<span class="hljs-string">&quot;选择错误，请重新输入：&quot;</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> c;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">readKeyBoard</span><span class="hljs-params">(<span class="hljs-type">int</span> limit)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">line</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br><br>        <span class="hljs-keyword">while</span> (scanner.hasNext()) &#123;<br>            line = scanner.nextLine();<br>            <span class="hljs-keyword">if</span> (line.length() &lt; <span class="hljs-number">1</span> || line.length() &gt; limit) &#123;<br>                System.out.print(<span class="hljs-string">&quot;输入长度（不大于&quot;</span> + limit + <span class="hljs-string">&quot;）错误，请重新输入：&quot;</span>);<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> line;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaSE</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Java｜运算符</title>
    <link href="/2024/07/28/6d69d4d3.html"/>
    <url>/2024/07/28/6d69d4d3.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>流水不争先，争的是滔滔不绝</p></blockquote><h1 id="1-算术运算符"><a href="#1-算术运算符" class="headerlink" title="1. 算术运算符"></a>1. 算术运算符</h1><table><thead><tr><th>操作符</th><th>描述</th><th>例子</th></tr></thead><tbody><tr><td>+</td><td>加法</td><td>A + B</td></tr><tr><td>-</td><td>减法</td><td>A – B</td></tr><tr><td>*</td><td>乘法</td><td>A * B</td></tr><tr><td>&#x2F;</td><td>除法</td><td>B &#x2F; A</td></tr><tr><td>％</td><td>取余</td><td>B % A</td></tr><tr><td>++</td><td>自增（前）: 先运算后取值<br />自增（后）: 先取值后运算</td><td>++B<br />B++</td></tr><tr><td>–</td><td>自减（前）: 先运算后取值<br />自减（后）: 先取值后运算</td><td>–B<br />B–</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Day03Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br>        System.out.println(<span class="hljs-string">&quot;a + b = &quot;</span> + (a + b));    <span class="hljs-comment">// a + b = 13</span><br>        System.out.println(<span class="hljs-string">&quot;a - b = &quot;</span> + (a - b));    <span class="hljs-comment">// a - b = 7</span><br>        System.out.println(<span class="hljs-string">&quot;a * b = &quot;</span> + (a * b));    <span class="hljs-comment">// a * b = 30</span><br>        System.out.println(<span class="hljs-string">&quot;a / b = &quot;</span> + (a / b));    <span class="hljs-comment">// a / b = 3</span><br>        System.out.println(<span class="hljs-string">&quot;a % b = &quot;</span> + (a % b));    <span class="hljs-comment">// a % b = 1</span><br>        <br>        <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br>        System.out.println(c++);    <span class="hljs-comment">// 3</span><br>        System.out.println(c);    <span class="hljs-comment">// 4</span><br>        <br>        <span class="hljs-type">int</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-number">4</span>;<br>        System.out.println(++d);    <span class="hljs-comment">// 5</span><br>        <br>        <span class="hljs-type">int</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br>        System.out.println(e--);    <span class="hljs-comment">// 5</span><br>        System.out.println(e);    <span class="hljs-comment">// 4</span><br>        <br>        <span class="hljs-type">int</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-number">6</span>;<br>        System.out.println(--f);    <span class="hljs-comment">// 5</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h2><blockquote><p>随意给出一个整数，打印显示它的个位数，十位数，百位数的值</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 打印个位十位百位</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArithmeticExer1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">187</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">bai</span> <span class="hljs-operator">=</span> num / <span class="hljs-number">100</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">shi</span> <span class="hljs-operator">=</span> num % <span class="hljs-number">100</span> / <span class="hljs-number">10</span>; <span class="hljs-comment">// int shi = num / 10 % 10;</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">ge</span> <span class="hljs-operator">=</span> num % <span class="hljs-number">10</span>;<br><br>        System.out.println(<span class="hljs-string">&quot;百位为：&quot;</span> + bai);<br>        System.out.println(<span class="hljs-string">&quot;十位为：&quot;</span> + shi);<br>        System.out.println(<span class="hljs-string">&quot;个位为：&quot;</span> + ge);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>拓展：获取一个四位数的个位，十位，百位，千位</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArithmeticExer2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">1234</span>;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">qian</span> <span class="hljs-operator">=</span> num / <span class="hljs-number">1000</span> % <span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">bai</span> <span class="hljs-operator">=</span> num / <span class="hljs-number">100</span> % <span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">shi</span> <span class="hljs-operator">=</span> num / <span class="hljs-number">10</span> % <span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">ge</span> <span class="hljs-operator">=</span> num % <span class="hljs-number">10</span>;<br><br>        System.out.println(<span class="hljs-string">&quot;千位为：&quot;</span> + qian);<br>        System.out.println(<span class="hljs-string">&quot;百位为：&quot;</span> + bai);<br>        System.out.println(<span class="hljs-string">&quot;十位为：&quot;</span> + shi);<br>        System.out.println(<span class="hljs-string">&quot;个位为：&quot;</span> + ge);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="案例2"><a href="#案例2" class="headerlink" title="案例2"></a>案例2</h2><blockquote><p>为抵抗洪水，战士连续作战89小时，编程计算共多少天零多少小时</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArithmeticExer4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">hours</span> <span class="hljs-operator">=</span> <span class="hljs-number">89</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">day</span> <span class="hljs-operator">=</span> hours / <span class="hljs-number">24</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">hour</span> <span class="hljs-operator">=</span> hours % <span class="hljs-number">24</span>;<br>        System.out.println(<span class="hljs-string">&quot;为抵抗洪水，战士连续作战 89 小时：&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;为抵抗洪水，战士连续作战 &quot;</span> + day + <span class="hljs-string">&quot; 天 &quot;</span> + hour + <span class="hljs-string">&quot; 小时&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="2-赋值运算符"><a href="#2-赋值运算符" class="headerlink" title="2. 赋值运算符"></a>2. 赋值运算符</h1><table><thead><tr><th>操作符</th><th>描述</th><th>例子</th></tr></thead><tbody><tr><td>&#x3D;</td><td>简单的赋值运算符，将右操作数的值赋给左侧操作数</td><td>C &#x3D; A + B将把A + B得到的值赋给C</td></tr><tr><td>+&#x3D;</td><td>加和赋值操作符，它把左操作数和右操作数相加赋值给左操作数</td><td>C +&#x3D; A等价于C &#x3D; C + A</td></tr><tr><td>-&#x3D;</td><td>减和赋值操作符，它把左操作数和右操作数相减赋值给左操作数</td><td>C -&#x3D; A等价于C &#x3D; C - A</td></tr><tr><td>*&#x3D;</td><td>乘和赋值操作符，它把左操作数和右操作数相乘赋值给左操作数</td><td>C *&#x3D; A等价于C &#x3D; C * A</td></tr><tr><td>&#x2F;&#x3D;</td><td>除和赋值操作符，它把左操作数和右操作数相除赋值给左操作数</td><td>C &#x2F;&#x3D; A，C 与 A 同类型时等价于 C &#x3D; C &#x2F; A</td></tr><tr><td>(％)&#x3D;</td><td>取模和赋值操作符，它把左操作数和右操作数取模后赋值给左操作数</td><td>C ％&#x3D; A等价于C &#x3D; C％A</td></tr><tr><td>&lt;&lt;&#x3D;</td><td>左移位赋值运算符</td><td>C &lt;&lt;&#x3D; 2等价于C &#x3D; C &lt;&lt; 2</td></tr><tr><td>&gt;&gt;&#x3D;</td><td>右移位赋值运算符</td><td>C &gt;&gt;&#x3D; 2等价于C &#x3D; C &gt;&gt; 2</td></tr><tr><td>＆&#x3D;</td><td>按位与赋值运算符</td><td>C ＆&#x3D; 2等价于C &#x3D; C＆2</td></tr><tr><td>^&#x3D;</td><td>按位异或赋值操作符</td><td>C ^&#x3D; 2等价于C &#x3D; C ^ 2</td></tr><tr><td>&#124;&#x3D;</td><td>按位或赋值操作符</td><td>C &#124;&#x3D; 2等价于C &#x3D; C &#124; 2</td></tr></tbody></table><h1 id="3-关系运算符"><a href="#3-关系运算符" class="headerlink" title="3. 关系运算符"></a>3. 关系运算符</h1><table><thead><tr><th>运算符</th><th>描述</th><th>例子</th><th>结果</th></tr></thead><tbody><tr><td>&#x3D;&#x3D;</td><td>检查如果两个操作数的值是否相等，如果相等则条件为真。</td><td>(A &#x3D;&#x3D; B)为假。</td><td>false</td></tr><tr><td>!&#x3D;</td><td>检查如果两个操作数的值是否相等，如果值不相等则条件为真。</td><td>(A !&#x3D; B) 为真。</td><td>true</td></tr><tr><td>&gt;</td><td>检查左操作数的值是否大于右操作数的值，如果是那么条件为真。</td><td>(A&gt; B)为假。</td><td>flase</td></tr><tr><td>&lt;</td><td>检查左操作数的值是否小于右操作数的值，如果是那么条件为真。</td><td>(A &lt;B)为真。</td><td>true</td></tr><tr><td>&gt;&#x3D;</td><td>检查左操作数的值是否大于或等于右操作数的值，如果是那么条件为真。</td><td>(A&gt; &#x3D; B)为假。</td><td>flase</td></tr><tr><td>&lt;&#x3D;</td><td>检查左操作数的值是否小于或等于右操作数的值，如果是那么条件为真。</td><td>(A &lt;&#x3D; B)为真。</td><td>true</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Day03Test1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>        System.out.println(<span class="hljs-string">&quot;a == b → &quot;</span> + (a == b));    <span class="hljs-comment">// false</span><br>        System.out.println(<span class="hljs-string">&quot;a != b → &quot;</span> + (a != b));    <span class="hljs-comment">// true</span><br>        System.out.println(<span class="hljs-string">&quot;a &gt; b → &quot;</span> + (a &gt; b));    <span class="hljs-comment">// false</span><br>        System.out.println(<span class="hljs-string">&quot;a &lt; b → &quot;</span> + (a &lt; b));    <span class="hljs-comment">// true</span><br>        System.out.println(<span class="hljs-string">&quot;a &gt;= b → &quot;</span> + (a &gt;= b));    <span class="hljs-comment">// false</span><br>        System.out.println(<span class="hljs-string">&quot;a &lt;= b → &quot;</span> + (a &lt;= b));    <span class="hljs-comment">// true</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="4-逻辑运算符"><a href="#4-逻辑运算符" class="headerlink" title="4. 逻辑运算符"></a>4. 逻辑运算符</h1><table><thead><tr><th>操作符</th><th>描述</th><th>例子</th></tr></thead><tbody><tr><td>&amp;&amp;</td><td>称为逻辑与运算符。当且仅当两个操作数都为真，条件才为真。</td><td>(A &amp;&amp; B)为假。</td></tr><tr><td>&#124; &#124;</td><td>称为逻辑或操作符。如果任何两个操作数任何一个为真，条件为真。</td><td>(A &#124; &#124; B)为真。</td></tr><tr><td>！</td><td>称为逻辑非运算符。用来反转操作数的逻辑状态。如果条件为true，则逻辑非运算符将得到false。</td><td>!(A &amp;&amp; B)为真。</td></tr></tbody></table><p>当用于逻辑运算时的区别</p><ul><li><p>“&amp;” 和 “&amp;&amp;” 的区别：</p><ul><li>单 &amp; 时，左边无论真假，右边都进行运算；</li><li>双 &amp; 时，如果左边为真，右边参与运算，如果左边为假，那么右边不参与运算。</li></ul></li><li><p>“|” 和 “||”的区别同理，|| 表示：当左边为真，右边不参与运算。</p></li><li><p>异或(^)与或( | )的不同之处是：当左右都为true时，结果为false。理解：异或，追求的是“异”!</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">LogicTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//区分&amp; 与 &amp;&amp;</span><br>        <span class="hljs-comment">//相同点1：&amp; 与  &amp;&amp; 的运算结果相同</span><br>        <span class="hljs-comment">//相同点2：当符号左边是true时，二者都会执行符号右边的运算</span><br>        <span class="hljs-comment">//不同点：当符号左边是 false 时，&amp; 继续执行符号右边的运算。&amp;&amp;不再执行符号右边的运算。</span><br>        <span class="hljs-comment">//开发中，推荐使用 &amp;&amp;</span><br>        <br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">if</span>(b1 &amp; (num1++ &gt; <span class="hljs-number">0</span>))&#123;<br>            System.out.println(<span class="hljs-string">&quot;北京&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;南京&quot;</span>);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;num1 = &quot;</span> + num1); <span class="hljs-comment">//11</span><br>        <br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">b2</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">if</span>(b2 &amp;&amp; (num2++ &gt; <span class="hljs-number">0</span>))&#123;<br>            System.out.println(<span class="hljs-string">&quot;北京&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;南京&quot;</span>);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;num2 = &quot;</span> + num2); <span class="hljs-comment">//10</span><br>        <br>        <span class="hljs-comment">// 区分：| 与 || </span><br>        <span class="hljs-comment">//相同点1：| 与  || 的运算结果相同</span><br>        <span class="hljs-comment">//相同点2：当符号左边是 false 时，二者都会执行符号右边的运算</span><br>        <span class="hljs-comment">//不同点3：当符号左边是 true 时，| 继续执行符号右边的运算，而 || 不再执行符号右边的运算</span><br>        <span class="hljs-comment">//开发中，推荐使用||</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">b3</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        b3 = <span class="hljs-literal">true</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num3</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">if</span>(b3 | (num3++ &gt; <span class="hljs-number">0</span>))&#123;<br>            System.out.println(<span class="hljs-string">&quot;北京&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;南京&quot;</span>);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;num3 = &quot;</span> + num3); <span class="hljs-comment">//11</span><br><br><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">b4</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        b4 = <span class="hljs-literal">true</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num4</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">if</span>(b4 || (num4++ &gt; <span class="hljs-number">0</span>))&#123;<br>            System.out.println(<span class="hljs-string">&quot;北京&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;南京&quot;</span>);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;num4 = &quot;</span> + num4); <span class="hljs-comment">//10</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">LogoinTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-type">short</span> <span class="hljs-variable">z</span> <span class="hljs-operator">=</span> <span class="hljs-number">42</span>;<br>        <span class="hljs-keyword">if</span>((z++==<span class="hljs-number">42</span>)&amp;&amp;(y=<span class="hljs-literal">true</span>))z++;<br>        <span class="hljs-keyword">if</span>((x=<span class="hljs-literal">false</span>)||(++z==<span class="hljs-number">45</span>))z++;<br>        System.out.println(z); <span class="hljs-comment">//46</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 1. 定义类 CompareLogicExer</span><br><span class="hljs-comment"> * 2. 定义 main方法</span><br><span class="hljs-comment"> * 3. 定义一个int类型变量a,变量b,都赋值为20</span><br><span class="hljs-comment"> * 4. 定义boolean类型变量bo1 , 判断++a 是否被3整除,并且a++ 是否被7整除,将结果赋值给bo1</span><br><span class="hljs-comment"> * 5. 输出a的值,bo1的值</span><br><span class="hljs-comment"> * 6. 定义boolean类型变量bo2 , 判断b++ 是否被3整除,并且++b 是否被7整除,将结果赋值给bo2</span><br><span class="hljs-comment"> * 7. 输出b的值,bo2的值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CompareLogicExer1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">bo1</span> <span class="hljs-operator">=</span> (++a % <span class="hljs-number">3</span> == <span class="hljs-number">0</span>) &amp;&amp; (a++ % <span class="hljs-number">7</span> == <span class="hljs-number">0</span>);<br>        System.out.println(<span class="hljs-string">&quot;a = &quot;</span> + a); <span class="hljs-comment">// 22</span><br>        System.out.println(<span class="hljs-string">&quot;bo1 = &quot;</span> + bo1); <span class="hljs-comment">// true</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">bo2</span> <span class="hljs-operator">=</span> (b++ % <span class="hljs-number">3</span> == <span class="hljs-number">0</span>) &amp;&amp; (++b % <span class="hljs-number">7</span> == <span class="hljs-number">0</span>);<br>        System.out.println(<span class="hljs-string">&quot;b = &quot;</span> + b); <span class="hljs-comment">// 21</span><br>        System.out.println(<span class="hljs-string">&quot;bo2 = &quot;</span> + bo2); <span class="hljs-comment">// false</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="5-位运算符"><a href="#5-位运算符" class="headerlink" title="5. 位运算符"></a>5. 位运算符</h1><p>Java定义了位运算符，应用于整数类型(int)，长整型(long)，短整型(short)，字符型(char)，和字节型(byte)等类型。</p><p>位运算符作用在所有的位上，并且按位运算。假设a &#x3D; 60，b &#x3D; 13;它们的二进制格式表示将如下</p><p>A &#x3D; 0011 1100 B &#x3D; 0000 1101 </p><p>A &amp; B &#x3D; 0000 1100</p><p>A | B &#x3D; 0011 1101</p><p>A ^ B &#x3D; 0011 0001</p><p>~A &#x3D; 1100 0011</p><p>下表列出了位运算符的基本运算，假设整数变量 A 的值为 60 和变量 B 的值为 13：</p><table><thead><tr><th>操作符</th><th>描述</th><th>例子</th></tr></thead><tbody><tr><td>＆</td><td>1，则结果为1，否则为0</td><td>(A＆B)，得到12，即0000 1100</td></tr><tr><td>|</td><td>如果相对应位都是 0，则结果为 0，否则为 1</td><td>(A | B) 得到61，即 0011 1101</td></tr><tr><td>^</td><td>如果相对应位值相同，则结果为0，否则为1</td><td>(A ^ B) 得到49，即 0011 0001</td></tr><tr><td>〜</td><td>按位取反运算符翻转操作数的每一位，即0变成1，1变成0。</td><td>(〜A) 得到-61，即1100 0011</td></tr><tr><td>&lt;&lt;</td><td>按位左移运算符。左操作数按位左移右操作数指定的位数。</td><td>A &lt;&lt; 2得到240，即 1111 0000</td></tr><tr><td>&gt;&gt;</td><td>按位右移运算符。左操作数按位右移右操作数指定的位数。</td><td>A &gt;&gt; 2得到15即 1111</td></tr><tr><td>&gt;&gt;&gt;</td><td>按位右移补零操作符。左操作数的值按右操作数指定的位数右移，移动得到的空位以零填充。</td><td>A&gt;&gt;&gt;2得到15即 0000 1111</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">60</span>; <span class="hljs-comment">/* 60: 0011 1100 */</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">13</span>; <span class="hljs-comment">/* 13: 0000 1101 */</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> a &amp; b; <span class="hljs-comment">/* 12: 0000 1100 */</span><br>        System.out.println(c); <span class="hljs-comment">// 12</span><br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> a | b; <span class="hljs-comment">/* 61: 0011 1101 */</span><br>        System.out.println(d); <span class="hljs-comment">// 61</span><br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> a ^ b; <span class="hljs-comment">/* 49: 0011 0001 */</span><br>        System.out.println(e); <span class="hljs-comment">// 49</span><br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> ~a; <span class="hljs-comment">/* -61: 1100 0011 */</span><br>        System.out.println(f); <span class="hljs-comment">// -61</span><br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">g</span> <span class="hljs-operator">=</span> a &lt;&lt; <span class="hljs-number">2</span>; <span class="hljs-comment">/* 240: 1111 0000 */</span><br>        System.out.println(g); <span class="hljs-comment">// 240</span><br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> a &gt;&gt; <span class="hljs-number">2</span>; <span class="hljs-comment">/* 15: 1111 */</span><br>        System.out.println(h); <span class="hljs-comment">// 15</span><br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> a &gt;&gt;&gt; <span class="hljs-number">2</span>; <span class="hljs-comment">/* 15: 0000 1111 */</span><br>        System.out.println(i); <span class="hljs-comment">// 15</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/../img/Java%EF%BD%9C%E8%BF%90%E7%AE%97%E7%AC%A6/image.png" alt="计算过程"></p><h2 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h2><blockquote><p>如何交换两个 int 型变量的值？String 呢？</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BitExer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br><br>System.out.println(<span class="hljs-string">&quot;m = &quot;</span> + m + <span class="hljs-string">&quot;, n = &quot;</span> + n);<br><br><span class="hljs-comment">//（推荐）实现方式1：优点：容易理解，适用于不同数据类型    缺点：需要额外定义变量</span><br><span class="hljs-comment">//int temp = m;</span><br><span class="hljs-comment">//m = n;</span><br><span class="hljs-comment">//n = temp;</span><br><br><span class="hljs-comment">//实现方式2：优点：没有额外定义变量    缺点：可能超出int的范围；只能适用于数值类型</span><br><span class="hljs-comment">//m = m + n; //15 = 10 + 5</span><br><span class="hljs-comment">//n = m - n;//10 = 15 - 5</span><br><span class="hljs-comment">//m = m - n;//5 = 15 - 10</span><br><br><span class="hljs-comment">//实现方式3：优点：没有额外定义变量    缺点：不易理解；只能适用于数值类型</span><br>m = m ^ n; <br>n = m ^ n; <span class="hljs-comment">//(m ^ n) ^ n</span><br>m = m ^ n;<br><br>System.out.println(<span class="hljs-string">&quot;m = &quot;</span> + m + <span class="hljs-string">&quot;, n = &quot;</span> + n);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="6-条件运算符"><a href="#6-条件运算符" class="headerlink" title="6. 条件运算符"></a>6. 条件运算符</h1><p>条件运算符也被称为三元运算符。该运算符有3个操作数，并且需要判断布尔表达式的值。该运算符的主要是决定哪个值应该赋值给变量。</p><p>三元运算符后面的表达式1和表达式2必须为同种类型，编译时可能会自动类型提升</p><p><code>variable x = (expression) ? value if true : value if false</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-number">12</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> (m &gt; n) ? m : n;<br>        System.out.println(max); <span class="hljs-comment">// 12</span><br><br>        n = <span class="hljs-number">15</span>;<br>        <span class="hljs-comment">// 三元运算符可以嵌套</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> (m &gt; n) ? <span class="hljs-string">&quot;m大&quot;</span> : ((m == n) ? <span class="hljs-string">&quot;m和n相等&quot;</span> : <span class="hljs-string">&quot;n大&quot;</span>);<br>        System.out.println(str); <span class="hljs-comment">// n大</span><br><br>        <span class="hljs-comment">//*****************</span><br>        <span class="hljs-comment">// 获取三个数值的最大值</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> <span class="hljs-number">12</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n2</span> <span class="hljs-operator">=</span> <span class="hljs-number">30</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n3</span> <span class="hljs-operator">=</span> -<span class="hljs-number">43</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">max1</span> <span class="hljs-operator">=</span> (n1 &gt; n2) ? n1 : n2;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">max2</span> <span class="hljs-operator">=</span> (max1 &gt; n3) ? max1 : n3;<br>        System.out.println(max2); <span class="hljs-comment">// 30</span><br><br>        <span class="hljs-comment">// 不建议这样写，可读性太差</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">max3</span> <span class="hljs-operator">=</span> (((n1 &gt; n2) ? n1 : n2) &gt; n3) ? ((n1 &gt; n2) ? n1 : n2) : n3;<br>        System.out.println(max3);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="案例-2"><a href="#案例-2" class="headerlink" title="案例"></a>案例</h2><blockquote><p>要求：控制台输出”今天是周2，10天以后是周x”</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConditionExer3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">week</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br>        week += <span class="hljs-number">10</span>;<br>        week %= <span class="hljs-number">7</span>;<br>        System.out.println(<span class="hljs-string">&quot;今天是周2, 10天以后是周&quot;</span> + (week == <span class="hljs-number">0</span> ? <span class="hljs-string">&quot;日&quot;</span> : week));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="7-运算符的优先级"><a href="#7-运算符的优先级" class="headerlink" title="7. 运算符的优先级"></a>7. 运算符的优先级</h1><ul><li>运算符有不同的优先级，所谓优先级就是表达式运算中的运算顺序。如下表，上一行运算符总优先于下一行。</li><li>只有单目运算符、三元运算符、赋值运算符是从右向左运算的</li></ul><p><img src="/../img/Java%EF%BD%9C%E8%BF%90%E7%AE%97%E7%AC%A6/image-1.png" alt="优先级"></p>]]></content>
    
    
    <categories>
      
      <category>JavaSE</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Java｜基础语法</title>
    <link href="/2024/07/28/19b45f9b.html"/>
    <url>/2024/07/28/19b45f9b.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>随心所欲不逾矩</p></blockquote><h1 id="1-第一个-Java-程序"><a href="#1-第一个-Java-程序" class="headerlink" title="1. 第一个 Java 程序"></a>1. 第一个 Java 程序</h1><blockquote><p>简单的 Java 程序，它将输出字符串 Hello World</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorld</span> &#123;<br>    <span class="hljs-comment">/* 第一个Java程序</span><br><span class="hljs-comment">     * 它将输出字符串 Hello World</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 输出 Hello World</span><br>        System.out.println(<span class="hljs-string">&quot;Hello World&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/../img/Java%EF%BD%9C%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/image.png" alt="关键字说明"></p><h1 id="2-Java-关键字与保留字"><a href="#2-Java-关键字与保留字" class="headerlink" title="2. Java 关键字与保留字"></a>2. Java 关键字与保留字</h1><p>定义：被 Java 语言赋予了特殊含义，用做专门用途的字符串。</p><p>特点：关键字中所有字母都是小写，Java 关键字，这些关键字不能用于常量，变量，和任何标识符名称。<a href="https://docs.oracle.com/javase/tutorial/java/nutsandbolts/_keywords.html">官网地址</a></p><p>下面列出了 Java 关键字。这些保留字不能用于常量、变量、和任何标识符的名称。<a href="https://www.runoob.com/java/java-basic-syntax.html">摘自菜鸟教程</a></p><table><thead><tr><th>类别</th><th>关键字</th><th>说明</th></tr></thead><tbody><tr><td>访问控制</td><td>private</td><td>私有的</td></tr><tr><td></td><td>protected</td><td>受保护的</td></tr><tr><td></td><td>public</td><td>公共的</td></tr><tr><td></td><td>default</td><td>默认</td></tr><tr><td>类、方法和变量修饰符</td><td>abstract</td><td>声明抽象</td></tr><tr><td></td><td>class</td><td>类</td></tr><tr><td></td><td>extends</td><td>扩充,继承</td></tr><tr><td></td><td>final</td><td>最终值,不可改变的</td></tr><tr><td></td><td>implements</td><td>实现（接口）</td></tr><tr><td></td><td>interface</td><td>接口</td></tr><tr><td></td><td>native</td><td>本地，原生方法（非 Java 实现）</td></tr><tr><td></td><td>new</td><td>新,创建</td></tr><tr><td></td><td>static</td><td>静态</td></tr><tr><td></td><td>strictfp</td><td>严格,精准</td></tr><tr><td></td><td>synchronized</td><td>线程,同步</td></tr><tr><td></td><td>transient</td><td>短暂</td></tr><tr><td></td><td>volatile</td><td>易失</td></tr><tr><td>程序控制语句</td><td>break</td><td>跳出循环</td></tr><tr><td></td><td>case</td><td>定义一个值以供 switch 选择</td></tr><tr><td></td><td>continue</td><td>继续</td></tr><tr><td></td><td>default</td><td>默认</td></tr><tr><td></td><td>do</td><td>运行</td></tr><tr><td></td><td>else</td><td>否则</td></tr><tr><td></td><td>for</td><td>循环</td></tr><tr><td></td><td>if</td><td>如果</td></tr><tr><td></td><td>instanceof</td><td>实例</td></tr><tr><td></td><td>return</td><td>返回</td></tr><tr><td></td><td>switch</td><td>根据值选择执行</td></tr><tr><td></td><td>while</td><td>循环</td></tr><tr><td>错误处理</td><td>assert</td><td>断言表达式是否为真</td></tr><tr><td></td><td>catch</td><td>捕捉异常</td></tr><tr><td></td><td>finally</td><td>有没有异常都执行</td></tr><tr><td></td><td>throw</td><td>抛出一个异常对象</td></tr><tr><td></td><td>throws</td><td>声明一个异常可能被抛出</td></tr><tr><td></td><td>try</td><td>捕获异常</td></tr><tr><td>包相关</td><td>import</td><td>引入</td></tr><tr><td></td><td>package</td><td>包</td></tr><tr><td>基本类型</td><td>boolean</td><td>布尔型</td></tr><tr><td></td><td>byte</td><td>字节型</td></tr><tr><td></td><td>char</td><td>字符型</td></tr><tr><td></td><td>double</td><td>双精度浮点</td></tr><tr><td></td><td>float</td><td>单精度浮点</td></tr><tr><td></td><td>int</td><td>整型</td></tr><tr><td></td><td>long</td><td>长整型</td></tr><tr><td></td><td>short</td><td>短整型</td></tr><tr><td>变量引用</td><td>super</td><td>父类,超类</td></tr><tr><td></td><td>this</td><td>本类</td></tr><tr><td></td><td>void</td><td>无返回值</td></tr><tr><td>保留关键字</td><td>goto</td><td>是关键字，但不能使用</td></tr><tr><td></td><td>const</td><td>是关键字，但不能使用</td></tr></tbody></table><p>注：Java 的 <code>null</code> 不是关键字，类似于 <code>true</code> 和 <code>false</code>，它是一个字面常量，不允许作为标识符使用。 </p><h1 id="3-Java-标识符"><a href="#3-Java-标识符" class="headerlink" title="3. Java 标识符"></a>3. Java 标识符</h1><h2 id="3-1-标识符说明"><a href="#3-1-标识符说明" class="headerlink" title="3.1 标识符说明"></a>3.1 标识符说明</h2><p>Java 所有的组成部分都需要名字。类名，变量名以及方法名都被称为标识符 （自己可以起名字的地方都叫标识符） </p><h2 id="3-2-标识符命名规则"><a href="#3-2-标识符命名规则" class="headerlink" title="3.2 标识符命名规则"></a>3.2 标识符命名规则</h2><p>关于 Java 标识符，有以下几点需要注意</p><ul><li>所有的标识符都应该以字母（A-Z 或者 a-z）,美元符（$）、或者下划线（_）开始</li><li>首字符之后可以是字母（A-Z 或者 a-z）,美元符（$）、下划线（_）或数字的任何字符组合</li><li>关键字不能用作标识符</li><li>标识符是大小写敏感的</li><li>合法标识符举例：age、$salary、_value、__1_value</li><li>非法标识符举例：123abc、-salary</li></ul><h2 id="3-3-Java-中的名称命名规范"><a href="#3-3-Java-中的名称命名规范" class="headerlink" title="3.3 Java 中的名称命名规范"></a>3.3 Java 中的名称命名规范</h2><ul><li>大小写敏感</li><li>包名：多单词组成时所有字母都小写：xxxyyyzzz</li><li>类名、接口名：多单词组成时，所有单词的首字母大写：<strong>MyFirstJavaClass</strong>  大驼峰</li><li>变量名、方法名：多单词组成时，第一个单词首字母小写，第二个单词开始每个单词首字母大写：xxxYyyZzz</li><li>常量名：所有字母都大写。多单词时每个单词用下划线连接：XXX_YYY_ZZZ</li></ul><p>注：</p><ul><li>源文件名称必须和类名相同。当保存文件的时候，应该使用类名作为文件名保存，如果文件名和类名不相同则会编译错误。</li><li>在起名字时，为了提高阅读性，要尽量有意义，“见名知意”。</li><li>Java 采用 unicode 字符集，因此标识符也可以使用汉字声明，但是不建议使用。</li></ul><h1 id="4-Java-变量"><a href="#4-Java-变量" class="headerlink" title="4. Java 变量"></a>4. Java 变量</h1><h2 id="4-1-变量"><a href="#4-1-变量" class="headerlink" title="4.1 变量"></a>4.1 变量</h2><p><strong>变量的概念：</strong></p><ul><li>内存中的一个存储区域</li><li>该区域有自己的名称（变量名）和类型（数据类型）和值</li><li>Java 中的每个变量必须先声名，再赋值，然后才能使用</li><li>该区域的数据可以再同一类型范围内不断变化</li><li>Java 中的变量有四种基本属性：变量名，数据类型，存储单元跟变量值</li></ul><p><strong>Java 语言支持的变量类型：</strong></p><ul><li>类变量：独立于方法之外的变量，用 static 修饰</li><li>实例变量：独立与方法之外的变量，不用 static 修饰</li><li>局部变量：类的方法中的变量</li></ul><p>注：这里后期详细补充</p><h1 id="5-数据类型"><a href="#5-数据类型" class="headerlink" title="5. 数据类型"></a>5. 数据类型</h1><p><img src="/../img/Java%EF%BD%9C%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/image-2.png" alt="数据类型"></p><h2 id="5-1-整数类型"><a href="#5-1-整数类型" class="headerlink" title="5.1 整数类型"></a>5.1 整数类型</h2><blockquote><p>byte、short、int、long</p></blockquote><table><thead><tr><th><strong>类型</strong></th><th><strong>占用存储空间</strong></th><th><strong>表数范围</strong></th></tr></thead><tbody><tr><td>byte</td><td>1字节&#x3D;8bit位</td><td>-128 ~ 127</td></tr><tr><td>short</td><td>2字节</td><td>-2^15~ 2^15-1</td></tr><tr><td>int</td><td>4字节</td><td>-2^31~ 2^31-1 (约21亿)</td></tr><tr><td>long</td><td>8字节</td><td>-2^63~ 2^63-1</td></tr></tbody></table><p>注：声明 long 类型常量需要再后面加 “L” &#x2F; “l” <a name="ZMJ0t"></a></p><h2 id="5-2-浮点类型"><a href="#5-2-浮点类型" class="headerlink" title="5.2 浮点类型"></a>5.2 浮点类型</h2><blockquote><p>float、double</p></blockquote><table><thead><tr><th><strong>类型</strong></th><th><strong>占用存储空间</strong></th><th><strong>表数范围</strong></th></tr></thead><tbody><tr><td>单精度float</td><td>4字节</td><td>-3.403E38 ~ 3.403E38</td></tr><tr><td>双精度double</td><td>8字节</td><td>-1.798E308 ~ 1.798E308</td></tr></tbody></table><p>注：Java 的浮点型常量默认为 double 类型，声明 float 类型常量需要在后面加”F” &#x2F; “f” </p><h3 id="案例：圆的面积"><a href="#案例：圆的面积" class="headerlink" title="案例：圆的面积"></a>案例：圆的面积</h3><blockquote><p>定义圆周率并赋值为3.14，现有3个圆的半径分别为1.2、2.5、6，求它们的面积</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 圆的面积</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Exercise1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">PI</span> <span class="hljs-operator">=</span> <span class="hljs-number">3.14</span>;<br><br>        <span class="hljs-type">double</span> <span class="hljs-variable">radius1</span> <span class="hljs-operator">=</span> <span class="hljs-number">1.2</span>;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">radius2</span> <span class="hljs-operator">=</span> <span class="hljs-number">2.5</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">radius3</span> <span class="hljs-operator">=</span> <span class="hljs-number">6</span>;<br><br>        System.out.println(<span class="hljs-string">&quot;第一个圆的面积：&quot;</span> + PI * radius1 * radius1);<br>        System.out.println(<span class="hljs-string">&quot;第二个圆的面积：&quot;</span> + PI * radius2 * radius2);<br>        System.out.println(<span class="hljs-string">&quot;第三个圆的面积：&quot;</span> + PI * radius3 * radius3);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">第一个圆的面积：4.521599999999999</span><br><span class="hljs-comment">第二个圆的面积：19.625</span><br><span class="hljs-comment">第三个圆的面积：113.03999999999999</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h3 id="案例：温度转换"><a href="#案例：温度转换" class="headerlink" title="案例：温度转换"></a>案例：温度转换</h3><blockquote><p>小明要到美国旅游，可是那里的温度是以华氏度为单位记录的。 它需要一个程序将华氏温度（80度）转换为摄氏度，并以华氏度和摄氏度为单位分别显示该温度</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 温度转换</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Exercise2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">hua</span> <span class="hljs-operator">=</span> <span class="hljs-number">80</span>;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">she</span> <span class="hljs-operator">=</span> (hua - <span class="hljs-number">32</span>) / <span class="hljs-number">1.8</span>;<br>        System.out.println(<span class="hljs-string">&quot;华氏度&quot;</span> + hua + <span class="hljs-string">&quot;℉转为摄氏度是&quot;</span> + she + <span class="hljs-string">&quot;℃&quot;</span>); <span class="hljs-comment">// 华氏度80.0℉转为摄氏度是26.666666666666664℃</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-3-字符型"><a href="#5-3-字符型" class="headerlink" title="5.3 字符型"></a>5.3 字符型</h2><blockquote><p>char 2个字节</p></blockquote><ul><li>char 类型是一个单一的 16 位 Unicode 字符</li><li>最大值是 \u0000（十进制等效值为 0）、最大值是 \uffff（即为 65535）</li><li>char 数据类型可以存储任何字符，char 类型是可以进行运算的，因为都是对应的 Unicode 码</li><li>可以使用转义字符 ‘’ 来将其后的字符转变为特殊字符型常量</li><li>例如：char c1 &#x3D; ‘1’、char c2 &#x3D; ‘中’、char c3 &#x3D; ‘\u0234’;</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">VariableTest3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">d1</span> <span class="hljs-operator">=</span> <span class="hljs-number">12.3</span>;<br>        System.out.println(d1 + <span class="hljs-number">1</span>);<br>        <br>        <span class="hljs-type">float</span> <span class="hljs-variable">f1</span> <span class="hljs-operator">=</span> <span class="hljs-number">12.5F</span>;<br>        System.out.println(f1);<br>        <br>        <span class="hljs-type">char</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;a&#x27;</span>;<br>        System.out.println(c1);<br>        <br>        <span class="hljs-type">char</span> <span class="hljs-variable">c2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;\n&#x27;</span>;<br>        System.out.println(<span class="hljs-string">&quot;hello&quot;</span> + c2);<br>        <br>        <span class="hljs-type">char</span> <span class="hljs-variable">c3</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;\t&#x27;</span>;<br>        System.out.println(c3 + <span class="hljs-string">&quot;world&quot;</span>);<br>        <br>        <span class="hljs-type">char</span> <span class="hljs-variable">c4</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;\u0043&#x27;</span>;<br>        System.out.println(c4);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-4-布尔类型"><a href="#5-4-布尔类型" class="headerlink" title="5.4 布尔类型"></a>5.4 布尔类型</h2><blockquote><p>Boolean</p></blockquote><ul><li>Boolean 类型用来判断逻辑条件，一般用于程序流程控制</li><li>Boolean 类型数据值允许：true、false、不可使用 0 或非0的整数替代 false 或 true ，这点和 C 语言不同</li><li>Java 虚拟机中没有任务供 Boolean 值专用的字节码指令，Java 语言表达式所操作的 Boolean 值，在编译之后都使用 Java 虚拟机中的 int 数据类型来替代，true 用 1 表示，false 用 0 表示</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">VariableTest2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">isb1</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span>(isb1) &#123;<br>            System.out.println(<span class="hljs-string">&quot;禁止入内&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;可以参观&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-5-Java-常量"><a href="#5-5-Java-常量" class="headerlink" title="5.5 Java 常量"></a>5.5 Java 常量</h2><p>常量在程序运行时是不能被修改的</p><p>在 Java 中使用 final 关键字来修饰常量，声明方式和变量类似，虽然常量名也也可以用小写，但是为了便于设别，通常使用大写字母表示常量。</p><p><code>final double PI = 3.1415926;</code></p><p>Java 语言支持一些特殊的转义字符序列</p><table><thead><tr><th>符号</th><th>字符含义</th></tr></thead><tbody><tr><td>\n</td><td>换行 (0x0a)</td></tr><tr><td>\r</td><td>回车 (0x0d)</td></tr><tr><td>\f</td><td>换页符(0x0c)</td></tr><tr><td>\b</td><td>退格 (0x08)</td></tr><tr><td>\0</td><td>空字符 (0x0)</td></tr><tr><td>\s</td><td>空格 (0x20)</td></tr><tr><td>\t</td><td>制表符</td></tr><tr><td>\“</td><td>双引号</td></tr><tr><td>\‘</td><td>单引号</td></tr><tr><td>\\</td><td>反斜杠</td></tr><tr><td>\ddd</td><td>八进制字符 (ddd)</td></tr><tr><td>\uxxxx</td><td>16进制Unicode字符 (xxxx)</td></tr></tbody></table><h2 id="5-6-自动类型转换"><a href="#5-6-自动类型转换" class="headerlink" title="5.6 自动类型转换"></a>5.6 自动类型转换</h2><ul><li>自动类型转换：容量小的类型自动转为容量大的数据类型。数据类型按容量大小排序如下</li><li>此时的容量大或小，并非指占用内存空间的大小，而是指表示数据的范围的大小</li></ul><p><img src="/../img/Java%EF%BD%9C%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/image-3.png" alt="类型转换"></p><ul><li>有多种类型的数据混合运算时，系统首先自动将所有数据类型转为容量最大的那种数据类型，然后再进行计算</li><li>byte，short，char 之间不会相互转换，三者的计算首先转为 int 类型</li><li>Boolean 类型不能和其它数据类型运算</li><li>当把任何基本数据类型的值和字符串（String）进行链接运算时（+），基本数据类型的值都将自动转化为字符串（String）类型</li></ul><p>菜鸟教程提到的数据类型转换规则</p><ul><li>不能对 boolean 类型进行类型转换</li><li>不能把对象类型转换成不相关类的对象</li><li>在把容量大的类型转换为容量小的类型时必须使用强制类型转换</li><li>转换过程中可能导致溢出或损失精度</li><li>浮点数到整数的转换是通过舍弃小数得到，而不是四舍五入</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">VariableTest4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">byte</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i1</span> <span class="hljs-operator">=</span> <span class="hljs-number">129</span>;<br>        <span class="hljs-comment">// byte b2 = b1 + i1;</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i2</span> <span class="hljs-operator">=</span> b1 + i1;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">l1</span> <span class="hljs-operator">=</span> b1 + i1;<br>        <span class="hljs-type">float</span> <span class="hljs-variable">f1</span> <span class="hljs-operator">=</span> b1 + i1;<br>        System.out.println(i2);  <span class="hljs-comment">//131</span><br>        System.out.println(l1);  <span class="hljs-comment">//131</span><br>        System.out.println(f1);  <span class="hljs-comment">//131.0</span><br>        <br>        <span class="hljs-type">char</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;a&#x27;</span>; <span class="hljs-comment">//97</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i4</span> <span class="hljs-operator">=</span> c1; <br>        System.out.println(i4);<span class="hljs-comment">//97</span><br>        <br>        <span class="hljs-type">int</span> <span class="hljs-variable">i3</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i5</span> <span class="hljs-operator">=</span> c1 + i3;<br>        System.out.println(i5); <span class="hljs-comment">// 107</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注：c1 的值为字符a，查 ASCII 码表可知对应的 int 类型值为 97，所以 i5 &#x3D; 97 + 10</p><p><strong>一些特殊情况</strong></p><ul><li>当把存储范围小的值（常量值、变量的值、表达式计算的结果值）赋值给了存储范围大的变量时</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;A&#x27;</span>;<span class="hljs-comment">//char自动升级为int，其实就是把字符的编码值赋值给i变量了</span><br><span class="hljs-type">double</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<span class="hljs-comment">//int自动升级为double</span><br><span class="hljs-type">long</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">1234567</span>; <span class="hljs-comment">//右边的整数常量值如果在int范围呢，编译和运行都可以通过，这里涉及到数据类型转换</span><br><br><br><span class="hljs-comment">//byte bigB = 130;//错误，右边的整数常量值超过byte范围</span><br><span class="hljs-type">long</span> <span class="hljs-variable">bigNum</span> <span class="hljs-operator">=</span> <span class="hljs-number">12345678912L</span>;<span class="hljs-comment">//右边的整数常量值如果超过int范围，必须加L，显式表示long类型。否则编译不通过</span><br><br></code></pre></td></tr></table></figure><ul><li>当存储范围小的数据类型与存储范围大的数据类型变量一起混合运算时，会按照其中最大的类型运算</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-type">byte</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-type">double</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-number">1.0</span>;<br><br><span class="hljs-type">double</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> i + b + d;<span class="hljs-comment">//混合运算，升级为double</span><br></code></pre></td></tr></table></figure><ul><li>当byte、short、char数据类型的变量进行算术运算时，按照 int 类型处理</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">byte</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-type">byte</span> <span class="hljs-variable">b2</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br><span class="hljs-type">byte</span> <span class="hljs-variable">b3</span> <span class="hljs-operator">=</span> b1 + b2;<span class="hljs-comment">// 编译报错，b1 + b2自动升级为int</span><br><br><span class="hljs-type">char</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;0&#x27;</span>;<br><span class="hljs-type">char</span> <span class="hljs-variable">c2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;A&#x27;</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> c1 + c2;<span class="hljs-comment">// 至少需要使用int类型来接收</span><br>System.out.println(c1 + c2);<span class="hljs-comment">// 113</span><br></code></pre></td></tr></table></figure><h2 id="5-7-强制类型转换"><a href="#5-7-强制类型转换" class="headerlink" title="5.7 强制类型转换"></a>5.7 强制类型转换</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">VariableTest5</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i1</span> <span class="hljs-operator">=</span> <span class="hljs-number">123</span>;<br>        <span class="hljs-type">byte</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> (<span class="hljs-type">byte</span>)i1;<br>        System.out.println(b); <span class="hljs-comment">// 123</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-8-隐含强制类型转换"><a href="#5-8-隐含强制类型转换" class="headerlink" title="5.8 隐含强制类型转换"></a>5.8 隐含强制类型转换</h2><ul><li>整数的默认类型是 int</li><li>小数默认是 double 类型浮点型，在定义 float 类型时必须在数字后面跟上 F 或者 f</li></ul><h2 id="5-9-字符串-String"><a href="#5-9-字符串-String" class="headerlink" title="5.9 字符串 String"></a>5.9 字符串 String</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">1. String 属于引用数据类型</span><br><span class="hljs-comment">2. 声明 String 类型变量时，使用一对 &quot;&quot;</span><br><span class="hljs-comment">3. String 可以和8种基本数据类型变量做运算，且运算只能是链接运算 +</span><br><span class="hljs-comment">4. 运算的结果仍然是 String 类型</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">VariableTest6</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hello Bike&quot;</span>;<br>        System.out.println(s1); <span class="hljs-comment">// Hello Bike</span><br>        <br>        <span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> <span class="hljs-number">1001</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">numberStr</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;学号&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> numberStr + number;<br>        System.out.println(info);<br>        <br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">info1</span> <span class="hljs-operator">=</span> info + b1;<br>        System.out.println(info1); <span class="hljs-comment">// 学号1001true</span><br><br>        <span class="hljs-comment">// String info2 = number + b1 + numberStr; // 编译不通过，因为 int 类型不能和 boolean 运算</span><br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="案例：身份登记"><a href="#案例：身份登记" class="headerlink" title="案例：身份登记"></a>案例：身份登记</h3><blockquote><p>要求填写自己的姓名、年龄、性别、体重、婚姻状况（已婚用true表示，单身用false表示）、联系方式等等</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> myf15609</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2023/6/19</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Info2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;lanyecheng&quot;</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">30</span>;<br>        <span class="hljs-type">char</span> <span class="hljs-variable">gender</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;男&#x27;</span>;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">weight</span> <span class="hljs-operator">=</span> <span class="hljs-number">135.5</span>;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">isMarried</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">phoneNumber</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;177****0143&quot;</span>;<br><br>        System.out.println(<span class="hljs-string">&quot;name = &quot;</span> + name + <span class="hljs-string">&quot;,age = &quot;</span> + age + <span class="hljs-string">&quot;，gender = &quot;</span> + gender + <span class="hljs-string">&quot;,weight = &quot;</span> +<br>                weight + <span class="hljs-string">&quot;,isMarried = &quot;</span> + isMarried + <span class="hljs-string">&quot;,phoneNumber = &quot;</span> + phoneNumber);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-10-引用数据类型"><a href="#5-10-引用数据类型" class="headerlink" title="5.10 引用数据类型"></a>5.10 引用数据类型</h2><p>注：这里后期详细补充</p><h1 id="6-ASCII-码、Unicode-编码、UTF-8"><a href="#6-ASCII-码、Unicode-编码、UTF-8" class="headerlink" title="6. ASCII 码、Unicode 编码、UTF-8"></a>6. ASCII 码、Unicode 编码、UTF-8</h1><blockquote><p>了解：ASCII 码</p></blockquote><ul><li><p>在计算机内部，所有数据都使用二进制表示。每一个二进制位（bit）有0 和1 两种状态，因此8个二进制位就可以组合出256 种状态，这被称为一个字节（byte）。一个字节一共可以用来表示256 种不同的状态，每一个状态对应一个符号，就是256 个符号，从0000000 到11111111。</p></li><li><p>ASCII码：上个世纪60年代，美国制定了一套字符编码，对英语字符与二进制位之间的关系，做了统一规定。这被称为ASCII码。ASCII码一共规定了128个字符的编码，比如空格“SPACE”是32（二进制00100000），大写的字母A是65（二进制01000001）。这128个符号（包括32个不能打印出来的控制符号），只占用了一个字节的后面7位，最前面的1位统一规定为0。</p></li><li><p>缺点：</p><ul><li>不能表示所有字符。</li><li>相同的编码表示的字符不一样：比如，130 在法语编码中代表了é，在希伯来语编码中却代表了字母Gimel(ג)。</li></ul></li></ul><blockquote><p>了解：Unicode 编码</p></blockquote><ul><li><p>乱码：世界上存在着多种编码方式，同一个二进制数字可以被解释成不同的符号。因此，要想打开一个文本文件，就必须知道它的编码方式，否则用错误的编码方式解读，就会出现乱码。</p></li><li><p>Unicode：一种编码，将世界上所有的符号都纳入其中。每一个符号都给予一个独一无二的编码，使用Unicode 没有乱码的问题。</p></li><li><p>Unicode 的缺点：Unicode 只规定了符号的二进制代码，却没有规定这个二进制代码应该如何存储：无法区别Unicode 和ASCII：计算机无法区分三个字节表示一个符号还是分别表示三个符号。另外，我们知道，英文字母只用一个字节表示就够了，如果unicode统一规定，每个符号用三个或四个字节表示，那么每个英文字母前都必然有二到三个字节是0，这对于存储空间来说是极大的浪费</p></li></ul><blockquote><p>了解：UTF-8</p></blockquote><ul><li>UTF-8 是在互联网上使用最广的一种 Unicode 的实现方式。</li><li>UTF-8 是一种变长的编码方式。它可以使用 1-6 个字节表示一个符号，根据不同的符号而变化字节长度。</li><li>UTF-8的编码规则：</li><li>对于单字节的UTF-8编码，该字节的最高位为0，其余7位用来对字符进行编码（等同于ASCII码）。</li><li>对于多字节的UTF-8编码，如果编码包含n 个字节，那么第一个字节的前n位为1，第一个字节的第n+1 位为0，该字节的剩余各位用来对字符进行编码。在第一个字节之后的所有的字节，都是最高两位为”10”，其余6位用来对字符进行编码。</li></ul><h1 id="7-进制之间的转换"><a href="#7-进制之间的转换" class="headerlink" title="7. 进制之间的转换"></a>7. 进制之间的转换</h1><ul><li><p>Java整数常量默认是int类型，当用二进制定义整数时，其第32位是符号位；当是long类型时，二进制默认占64位，第64位是符号位</p></li><li><p>二进制的整数有如下三种形式：</p><ul><li>原码：直接将一个数值换成二进制数。最高位是符号位</li><li>负数的反码：是对原码按位取反，只是最高位（符号位）确定为1。</li><li>负数的补码：其反码加1。计算机以二进制补码的形式保存所有的整数。</li><li>正数的原码、反码、补码都相同，负数的补码是其反码+1</li></ul></li></ul><blockquote><p>为什么要使用原码、反码、补码表示形式呢？</p></blockquote><p>计算机辨别“符号位”显然会让计算机的基础电路设计变得十分复杂! 于是人们想出了将符号位也参与运算的方法.</p><p>我们知道, 根据运算法则减去一个正数等于加上一个负数, 即: 1-1 &#x3D; 1 + (-1) &#x3D; 0 , 所以机器可以只有加法而没有减法, 这样计算机运算的设计就更简单了</p><p><img src="/../img/Java%EF%BD%9C%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/image-4.png" alt="1-1=0"></p><p><img src="/../img/Java%EF%BD%9C%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/image-5.png" alt="原码补码反码"></p><ul><li>对于正数来讲：原码、反码、补码是相同的：三码合一。</li><li>计算机底层都是使用二进制表示的数值。</li><li>计算机底层都是使用的数值的 补码 保存数据的。</li></ul><p><strong>进制转换</strong></p><ul><li>二进制转成十进制乘以2的幂数</li><li>十进制转成二进制除以2取余数</li></ul>]]></content>
    
    
    <categories>
      
      <category>JavaSE</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Java｜语言概述</title>
    <link href="/2024/07/27/8891512a.html"/>
    <url>/2024/07/27/8891512a.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>人有不为也，而后可以有为</p></blockquote><h1 id="1-运行机制"><a href="#1-运行机制" class="headerlink" title="1. 运行机制"></a>1. 运行机制</h1><p>javac HelloWorld.java – 此命令将 HelloWorld.java 文件编译成 HelloWorld.class 文件</p><p>java HelloWorld – 此命令将 HelloWorld.class 文件解释并执行</p><p><img src="/../img/Java%EF%BD%9C%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image.png" alt="运行机制"></p><h1 id="2-环境搭建"><a href="#2-环境搭建" class="headerlink" title="2. 环境搭建"></a>2. 环境搭建</h1><h2 id="2-1-JVM、JRE、JDK区别"><a href="#2-1-JVM、JRE、JDK区别" class="headerlink" title="2.1 JVM、JRE、JDK区别"></a>2.1 JVM、JRE、JDK区别</h2><p><strong>JVM</strong> ：英文名称（Java Virtual Machine），就是我们耳熟能详的 Java 虚拟机。它只认识 xxx.class 这种类型的文件，它能够将 class 文件中的字节码指令进行识别并调用操作系统向上的 API 完成动作。所以说，jvm 是 Java 能够跨平台的核心，具体的下文会详细说明。</p><p><strong>JRE</strong> ：英文名称（Java Runtime Environment），我们叫它：Java 运行时环境。它主要包含两个部分，jvm 的标准实现和 Java 的一些基本类库。它相对于 jvm 来说，多出来的是一部分的 Java 类库。如果你只是为了运行一下 java 程序的话，那么只用装 JRE 就可以了。</p><p><strong>JDK</strong> ：英文名称（Java Development Kit），Java 开发工具包。jdk 是整个 Java 开发的核心，它集成了 jre 和一些好用的小工具。例如：javac.exe，java.exe，jar.exe 等。</p><ul><li>bin：最主要的是编译器</li><li>include：java 和 JVM 交互的头文件</li><li>lib：类库</li><li>jre：java 运行环境</li></ul><p>显然，这三者的关系是：一层层的嵌套关系。<strong>JDK&gt;JRE&gt;JVM</strong></p><p><strong>JDK &#x3D; JRE + 开发工具集</strong></p><p><strong>JRE &#x3D; Java 系统类库 + JVM</strong></p><p><img src="/../img/Java%EF%BD%9C%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-3.png" alt="关系图"></p><h2 id="2-2-Oracle-JDK-OpenJDK"><a href="#2-2-Oracle-JDK-OpenJDK" class="headerlink" title="2.2 Oracle JDK &amp; OpenJDK"></a>2.2 Oracle JDK &amp; OpenJDK</h2><p>总结：复制参考 <a href="https://github.com/Snailclimb/JavaGuide/blob/master/docs/java/basis/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.md#jvm-vs-jdk-vs-jre">链接</a></p><ol><li>Oracle JDK 大概每 6 个月发一次主要版本，而 OpenJDK 版本大概每三个月发布一次。但这不是固定的，我觉得了解这个没啥用处。<a href="https://blogs.oracle.com/java-platform-group/update-and-faq-on-the-java-se-release-cadence">详情参见</a></li><li>OpenJDK 是一个参考模型并且是完全开源的，而 Oracle JDK 是 OpenJDK 的一个实现，并不是完全开源的；</li><li>Oracle JDK 比 OpenJDK 更稳定。OpenJDK 和 Oracle JDK 的代码几乎相同，但 Oracle JDK 有更多的类和一些错误修复。因此，如果您想开发企业&#x2F;商业软件，我建议您选择 Oracle JDK，因为它经过了彻底的测试和稳定。某些情况下，有些人提到在使用 OpenJDK 可能会遇到了许多应用程序崩溃的问题，但是，只需切换到 Oracle JDK 就可以解决问题；</li><li>在响应性和 JVM 性能方面，Oracle JDK 与 OpenJDK 相比提供了更好的性能；</li><li>Oracle JDK 不会为即将发布的版本提供长期支持，用户每次都必须通过更新到最新版本获得支持来获取最新版本；</li><li>Oracle JDK 使用 BCL&#x2F;OTN 协议获得许可，而 OpenJDK 根据 GPL v2 许可获得许可。</li></ol><h2 id="2-3-下载与安装"><a href="#2-3-下载与安装" class="headerlink" title="2.3 下载与安装"></a>2.3 下载与安装</h2><p>为何现在使用 Java 8 的人还是很多，这个 <a href="https://www.cnblogs.com/javastack/p/13355605.html">链接</a> 讲的很清晰。</p><p>“长期支持的版本”（Long Term Support release，简称LTS），该版本会提供为期三年的支持。Java 8 是一个LTS，当前的 LTS 是 Java 11，下一个应该是 Java 17。</p><p>所以就目前来说，可以先以 Java 8 进行学习，后面可以针对新版本的特性，再进行学习。</p><p>下载JDK：<a href="https://www.oracle.com/java/technologies/downloads/">oracle 官网</a>、目前 oracle 下载需要登陆操作，可以在网上找个登陆账户。也可以在这个地址下载：<a href="http://www.codebaoku.com/jdk/jdk-index.html">http://www.codebaoku.com/jdk/jdk-index.html</a></p><p>安装过程比较简单，下载完毕，一直下一步下一步即可</p><blockquote><p><strong>注：对于 Windows 环境可以不勾选，安装公共 JRE，因为 JDK 中已经包含了</strong></p></blockquote><h2 id="2-4-Mca-环境变量配置"><a href="#2-4-Mca-环境变量配置" class="headerlink" title="2.4 Mca 环境变量配置"></a>2.4 Mca 环境变量配置</h2><p>如果是第一次配置环境变量，可以使用<code>touch .bash_profile</code> 创建一个 .bash_profile 的隐藏配置文件</p><p>如果文件已存在，可以使用 <code>open -e .bash_profile</code> 命令打开文件</p><p>open 参数 -e 的作用是 Opens with TextEdit.  使用文本编辑器打开</p><p><img src="/../img/Java%EF%BD%9C%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-4.png" alt="open-e"></p><p>打开 <code>.bash_profile</code> 后输入以下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home<br>PATH=<span class="hljs-variable">$JAVA_HOME</span>/bin:<span class="hljs-variable">$PATH</span>:<br><span class="hljs-built_in">export</span> JAVA_HOME<br><span class="hljs-built_in">export</span> PATH<br><br></code></pre></td></tr></table></figure><p>输入完毕后保存，然后执行 <code>source .bash_profile</code> 使配置生效</p><p>输入<code>java -version</code> 查看 jdk 版本</p><p><img src="/../img/Java%EF%BD%9C%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-5.png" alt="java版本"></p><p>可以使用 <code>echo $PATH</code> 查询环境变量</p><p>PATH 的语法为如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#中间用冒号隔开</span><br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:&lt;PATH 1&gt;:&lt;PATH 2&gt;:&lt;PATH 3&gt;:------:&lt;PATH N&gt;<br></code></pre></td></tr></table></figure><p><strong>分别解释下每行的意思</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 配置 JAVA_HOME 地址，也就是 JDK 的安装目录下的 Home 目录</span><br>JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home<br><br><span class="hljs-comment"># 表示在保留原来的 $PATH 环境变量的基础上，再增加 $JAVA_HOME/bin 这个路径作为新的 $PATH 环境变量</span><br>PATH=<span class="hljs-variable">$JAVA_HOME</span>/bin:<span class="hljs-variable">$PATH</span>:<br><br>Linux <span class="hljs-built_in">export</span> 命令用于设置或显示环境变量<br><span class="hljs-built_in">export</span> JAVA_HOME<br><span class="hljs-built_in">export</span> PATH<br></code></pre></td></tr></table></figure><h2 id="2-5-配置-Windows-环境变量"><a href="#2-5-配置-Windows-环境变量" class="headerlink" title="2.5 配置 Windows 环境变量"></a>2.5 配置 Windows 环境变量</h2><p>找的 Windows 环境变量，点击新建系统环境变量，输入变量名，变量值（具体的 jdk 安装路径），点击确定</p><ul><li>变量名：JAVA_HOME</li><li>变量值：C:\Java\jdk1.8.0_311</li></ul><p><img src="/../img/Java%EF%BD%9C%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-6.png" alt="编辑系统变量"></p><ul><li>然后找的 PATH 双击&#x2F;编辑，新建 <code>%JAVA_HOME%\bin</code> 点击确认，后配置完毕</li><li>验证是否成功</li></ul><p><img src="/../img/Java%EF%BD%9C%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-7.png" alt="验证"></p><h2 id="2-6-classpath-配置说明"><a href="#2-6-classpath-配置说明" class="headerlink" title="2.6 classpath 配置说明"></a>2.6 classpath 配置说明</h2><p>目前发现网上很多的博客都会让配置 classpath 环境变量，如下面的两行的几行内容，首先我们先弄明白这个 classpath 的作用是什么，作用是指定类搜索路径</p><ul><li><p>mac 系统</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">CLASSPATH=<span class="hljs-variable">$JAVA_HOME</span>/lib/tools.jar:<span class="hljs-variable">$JAVA</span>\_HOME/lib/dt.jar:<br><span class="hljs-built_in">export</span> CLASSPATH<br></code></pre></td></tr></table></figure></li><li><p>Windows 系统</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">.;%Java\_Home%\bin;%Java\_Home%\lib\dt.jar;%Java\_Home%\lib\tools.jar<br></code></pre></td></tr></table></figure></li></ul><p>解释一下上面两行内容的作用</p><p>Java_Home 代表了 jdk 的路径</p><ul><li>dt.jar是关于运行环境的类库，主要是用于swing的包，如果不使用可以不配置</li><li>tools.jar是工具类库,它在编译和运行一个类时被使用</li></ul><p>我们在配置 classpath 后，系统会根据我们所配置的 classpath 加载类</p><p>例如：在我们使用 javac 命令编译程序时，系统加载 tools.jar 其实就封装了下面这样一条命令</p><blockquote><p>javac XXX.java</p></blockquote><blockquote><p>java -Classpath&#x3D;%JAVA_HOME%\lib\tools.jar xx.xxx.Main XXX.java</p></blockquote><p>当然 tools 的功能可不止这一点，但是确实它为我们提供了很多便利</p><p>在 JDK1.5 以后，classpath 并不是必须配置了，在 JDK1.5 之前，是没有办法在当前目录下加载类的（找不到 JDK目录下lib文件夹中的.jar文件），所以我们需要通过配置 classpath，但 JDK1.5 之后，JRE 能自动搜索目录下类文件，并且加载 dt.jar 和 tool.jar 的类</p><p><strong>官方文档解释（JDK Tools and Utilities）</strong></p><blockquote><p>The class path tells the JDK tools and applications where to find third-party and user-defined classes that are not extensions or part of the Java platform. See The Extension Mechanism at</p><p>类路径告诉JDK工具和应用程序在哪里可以找到第三方和用户定义的类，这些类既不是Java平台的扩展，也不是Java平台的一部分。参见扩展机制</p><p>If you upgrade from an earlier release of the JDK, then your startup settings might include CLASSPATH settings that are no longer needed. You should remove any settings that are not application-specific, such as classes.zip. Some third-party applications that use the Java Virtual Machine (JVM) can modify your CLASSPATH environment variable to include the libraries they use. Such settings can remain.</p><p>如果您从JDK的早期版本升级，那么您的启动设置可能包括不再需要的类路径设置。您应该删除任何与应用程序无关的设置，比如classes.zip。一些使用Java虚拟机(JVM)的第三方应用程序可以修改类路径环境变量，以包含它们使用的库。这样的设置可以保留。</p><p>You can change the class path by using the -classpath or -cp option of some Java commands when you call the JVM or other JDK tools or by using the CLASSPATH environment variable. See JDK Commands Class Path Options. Using the -classpath option is preferred over setting the CLASSPATH environment variable because you can set it individually for each application without affecting other applications and without other applications modifying its value. See CLASSPATH Environment Variable.</p><p>在调用JVM或其他JDK工具时，可以使用一些Java命令的-classpath或-cp选项，或者使用CLASSPATH环境变量，来更改类路径。参见JDK命令类路径选项。使用-classpath选项优于设置CLASSPATH环境变量，因为您可以为每个应用程序单独设置它，而不影响其他应用程序，也不需要其他应用程序修改它的值。参见CLASSPATH环境变量。</p></blockquote><p>通过官方的文档说明我们可以看到，dt.jar 和 tool.jar 这两种属于 java 平台自身的包就不需要添加到 classpath 中，只有一些第三方类或者自定义类需要，也并不推荐使用配置 classpath 的方法，更推荐使用 -classpath 选项</p><p><strong>总结：在 JDK1.5 之后的版本，配置 Java 环境变量的时候不再需要配置 classpath，只需要配置 Java_Home 以及 path 即可！目前网上的资料过于陈旧</strong></p><p>上述内容摘自这个链接 <a href="https://www.cnblogs.com/ideal-20/p/11050114.html">链接</a></p><h1 id="3-HelloWorld-java"><a href="#3-HelloWorld-java" class="headerlink" title="3. HelloWorld.java"></a>3. HelloWorld.java</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorld</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Hello World&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/../img/Java%EF%BD%9C%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-8.png" alt="运行"></p><h1 id="4-Notepad-配置"><a href="#4-Notepad-配置" class="headerlink" title="4. Notepad++ 配置"></a>4. Notepad++ 配置</h1><p>为了前期多练练，选择 Notepad++ 作为编辑器，Notepad++ 安装插件后可以直接编译运行 java 代码</p><ol><li>在 Notepad++ 安装 NppExce 插件</li><li>在 Notepad++ 里面配置环境变量：选择 NppExce 下的 Execut 选项，输入以下环境变量，可保存为 “JAVA 编译加执行”</li><li>注意：需要勾选Follow $(CURRENT_DIRECTORY) ，不勾选编译时会提示找不到文件</li><li>编写代码完毕可以直接按 F6 快捷键，点击 OK 直接编译运行代码</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">NPP_SAVE<br>javac.exe <span class="hljs-string">&quot;<span class="hljs-subst">$(FILE_NAME)</span>&quot;</span><br>java.exe <span class="hljs-string">&quot;<span class="hljs-subst">$(NAME_PART)</span>&quot;</span><br></code></pre></td></tr></table></figure><p><img src="/../img/Java%EF%BD%9C%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-9.png" alt="NppExce"></p><p><img src="/../img/Java%EF%BD%9C%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-10.png" alt="运行"></p><h1 id="5-注释（comment）"><a href="#5-注释（comment）" class="headerlink" title="5. 注释（comment）"></a>5. 注释（comment）</h1><p>Java 支持三种注释方式：</p><ul><li>单行注释<ul><li>格式：&#x2F;&#x2F;</li></ul></li><li>多行注释<ul><li>格式：&#x2F;* 注释文字 *&#x2F;</li></ul></li><li>文档注释<ul><li>格式：&#x2F;** 开始 *&#x2F; 结束</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* <span class="hljs-doctag">@author</span> Test Name</span><br><span class="hljs-comment">* <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorld</span> &#123;<br>    <span class="hljs-comment">// 这是个单行注释文字</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         这是第二个 Java 程序</span><br><span class="hljs-comment">         它将输出字符串 Hello World~！</span><br><span class="hljs-comment">        */</span><br>        System.out.println(<span class="hljs-string">&quot;Hello World~！&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-1-文档注释"><a href="#5-1-文档注释" class="headerlink" title="5.1 文档注释"></a>5.1 文档注释</h2><p>在开始的 <strong>&#x2F;</strong>** 之后，第一行或几行是关于类、变量和方法的主要描述，之后，你可以包含一个或多个各种各样的 <strong>@</strong> 标签，下面是 javadoc 工具软件可以识别的标签及说明，摘自菜鸟教程，可能不是最新的<br />注：很多注释都是可以定义的，后期开发工具选用 IDEA ，可以自定义成模板的形式，每次通过快捷键自动输出在方法中，节省时间，也使代码更加规范，具体设定方式在后期文档中说明</p><table><thead><tr><th><strong>标签</strong></th><th><strong>描述</strong></th><th><strong>示例</strong></th></tr></thead><tbody><tr><td>@author</td><td>标识一个类的作者</td><td>@author description</td></tr><tr><td>@deprecated</td><td>指名一个过期的类或成员</td><td>@deprecated description</td></tr><tr><td>{@docRoot}</td><td>指明当前文档根目录的路径</td><td>Directory Path</td></tr><tr><td>@exception</td><td>标志一个类抛出的异常</td><td>@exception exception-name explanation</td></tr><tr><td>{@inheritDoc}</td><td>从直接父类继承的注释</td><td>Inherits a comment from the immediate surperclass.</td></tr><tr><td>{@link}</td><td>插入一个到另一个主题的链接</td><td>{@link name text}</td></tr><tr><td>{@linkplain}</td><td>插入一个到另一个主题的链接，但是该链接显示纯文本字体</td><td>Inserts an in-line link to another topic.</td></tr><tr><td>@param</td><td>说明一个方法的参数</td><td>@param parameter-name explanation</td></tr><tr><td>@return</td><td>说明返回值类型</td><td>@return explanation</td></tr><tr><td>@see</td><td>指定一个到另一个主题的链接</td><td>@see anchor</td></tr><tr><td>@serial</td><td>说明一个序列化属性</td><td>@serial description</td></tr><tr><td>@serialData</td><td>说明通过writeObject( ) 和 writeExternal( )方法写的数据</td><td>@serialData description</td></tr><tr><td>@serialField</td><td>说明一个ObjectStreamField组件</td><td>@serialField name type description</td></tr><tr><td>@since</td><td>标记当引入一个特定的变化时</td><td>@since release</td></tr><tr><td>@throws</td><td>和 @exception标签一样.</td><td>The @throws tag has the same meaning as the @exception tag.</td></tr><tr><td>{@value}</td><td>显示常量的值，该常量必须是static属性。</td><td>Displays the value of a constant, which must be a static field.</td></tr><tr><td>@version</td><td>指定类的版本</td><td>@version info</td></tr></tbody></table><h2 id="5-2-javadoc-输出什么"><a href="#5-2-javadoc-输出什么" class="headerlink" title="5.2 javadoc 输出什么"></a>5.2 javadoc 输出什么</h2><p>javadoc 工具将你的 Java 成员源代码作为输入，输出一些包含你程序注释的 HTML 文件，每个类的信息都将在独自的 HTML 文件里，javadoc 也可以输出继承的树形结构和索引，具体 javadoc 工具格式可以通过 <code>javadoc -help</code> 获取帮助信息。<br />通过运行 javadoc 命令输出程序的 HTML 文档，如下图所示，运行完毕会生成 mydoc 文件夹，里面就是输出的 HTML 文档。</p><p><img src="/../img/Java%EF%BD%9C%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-11.png" alt="javadoc"></p><p><img src="/../img/Java%EF%BD%9C%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-12.png" alt="mydoc"></p><h1 id="6-Mac安装多个Java版本"><a href="#6-Mac安装多个Java版本" class="headerlink" title="6. Mac安装多个Java版本"></a>6. Mac安装多个Java版本</h1><p><a href="https://blog.csdn.net/weixin_43589025/article/details/129941848">参考链接</a></p><p>JDK默认安装在&#x2F;Library&#x2F;Java目录下，打开访达，通过shift+command+g直达文件，如果安装成功，&#x2F;Library&#x2F;Java&#x2F;JavaVirtualMachines目录下，会有两个JDK：</p><p><img src="/../img/Java%EF%BD%9C%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-1.png" alt="Library"></p><p>接下来，打开终端，输入<code>vim \~/.bash\_profile</code> 编辑配置文件</p><p>在配置文件中，配置成以下内容，通过指令 jdk8 &#x2F; jdk17 进行版本的切换</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">JAVA_8_HOME=$(/usr/libexec/java_home -v 1.8.0)<br>JAVA_17_HOME=$(/usr/libexec/java_home -v 17)<br><br><span class="hljs-comment"># 设置默认JDK版本</span><br><span class="hljs-built_in">export</span> JAVA_HOME=<span class="hljs-variable">$JAVA_8_HOME</span><br><br><span class="hljs-comment"># 配置alias命令动态切换JDK版本</span><br><span class="hljs-built_in">alias</span> jdk8=<span class="hljs-string">&quot;export JAVA_HOME=<span class="hljs-variable">$JAVA_8_HOME</span>&quot;</span><br><span class="hljs-built_in">alias</span> jdk17=<span class="hljs-string">&quot;export JAVA_HOME=<span class="hljs-variable">$JAVA_17_HOME</span>&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaSE</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>基于 GitHub Pages + Hexo 搭建个人博客</title>
    <link href="/2024/07/27/d2b9b4ed.html"/>
    <url>/2024/07/27/d2b9b4ed.html</url>
    
    <content type="html"><![CDATA[<h1 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1. 环境准备"></a>1. 环境准备</h1><blockquote><p>准备环境：git、node.js 推荐使用 Homebrew</p></blockquote><h2 id="1-1-安装-brew"><a href="#1-1-安装-brew" class="headerlink" title="1.1 安装 brew"></a>1.1 安装 brew</h2><p><a href="https://brew.sh/zh-cn/">Homebrew官网</a></p><p>但是推荐下面安装脚本：</p><p><strong>安装脚本</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/bin/zsh -c <span class="hljs-string">&quot;<span class="hljs-subst">$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)</span>&quot;</span><br></code></pre></td></tr></table></figure><p><strong>卸载脚本</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/bin/zsh -c <span class="hljs-string">&quot;<span class="hljs-subst">$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/HomebrewUninstall.sh)</span>&quot;</span><br></code></pre></td></tr></table></figure><p><a href="https://gitee.com/cunkai/HomebrewCN/blob/master/error.md">常见问题</a></p><h2 id="1-2-安装node"><a href="#1-2-安装node" class="headerlink" title="1.2 安装node"></a>1.2 安装node</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew install node<br></code></pre></td></tr></table></figure><p>确认是否安装完成</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">node -v<br>npm -v<br></code></pre></td></tr></table></figure><p>这些命令将分别显示安装的 Node.js 版本和 npm 版本</p><h2 id="1-3-安装-Git"><a href="#1-3-安装-Git" class="headerlink" title="1.3 安装 Git"></a>1.3 安装 Git</h2><p>官网 <a href="https://git-scm.com/download/">Git</a> 下载对应系统版本的安装包或根据官网指引安装。安装完成后在终端输入 git -v，如果能正确显示 git 版本说明安装成功。也可以通过 brew 安装 git</p><h3 id="1-3-1-配置-Git"><a href="#1-3-1-配置-Git" class="headerlink" title="1.3.1 配置 Git"></a>1.3.1 配置 Git</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#1. 设置用户名（可以用你github账号用户名）</span><br>git config --global user.name <span class="hljs-string">&#x27;你的用户名&#x27;</span><br><br><span class="hljs-comment">#2. 设置邮箱 （可以用你github账号邮箱）</span><br>git config --global user.email <span class="hljs-string">&#x27;xxxx@163.com&#x27;</span><br><br><span class="hljs-comment">#3. 查看配置项（可以检查下前面配置号的用户名和邮箱）</span><br>git config --list<br></code></pre></td></tr></table></figure><h3 id="1-3-2-配置-Github-SSH-链接"><a href="#1-3-2-配置-Github-SSH-链接" class="headerlink" title="1.3.2 配置 Github - SSH 链接"></a>1.3.2 配置 Github - SSH 链接</h3><p>git 基础配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#1. 设置用户名（可以用你github账号用户名）</span><br>git config --global user.name <span class="hljs-string">&#x27;你的用户名&#x27;</span><br><br><span class="hljs-comment">#2. 设置邮箱 （可以用你github账号邮箱）</span><br>git config --global user.email <span class="hljs-string">&#x27;xxxx@163.com&#x27;</span><br><br><span class="hljs-comment">#3. 查看配置项（可以检查下前面配置号的用户名和邮箱）</span><br>git config --list<br><br><span class="hljs-comment">#4. 生成ssh密钥文件</span><br>ssh-keygen -t rsa -C <span class="hljs-string">&quot;xxxx@163.com&quot;</span><br><span class="hljs-comment"># （1）期间会让你确认密钥文件生成在哪里？（直接回车就是默认路径 C:\Users\用户名\.ssh）</span><br><span class="hljs-comment"># （2）会让你输入密码（这个密码是每次链接 github 需要输入的密码，可以直接回车，表示不设置密码）</span><br><span class="hljs-comment"># （3）如果是 mac 电脑，可以通过 cat ~/.ssh/id_rsa.pub 查看</span><br></code></pre></td></tr></table></figure><p>登陆 Github 找到 Setting 页面，选择左边的 点击左边的“SSH and GPG keys”，然后点击右边的“New SSH Key” 如下图所示<br><img src="/../img/myblog-build/image-0.png" alt="New SSH key"></p><p>把刚才复制的公钥贴在 Key 的框框里面，同时在 Title 的框框里给这个公钥取一个名字，方便和其他的公钥区分，然后点击 Add SSH key 按钮即可添加成功</p><p><img src="/../img/myblog-build/image-1.png" alt="Add new SSH key"></p><h3 id="1-3-3-验证是否配置成功"><a href="#1-3-3-验证是否配置成功" class="headerlink" title="1.3.3 验证是否配置成功"></a>1.3.3 验证是否配置成功</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -T git@github.com<br><span class="hljs-comment"># Attempts to ssh to GitHub</span><br></code></pre></td></tr></table></figure><p>您可能会看到类似如下的警告：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt; The authenticity of host <span class="hljs-string">&#x27;github.com (IP ADDRESS)&#x27;</span> can<span class="hljs-string">&#x27;t be established.</span><br><span class="hljs-string">&gt; ED25519 key fingerprint is SHA256:+DiY3wvvV6TuJJhbpZisF/zLDA0zPMSvHdkr4UvCOqU.</span><br><span class="hljs-string">&gt; Are you sure you want to continue connecting (yes/no)?</span><br></code></pre></td></tr></table></figure><p>验证所看到消息中的指纹是否与 GitHub 的公钥指纹匹配。 如果是，则键入 yes</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt; Hi USERNAME! You<span class="hljs-string">&#x27;ve successfully authenticated, but GitHub does not</span><br><span class="hljs-string">&gt; provide shell access.</span><br></code></pre></td></tr></table></figure><p>这块内容也可以参考 <strong>Github 官方教程</strong></p><ul><li><a href="https://docs.github.com/zh/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent">生成新的 SSH 密钥</a></li><li><a href="https://docs.github.com/zh/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account">添加新的 SSH 密钥</a></li><li><a href="https://docs.github.com/zh/authentication/connecting-to-github-with-ssh/testing-your-ssh-connection">验证 SSH 链接</a></li></ul><h2 id="1-4-Github-Pages"><a href="#1-4-Github-Pages" class="headerlink" title="1.4 Github Pages"></a>1.4 Github Pages</h2><p>使用个人 GitHub 创建仓库，并配置 GitHub Pages</p><blockquote><p>注意：此仓库用于存放个人博客页面，仓库名必须使用 <code>&lt;GitHub用户名&gt;.github.io</code> 格式</p></blockquote><p><img src="/../img/myblog-build/image-2.png" alt="GitHub Pages"></p><h1 id="2-安装-Hexo"><a href="#2-安装-Hexo" class="headerlink" title="2. 安装 Hexo"></a>2. 安装 Hexo</h1><p>可以参考 <a href="https://hexo.io/zh-cn/docs/">Hexo官网安装教程</a> 进行详细步骤操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><p>自选合适的目录，新建文件夹 <code>&lt;folder&gt;</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> &lt;folder&gt;<br>hexo init<br>npm install<br></code></pre></td></tr></table></figure><h2 id="2-1-hexo-常用命令"><a href="#2-1-hexo-常用命令" class="headerlink" title="2.1 hexo 常用命令"></a>2.1 hexo 常用命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo n <span class="hljs-string">&quot;我的博客&quot;</span> == hexo new <span class="hljs-string">&quot;我的博客&quot;</span> <span class="hljs-comment">#新建文章</span><br>hexo g == hexo generate <span class="hljs-comment">#生成静态文件</span><br>hexo s == hexo server <span class="hljs-comment">#启动服务本地预览</span><br>hexo d == hexo deploy <span class="hljs-comment">#部署</span><br>hexo clean <span class="hljs-comment">#清除缓存 网页正常情况下可以忽略此条命令</span><br></code></pre></td></tr></table></figure><h2 id="2-2-安装主题"><a href="#2-2-安装主题" class="headerlink" title="2.2 安装主题"></a>2.2 安装主题</h2><p>目前站点用的主题是 <a href="https://hexo.fluid-dev.com/docs/start/">fluid</a> 可以按照官方教程安装即可</p><p>相关主题配置留意查看官方文档以及配置文件注释信息 <a href="https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml">_config.fluid.yml</a></p><h2 id="2-3-修改配置"><a href="#2-3-修改配置" class="headerlink" title="2.3 修改配置"></a>2.3 修改配置</h2><blockquote><p>如果已经新建了 Gtihub Pages 打开 <code>_config.yml</code> 配置文件添加如下内容</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">deploy: <br>  <span class="hljs-built_in">type</span>: git <br>  repository: git@github.com:lanyecheng/lanyecheng.github.io.git<br>  branch: main<br></code></pre></td></tr></table></figure><h2 id="2-4-安装插件"><a href="#2-4-安装插件" class="headerlink" title="2.4 安装插件"></a>2.4 安装插件</h2><p><a href="https://hexo.io/zh-cn/docs/one-command-deployment">一键部署官方文档</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><h1 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h1><p>后续大概的流程就是</p><ul><li>hexo n xxx</li><li>hexo clean</li><li>hexo g</li><li>hexo s</li><li>hexo d</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
