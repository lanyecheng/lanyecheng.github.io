<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Java｜语言概述</title>
    <link href="/2024/07/30/Java%EF%BD%9C%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/"/>
    <url>/2024/07/30/Java%EF%BD%9C%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/</url>
    
    <content type="html"><![CDATA[<blockquote><p>人有不为也，而后可以有为</p></blockquote><h1 id="1-运行机制"><a href="#1-运行机制" class="headerlink" title="1. 运行机制"></a>1. 运行机制</h1><p>javac HelloWorld.java – 此命令将 HelloWorld.java 文件编译成 HelloWorld.class 文件</p><p>java HelloWorld – 此命令将 HelloWorld.class 文件解释并执行</p><p><img src="/../img/Java%EF%BD%9C%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image.png" alt="运行机制"></p><h1 id="2-环境搭建"><a href="#2-环境搭建" class="headerlink" title="2. 环境搭建"></a>2. 环境搭建</h1><h2 id="2-1-JVM、JRE、JDK区别"><a href="#2-1-JVM、JRE、JDK区别" class="headerlink" title="2.1 JVM、JRE、JDK区别"></a>2.1 JVM、JRE、JDK区别</h2><p><strong>JVM</strong> ：英文名称（Java Virtual Machine），就是我们耳熟能详的 Java 虚拟机。它只认识 xxx.class 这种类型的文件，它能够将 class 文件中的字节码指令进行识别并调用操作系统向上的 API 完成动作。所以说，jvm 是 Java 能够跨平台的核心，具体的下文会详细说明。</p><p><strong>JRE</strong> ：英文名称（Java Runtime Environment），我们叫它：Java 运行时环境。它主要包含两个部分，jvm 的标准实现和 Java 的一些基本类库。它相对于 jvm 来说，多出来的是一部分的 Java 类库。如果你只是为了运行一下 java 程序的话，那么只用装 JRE 就可以了。</p><p><strong>JDK</strong> ：英文名称（Java Development Kit），Java 开发工具包。jdk 是整个 Java 开发的核心，它集成了 jre 和一些好用的小工具。例如：javac.exe，java.exe，jar.exe 等。</p><ul><li>bin：最主要的是编译器</li><li>include：java 和 JVM 交互的头文件</li><li>lib：类库</li><li>jre：java 运行环境</li></ul><p>显然，这三者的关系是：一层层的嵌套关系。<strong>JDK&gt;JRE&gt;JVM</strong></p><p><strong>JDK &#x3D; JRE + 开发工具集</strong></p><p><strong>JRE &#x3D; Java 系统类库 + JVM</strong></p><p><img src="/../img/Java%EF%BD%9C%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-3.png" alt="关系图"></p><h2 id="2-2-Oracle-JDK-OpenJDK"><a href="#2-2-Oracle-JDK-OpenJDK" class="headerlink" title="2.2 Oracle JDK &amp; OpenJDK"></a>2.2 Oracle JDK &amp; OpenJDK</h2><p>总结：复制参考 <a href="https://github.com/Snailclimb/JavaGuide/blob/master/docs/java/basis/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.md#jvm-vs-jdk-vs-jre">链接</a></p><ol><li>Oracle JDK 大概每 6 个月发一次主要版本，而 OpenJDK 版本大概每三个月发布一次。但这不是固定的，我觉得了解这个没啥用处。<a href="https://blogs.oracle.com/java-platform-group/update-and-faq-on-the-java-se-release-cadence">详情参见</a></li><li>OpenJDK 是一个参考模型并且是完全开源的，而 Oracle JDK 是 OpenJDK 的一个实现，并不是完全开源的；</li><li>Oracle JDK 比 OpenJDK 更稳定。OpenJDK 和 Oracle JDK 的代码几乎相同，但 Oracle JDK 有更多的类和一些错误修复。因此，如果您想开发企业&#x2F;商业软件，我建议您选择 Oracle JDK，因为它经过了彻底的测试和稳定。某些情况下，有些人提到在使用 OpenJDK 可能会遇到了许多应用程序崩溃的问题，但是，只需切换到 Oracle JDK 就可以解决问题；</li><li>在响应性和 JVM 性能方面，Oracle JDK 与 OpenJDK 相比提供了更好的性能；</li><li>Oracle JDK 不会为即将发布的版本提供长期支持，用户每次都必须通过更新到最新版本获得支持来获取最新版本；</li><li>Oracle JDK 使用 BCL&#x2F;OTN 协议获得许可，而 OpenJDK 根据 GPL v2 许可获得许可。</li></ol><h2 id="2-3-下载与安装"><a href="#2-3-下载与安装" class="headerlink" title="2.3 下载与安装"></a>2.3 下载与安装</h2><p>为何现在使用 Java 8 的人还是很多，这个 <a href="https://www.cnblogs.com/javastack/p/13355605.html">链接</a> 讲的很清晰。</p><p>“长期支持的版本”（Long Term Support release，简称LTS），该版本会提供为期三年的支持。Java 8 是一个LTS，当前的 LTS 是 Java 11，下一个应该是 Java 17。</p><p>所以就目前来说，可以先以 Java 8 进行学习，后面可以针对新版本的特性，再进行学习。</p><p>下载JDK：<a href="https://www.oracle.com/java/technologies/downloads/">oracle 官网</a>、目前 oracle 下载需要登陆操作，可以在网上找个登陆账户。也可以在这个地址下载：<a href="http://www.codebaoku.com/jdk/jdk-index.html">http://www.codebaoku.com/jdk/jdk-index.html</a></p><p>安装过程比较简单，下载完毕，一直下一步下一步即可</p><blockquote><p><strong>注：对于 Windows 环境可以不勾选，安装公共 JRE，因为 JDK 中已经包含了</strong></p></blockquote><h2 id="2-4-Mca-环境变量配置"><a href="#2-4-Mca-环境变量配置" class="headerlink" title="2.4 Mca 环境变量配置"></a>2.4 Mca 环境变量配置</h2><p>如果是第一次配置环境变量，可以使用<code>touch .bash_profile</code> 创建一个 .bash_profile 的隐藏配置文件</p><p>如果文件已存在，可以使用 <code>open -e .bash_profile</code> 命令打开文件</p><p>open 参数 -e 的作用是 Opens with TextEdit.  使用文本编辑器打开</p><p><img src="/../img/Java%EF%BD%9C%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-4.png" alt="open-e"></p><p>打开 <code>.bash_profile</code> 后输入以下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home<br>PATH=<span class="hljs-variable">$JAVA_HOME</span>/bin:<span class="hljs-variable">$PATH</span>:<br><span class="hljs-built_in">export</span> JAVA_HOME<br><span class="hljs-built_in">export</span> PATH<br><br></code></pre></td></tr></table></figure><p>输入完毕后保存，然后执行 <code>source .bash_profile</code> 使配置生效</p><p>输入<code>java -version</code> 查看 jdk 版本</p><p><img src="/../img/Java%EF%BD%9C%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-5.png" alt="java版本"></p><p>可以使用 <code>echo $PATH</code> 查询环境变量</p><p>PATH 的语法为如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#中间用冒号隔开</span><br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:&lt;PATH 1&gt;:&lt;PATH 2&gt;:&lt;PATH 3&gt;:------:&lt;PATH N&gt;<br></code></pre></td></tr></table></figure><p><strong>分别解释下每行的意思</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 配置 JAVA_HOME 地址，也就是 JDK 的安装目录下的 Home 目录</span><br>JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home<br><br><span class="hljs-comment"># 表示在保留原来的 $PATH 环境变量的基础上，再增加 $JAVA_HOME/bin 这个路径作为新的 $PATH 环境变量</span><br>PATH=<span class="hljs-variable">$JAVA_HOME</span>/bin:<span class="hljs-variable">$PATH</span>:<br><br>Linux <span class="hljs-built_in">export</span> 命令用于设置或显示环境变量<br><span class="hljs-built_in">export</span> JAVA_HOME<br><span class="hljs-built_in">export</span> PATH<br></code></pre></td></tr></table></figure><h2 id="2-5-配置-Windows-环境变量"><a href="#2-5-配置-Windows-环境变量" class="headerlink" title="2.5 配置 Windows 环境变量"></a>2.5 配置 Windows 环境变量</h2><p>找的 Windows 环境变量，点击新建系统环境变量，输入变量名，变量值（具体的 jdk 安装路径），点击确定</p><ul><li>变量名：JAVA_HOME</li><li>变量值：C:\Java\jdk1.8.0_311</li></ul><p><img src="/../img/Java%EF%BD%9C%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-6.png" alt="编辑系统变量"></p><ul><li>然后找的 PATH 双击&#x2F;编辑，新建 <code>%JAVA_HOME%\bin</code> 点击确认，后配置完毕</li><li>验证是否成功</li></ul><p><img src="/../img/Java%EF%BD%9C%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-7.png" alt="验证"></p><h2 id="2-6-classpath-配置说明"><a href="#2-6-classpath-配置说明" class="headerlink" title="2.6 classpath 配置说明"></a>2.6 classpath 配置说明</h2><p>目前发现网上很多的博客都会让配置 classpath 环境变量，如下面的两行的几行内容，首先我们先弄明白这个 classpath 的作用是什么，作用是指定类搜索路径</p><ul><li><p>mac 系统</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">CLASSPATH=<span class="hljs-variable">$JAVA_HOME</span>/lib/tools.jar:<span class="hljs-variable">$JAVA</span>\_HOME/lib/dt.jar:<br><span class="hljs-built_in">export</span> CLASSPATH<br></code></pre></td></tr></table></figure></li><li><p>Windows 系统</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">.;%Java\_Home%\bin;%Java\_Home%\lib\dt.jar;%Java\_Home%\lib\tools.jar<br></code></pre></td></tr></table></figure></li></ul><p>解释一下上面两行内容的作用</p><p>Java_Home 代表了 jdk 的路径</p><ul><li>dt.jar是关于运行环境的类库，主要是用于swing的包，如果不使用可以不配置</li><li>tools.jar是工具类库,它在编译和运行一个类时被使用</li></ul><p>我们在配置 classpath 后，系统会根据我们所配置的 classpath 加载类</p><p>例如：在我们使用 javac 命令编译程序时，系统加载 tools.jar 其实就封装了下面这样一条命令</p><blockquote><p>javac XXX.java</p></blockquote><blockquote><p>java -Classpath&#x3D;%JAVA_HOME%\lib\tools.jar xx.xxx.Main XXX.java</p></blockquote><p>当然 tools 的功能可不止这一点，但是确实它为我们提供了很多便利</p><p>在 JDK1.5 以后，classpath 并不是必须配置了，在 JDK1.5 之前，是没有办法在当前目录下加载类的（找不到 JDK目录下lib文件夹中的.jar文件），所以我们需要通过配置 classpath，但 JDK1.5 之后，JRE 能自动搜索目录下类文件，并且加载 dt.jar 和 tool.jar 的类</p><p><strong>官方文档解释（JDK Tools and Utilities）</strong></p><blockquote><p>The class path tells the JDK tools and applications where to find third-party and user-defined classes that are not extensions or part of the Java platform. See The Extension Mechanism at</p><p>类路径告诉JDK工具和应用程序在哪里可以找到第三方和用户定义的类，这些类既不是Java平台的扩展，也不是Java平台的一部分。参见扩展机制</p><p>If you upgrade from an earlier release of the JDK, then your startup settings might include CLASSPATH settings that are no longer needed. You should remove any settings that are not application-specific, such as classes.zip. Some third-party applications that use the Java Virtual Machine (JVM) can modify your CLASSPATH environment variable to include the libraries they use. Such settings can remain.</p><p>如果您从JDK的早期版本升级，那么您的启动设置可能包括不再需要的类路径设置。您应该删除任何与应用程序无关的设置，比如classes.zip。一些使用Java虚拟机(JVM)的第三方应用程序可以修改类路径环境变量，以包含它们使用的库。这样的设置可以保留。</p><p>You can change the class path by using the -classpath or -cp option of some Java commands when you call the JVM or other JDK tools or by using the CLASSPATH environment variable. See JDK Commands Class Path Options. Using the -classpath option is preferred over setting the CLASSPATH environment variable because you can set it individually for each application without affecting other applications and without other applications modifying its value. See CLASSPATH Environment Variable.</p><p>在调用JVM或其他JDK工具时，可以使用一些Java命令的-classpath或-cp选项，或者使用CLASSPATH环境变量，来更改类路径。参见JDK命令类路径选项。使用-classpath选项优于设置CLASSPATH环境变量，因为您可以为每个应用程序单独设置它，而不影响其他应用程序，也不需要其他应用程序修改它的值。参见CLASSPATH环境变量。</p></blockquote><p>通过官方的文档说明我们可以看到，dt.jar 和 tool.jar 这两种属于 java 平台自身的包就不需要添加到 classpath 中，只有一些第三方类或者自定义类需要，也并不推荐使用配置 classpath 的方法，更推荐使用 -classpath 选项</p><p><strong>总结：在 JDK1.5 之后的版本，配置 Java 环境变量的时候不再需要配置 classpath，只需要配置 Java_Home 以及 path 即可！目前网上的资料过于陈旧</strong></p><p>上述内容摘自这个链接 <a href="https://www.cnblogs.com/ideal-20/p/11050114.html">链接</a></p><h1 id="3-HelloWorld-java"><a href="#3-HelloWorld-java" class="headerlink" title="3. HelloWorld.java"></a>3. HelloWorld.java</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorld</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Hello World&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/../img/Java%EF%BD%9C%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-8.png" alt="运行"></p><h1 id="4-Notepad-配置"><a href="#4-Notepad-配置" class="headerlink" title="4. Notepad++ 配置"></a>4. Notepad++ 配置</h1><p>为了前期多练练，选择 Notepad++ 作为编辑器，Notepad++ 安装插件后可以直接编译运行 java 代码</p><ol><li>在 Notepad++ 安装 NppExce 插件</li><li>在 Notepad++ 里面配置环境变量：选择 NppExce 下的 Execut 选项，输入以下环境变量，可保存为 “JAVA 编译加执行”</li><li>注意：需要勾选Follow $(CURRENT_DIRECTORY) ，不勾选编译时会提示找不到文件</li><li>编写代码完毕可以直接按 F6 快捷键，点击 OK 直接编译运行代码</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">NPP_SAVE<br>javac.exe <span class="hljs-string">&quot;<span class="hljs-subst">$(FILE_NAME)</span>&quot;</span><br>java.exe <span class="hljs-string">&quot;<span class="hljs-subst">$(NAME_PART)</span>&quot;</span><br></code></pre></td></tr></table></figure><p><img src="/../img/Java%EF%BD%9C%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-9.png" alt="NppExce"></p><p><img src="/../img/Java%EF%BD%9C%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-10.png" alt="运行"></p><h1 id="5-注释（comment）"><a href="#5-注释（comment）" class="headerlink" title="5. 注释（comment）"></a>5. 注释（comment）</h1><p>Java 支持三种注释方式：</p><ul><li>单行注释<ul><li>格式：&#x2F;&#x2F;</li></ul></li><li>多行注释<ul><li>格式：&#x2F;* 注释文字 *&#x2F;</li></ul></li><li>文档注释<ul><li>格式：&#x2F;** 开始 *&#x2F; 结束</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* <span class="hljs-doctag">@author</span> Test Name</span><br><span class="hljs-comment">* <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorld</span> &#123;<br>    <span class="hljs-comment">// 这是个单行注释文字</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         这是第二个 Java 程序</span><br><span class="hljs-comment">         它将输出字符串 Hello World~！</span><br><span class="hljs-comment">        */</span><br>        System.out.println(<span class="hljs-string">&quot;Hello World~！&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-1-文档注释"><a href="#5-1-文档注释" class="headerlink" title="5.1 文档注释"></a>5.1 文档注释</h2><p>在开始的 <strong>&#x2F;</strong>** 之后，第一行或几行是关于类、变量和方法的主要描述，之后，你可以包含一个或多个各种各样的 <strong>@</strong> 标签，下面是 javadoc 工具软件可以识别的标签及说明，摘自菜鸟教程，可能不是最新的<br />注：很多注释都是可以定义的，后期开发工具选用 IDEA ，可以自定义成模板的形式，每次通过快捷键自动输出在方法中，节省时间，也使代码更加规范，具体设定方式在后期文档中说明</p><table><thead><tr><th><strong>标签</strong></th><th><strong>描述</strong></th><th><strong>示例</strong></th></tr></thead><tbody><tr><td>@author</td><td>标识一个类的作者</td><td>@author description</td></tr><tr><td>@deprecated</td><td>指名一个过期的类或成员</td><td>@deprecated description</td></tr><tr><td>{@docRoot}</td><td>指明当前文档根目录的路径</td><td>Directory Path</td></tr><tr><td>@exception</td><td>标志一个类抛出的异常</td><td>@exception exception-name explanation</td></tr><tr><td>{@inheritDoc}</td><td>从直接父类继承的注释</td><td>Inherits a comment from the immediate surperclass.</td></tr><tr><td>{@link}</td><td>插入一个到另一个主题的链接</td><td>{@link name text}</td></tr><tr><td>{@linkplain}</td><td>插入一个到另一个主题的链接，但是该链接显示纯文本字体</td><td>Inserts an in-line link to another topic.</td></tr><tr><td>@param</td><td>说明一个方法的参数</td><td>@param parameter-name explanation</td></tr><tr><td>@return</td><td>说明返回值类型</td><td>@return explanation</td></tr><tr><td>@see</td><td>指定一个到另一个主题的链接</td><td>@see anchor</td></tr><tr><td>@serial</td><td>说明一个序列化属性</td><td>@serial description</td></tr><tr><td>@serialData</td><td>说明通过writeObject( ) 和 writeExternal( )方法写的数据</td><td>@serialData description</td></tr><tr><td>@serialField</td><td>说明一个ObjectStreamField组件</td><td>@serialField name type description</td></tr><tr><td>@since</td><td>标记当引入一个特定的变化时</td><td>@since release</td></tr><tr><td>@throws</td><td>和 @exception标签一样.</td><td>The @throws tag has the same meaning as the @exception tag.</td></tr><tr><td>{@value}</td><td>显示常量的值，该常量必须是static属性。</td><td>Displays the value of a constant, which must be a static field.</td></tr><tr><td>@version</td><td>指定类的版本</td><td>@version info</td></tr></tbody></table><h2 id="5-2-javadoc-输出什么"><a href="#5-2-javadoc-输出什么" class="headerlink" title="5.2 javadoc 输出什么"></a>5.2 javadoc 输出什么</h2><p>javadoc 工具将你的 Java 成员源代码作为输入，输出一些包含你程序注释的 HTML 文件，每个类的信息都将在独自的 HTML 文件里，javadoc 也可以输出继承的树形结构和索引，具体 javadoc 工具格式可以通过 <code>javadoc -help</code> 获取帮助信息。<br />通过运行 javadoc 命令输出程序的 HTML 文档，如下图所示，运行完毕会生成 mydoc 文件夹，里面就是输出的 HTML 文档。</p><p><img src="/../img/Java%EF%BD%9C%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-11.png" alt="javadoc"></p><p><img src="/../img/Java%EF%BD%9C%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-12.png" alt="mydoc"></p><h1 id="6-Mac安装多个Java版本"><a href="#6-Mac安装多个Java版本" class="headerlink" title="6. Mac安装多个Java版本"></a>6. Mac安装多个Java版本</h1><p><a href="https://blog.csdn.net/weixin_43589025/article/details/129941848">参考链接</a></p><p>JDK默认安装在&#x2F;Library&#x2F;Java目录下，打开访达，通过shift+command+g直达文件，如果安装成功，&#x2F;Library&#x2F;Java&#x2F;JavaVirtualMachines目录下，会有两个JDK：</p><p><img src="/../img/Java%EF%BD%9C%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/image-13.png" alt="Library"></p><p>接下来，打开终端，输入<code>vim \~/.bash\_profile</code> 编辑配置文件</p><p>在配置文件中，配置成以下内容，通过指令 jdk8 &#x2F; jdk17 进行版本的切换</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">JAVA_8_HOME=$(/usr/libexec/java_home -v 1.8.0)<br>JAVA_17_HOME=$(/usr/libexec/java_home -v 17)<br><br><span class="hljs-comment"># 设置默认JDK版本</span><br><span class="hljs-built_in">export</span> JAVA_HOME=<span class="hljs-variable">$JAVA_8_HOME</span><br><br><span class="hljs-comment"># 配置alias命令动态切换JDK版本</span><br><span class="hljs-built_in">alias</span> jdk8=<span class="hljs-string">&quot;export JAVA_HOME=<span class="hljs-variable">$JAVA_8_HOME</span>&quot;</span><br><span class="hljs-built_in">alias</span> jdk17=<span class="hljs-string">&quot;export JAVA_HOME=<span class="hljs-variable">$JAVA_17_HOME</span>&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaSE</category>
      
      <category>Java基础</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>基于 GitHub Pages + Hexo 搭建个人博客</title>
    <link href="/2024/07/27/myblog-build/"/>
    <url>/2024/07/27/myblog-build/</url>
    
    <content type="html"><![CDATA[<h1 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1. 环境准备"></a>1. 环境准备</h1><blockquote><p>准备环境：git、node.js 推荐使用 Homebrew</p></blockquote><h2 id="1-1-安装-brew"><a href="#1-1-安装-brew" class="headerlink" title="1.1 安装 brew"></a>1.1 安装 brew</h2><p><a href="https://brew.sh/zh-cn/">Homebrew官网</a></p><p>但是推荐下面安装脚本：</p><p><strong>安装脚本</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/bin/zsh -c <span class="hljs-string">&quot;<span class="hljs-subst">$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)</span>&quot;</span><br></code></pre></td></tr></table></figure><p><strong>卸载脚本</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/bin/zsh -c <span class="hljs-string">&quot;<span class="hljs-subst">$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/HomebrewUninstall.sh)</span>&quot;</span><br></code></pre></td></tr></table></figure><p><a href="https://gitee.com/cunkai/HomebrewCN/blob/master/error.md">常见问题</a></p><h2 id="1-2-安装node"><a href="#1-2-安装node" class="headerlink" title="1.2 安装node"></a>1.2 安装node</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew install node<br></code></pre></td></tr></table></figure><p>确认是否安装完成</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">node -v<br>npm -v<br></code></pre></td></tr></table></figure><p>这些命令将分别显示安装的 Node.js 版本和 npm 版本</p><h2 id="1-3-安装-Git"><a href="#1-3-安装-Git" class="headerlink" title="1.3 安装 Git"></a>1.3 安装 Git</h2><p>官网 <a href="https://git-scm.com/download/">Git</a> 下载对应系统版本的安装包或根据官网指引安装。安装完成后在终端输入 git -v，如果能正确显示 git 版本说明安装成功。也可以通过 brew 安装 git</p><h3 id="1-3-1-配置-Git"><a href="#1-3-1-配置-Git" class="headerlink" title="1.3.1 配置 Git"></a>1.3.1 配置 Git</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#1. 设置用户名（可以用你github账号用户名）</span><br>git config --global user.name <span class="hljs-string">&#x27;你的用户名&#x27;</span><br><br><span class="hljs-comment">#2. 设置邮箱 （可以用你github账号邮箱）</span><br>git config --global user.email <span class="hljs-string">&#x27;xxxx@163.com&#x27;</span><br><br><span class="hljs-comment">#3. 查看配置项（可以检查下前面配置号的用户名和邮箱）</span><br>git config --list<br></code></pre></td></tr></table></figure><h3 id="1-3-2-配置-Github-SSH-链接"><a href="#1-3-2-配置-Github-SSH-链接" class="headerlink" title="1.3.2 配置 Github - SSH 链接"></a>1.3.2 配置 Github - SSH 链接</h3><p>git 基础配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#1. 设置用户名（可以用你github账号用户名）</span><br>git config --global user.name <span class="hljs-string">&#x27;你的用户名&#x27;</span><br><br><span class="hljs-comment">#2. 设置邮箱 （可以用你github账号邮箱）</span><br>git config --global user.email <span class="hljs-string">&#x27;xxxx@163.com&#x27;</span><br><br><span class="hljs-comment">#3. 查看配置项（可以检查下前面配置号的用户名和邮箱）</span><br>git config --list<br><br><span class="hljs-comment">#4. 生成ssh密钥文件</span><br>ssh-keygen -t rsa -C <span class="hljs-string">&quot;xxxx@163.com&quot;</span><br><span class="hljs-comment"># （1）期间会让你确认密钥文件生成在哪里？（直接回车就是默认路径 C:\Users\用户名\.ssh）</span><br><span class="hljs-comment"># （2）会让你输入密码（这个密码是每次链接 github 需要输入的密码，可以直接回车，表示不设置密码）</span><br><span class="hljs-comment"># （3）如果是 mac 电脑，可以通过 cat ~/.ssh/id_rsa.pub 查看</span><br></code></pre></td></tr></table></figure><p>登陆 Github 找到 Setting 页面，选择左边的 点击左边的“SSH and GPG keys”，然后点击右边的“New SSH Key” 如下图所示<br><img src="/../img/myblog-build/image-0.png" alt="New SSH key"></p><p>把刚才复制的公钥贴在 Key 的框框里面，同时在 Title 的框框里给这个公钥取一个名字，方便和其他的公钥区分，然后点击 Add SSH key 按钮即可添加成功</p><p><img src="/../img/myblog-build/image-1.png" alt="Add new SSH key"></p><h3 id="1-3-3-验证是否配置成功"><a href="#1-3-3-验证是否配置成功" class="headerlink" title="1.3.3 验证是否配置成功"></a>1.3.3 验证是否配置成功</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -T git@github.com<br><span class="hljs-comment"># Attempts to ssh to GitHub</span><br></code></pre></td></tr></table></figure><p>您可能会看到类似如下的警告：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt; The authenticity of host <span class="hljs-string">&#x27;github.com (IP ADDRESS)&#x27;</span> can<span class="hljs-string">&#x27;t be established.</span><br><span class="hljs-string">&gt; ED25519 key fingerprint is SHA256:+DiY3wvvV6TuJJhbpZisF/zLDA0zPMSvHdkr4UvCOqU.</span><br><span class="hljs-string">&gt; Are you sure you want to continue connecting (yes/no)?</span><br></code></pre></td></tr></table></figure><p>验证所看到消息中的指纹是否与 GitHub 的公钥指纹匹配。 如果是，则键入 yes</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">&gt; Hi USERNAME! You<span class="hljs-string">&#x27;ve successfully authenticated, but GitHub does not</span><br><span class="hljs-string">&gt; provide shell access.</span><br></code></pre></td></tr></table></figure><p>这块内容也可以参考 <strong>Github 官方教程</strong></p><ul><li><a href="https://docs.github.com/zh/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent">生成新的 SSH 密钥</a></li><li><a href="https://docs.github.com/zh/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account">添加新的 SSH 密钥</a></li><li><a href="https://docs.github.com/zh/authentication/connecting-to-github-with-ssh/testing-your-ssh-connection">验证 SSH 链接</a></li></ul><h2 id="1-4-Github-Pages"><a href="#1-4-Github-Pages" class="headerlink" title="1.4 Github Pages"></a>1.4 Github Pages</h2><p>使用个人 GitHub 创建仓库，并配置 GitHub Pages</p><blockquote><p>注意：此仓库用于存放个人博客页面，仓库名必须使用 <code>&lt;GitHub用户名&gt;.github.io</code> 格式</p></blockquote><p><img src="/../img/myblog-build/image-2.png" alt="GitHub Pages"></p><h1 id="2-安装-Hexo"><a href="#2-安装-Hexo" class="headerlink" title="2. 安装 Hexo"></a>2. 安装 Hexo</h1><p>可以参考 <a href="https://hexo.io/zh-cn/docs/">Hexo官网安装教程</a> 进行详细步骤操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><p>自选合适的目录，新建文件夹 <code>&lt;folder&gt;</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> &lt;folder&gt;<br>hexo init<br>npm install<br></code></pre></td></tr></table></figure><h2 id="2-1-hexo-常用命令"><a href="#2-1-hexo-常用命令" class="headerlink" title="2.1 hexo 常用命令"></a>2.1 hexo 常用命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo n <span class="hljs-string">&quot;我的博客&quot;</span> == hexo new <span class="hljs-string">&quot;我的博客&quot;</span> <span class="hljs-comment">#新建文章</span><br>hexo g == hexo generate <span class="hljs-comment">#生成静态文件</span><br>hexo s == hexo server <span class="hljs-comment">#启动服务本地预览</span><br>hexo d == hexo deploy <span class="hljs-comment">#部署</span><br>hexo clean <span class="hljs-comment">#清除缓存 网页正常情况下可以忽略此条命令</span><br></code></pre></td></tr></table></figure><h2 id="2-2-安装主题"><a href="#2-2-安装主题" class="headerlink" title="2.2 安装主题"></a>2.2 安装主题</h2><p>目前站点用的主题是 <a href="https://hexo.fluid-dev.com/docs/start/">fluid</a> 可以按照官方教程安装即可</p><p>相关主题配置留意查看官方文档以及配置文件注释信息 <a href="https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml">_config.fluid.yml</a></p><h2 id="2-3-修改配置"><a href="#2-3-修改配置" class="headerlink" title="2.3 修改配置"></a>2.3 修改配置</h2><blockquote><p>如果已经新建了 Gtihub Pages 打开 <code>_config.yml</code> 配置文件添加如下内容</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">deploy: <br>  <span class="hljs-built_in">type</span>: git <br>  repository: git@github.com:lanyecheng/lanyecheng.github.io.git<br>  branch: main<br></code></pre></td></tr></table></figure><h2 id="2-4-安装插件"><a href="#2-4-安装插件" class="headerlink" title="2.4 安装插件"></a>2.4 安装插件</h2><p><a href="https://hexo.io/zh-cn/docs/one-command-deployment">一键部署官方文档</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><h1 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h1><p>后续大概的流程就是</p><ul><li>hexo n xxx</li><li>hexo clean</li><li>hexo g</li><li>hexo s</li><li>hexo d</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
